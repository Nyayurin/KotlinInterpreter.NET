//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Yurn/RiderProjects/Kotlin/grammar/KotlinParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using Kotlin;
using Kotlin.AST.Expression;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
public partial class KotlinParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ShebangLine=1, DelimitedComment=2, LineComment=3, WS=4, NL=5, RESERVED=6, 
		DOT=7, COMMA=8, LPAREN=9, RPAREN=10, LSQUARE=11, RSQUARE=12, LCURL=13, 
		RCURL=14, MULT=15, MOD=16, DIV=17, ADD=18, SUB=19, INCR=20, DECR=21, CONJ=22, 
		DISJ=23, EXCL_WS=24, EXCL_NO_WS=25, COLON=26, SEMICOLON=27, ASSIGNMENT=28, 
		ADD_ASSIGNMENT=29, SUB_ASSIGNMENT=30, MULT_ASSIGNMENT=31, DIV_ASSIGNMENT=32, 
		MOD_ASSIGNMENT=33, ARROW=34, DOUBLE_ARROW=35, RANGE=36, RANGE_UNTIL=37, 
		COLONCOLON=38, DOUBLE_SEMICOLON=39, HASH=40, AT_NO_WS=41, AT_POST_WS=42, 
		AT_PRE_WS=43, AT_BOTH_WS=44, QUEST_WS=45, QUEST_NO_WS=46, LANGLE=47, RANGLE=48, 
		LE=49, GE=50, EXCL_EQ=51, EXCL_EQEQ=52, AS_SAFE=53, EQEQ=54, EQEQEQ=55, 
		SINGLE_QUOTE=56, AMP=57, RETURN_AT=58, CONTINUE_AT=59, BREAK_AT=60, THIS_AT=61, 
		SUPER_AT=62, FILE=63, FIELD=64, PROPERTY=65, GET=66, SET=67, RECEIVER=68, 
		PARAM=69, SETPARAM=70, DELEGATE=71, PACKAGE=72, IMPORT=73, CLASS=74, INTERFACE=75, 
		FUN=76, OBJECT=77, VAL=78, VAR=79, TYPE_ALIAS=80, CONSTRUCTOR=81, BY=82, 
		COMPANION=83, INIT=84, THIS=85, SUPER=86, TYPEOF=87, WHERE=88, IF=89, 
		ELSE=90, WHEN=91, TRY=92, CATCH=93, FINALLY=94, FOR=95, DO=96, WHILE=97, 
		THROW=98, RETURN=99, CONTINUE=100, BREAK=101, AS=102, IS=103, IN=104, 
		NOT_IS=105, NOT_IN=106, OUT=107, DYNAMIC=108, PUBLIC=109, PRIVATE=110, 
		PROTECTED=111, INTERNAL=112, ENUM=113, SEALED=114, ANNOTATION=115, DATA=116, 
		INNER=117, VALUE=118, TAILREC=119, OPERATOR=120, INLINE=121, INFIX=122, 
		EXTERNAL=123, SUSPEND=124, OVERRIDE=125, ABSTRACT=126, FINAL=127, OPEN=128, 
		CONST=129, LATEINIT=130, VARARG=131, NOINLINE=132, CROSSINLINE=133, REIFIED=134, 
		EXPECT=135, ACTUAL=136, RealLiteral=137, FloatLiteral=138, DoubleLiteral=139, 
		IntegerLiteral=140, HexLiteral=141, BinLiteral=142, UnsignedLiteral=143, 
		LongLiteral=144, BooleanLiteral=145, NullLiteral=146, CharacterLiteral=147, 
		Identifier=148, IdentifierOrSoftKey=149, FieldIdentifier=150, QUOTE_OPEN=151, 
		TRIPLE_QUOTE_OPEN=152, UNICODE_CLASS_LL=153, UNICODE_CLASS_LM=154, UNICODE_CLASS_LO=155, 
		UNICODE_CLASS_LT=156, UNICODE_CLASS_LU=157, UNICODE_CLASS_ND=158, UNICODE_CLASS_NL=159, 
		QUOTE_CLOSE=160, LineStrRef=161, LineStrText=162, LineStrEscapedChar=163, 
		LineStrExprStart=164, TRIPLE_QUOTE_CLOSE=165, MultiLineStringQuote=166, 
		MultiLineStrRef=167, MultiLineStrText=168, MultiLineStrExprStart=169, 
		Inside_Comment=170, Inside_WS=171, Inside_NL=172, ErrorCharacter=173;
	public const int
		RULE_kotlinFile = 0, RULE_script = 1, RULE_shebangLine = 2, RULE_fileAnnotation = 3, 
		RULE_packageHeader = 4, RULE_importList = 5, RULE_importHeader = 6, RULE_importAlias = 7, 
		RULE_topLevelObject = 8, RULE_typeAlias = 9, RULE_declaration = 10, RULE_classDeclaration = 11, 
		RULE_primaryConstructor = 12, RULE_classBody = 13, RULE_classParameters = 14, 
		RULE_classParameter = 15, RULE_delegationSpecifiers = 16, RULE_delegationSpecifier = 17, 
		RULE_constructorInvocation = 18, RULE_annotatedDelegationSpecifier = 19, 
		RULE_explicitDelegation = 20, RULE_typeParameters = 21, RULE_typeParameter = 22, 
		RULE_typeConstraints = 23, RULE_typeConstraint = 24, RULE_classMemberDeclarations = 25, 
		RULE_classMemberDeclaration = 26, RULE_anonymousInitializer = 27, RULE_companionObject = 28, 
		RULE_functionValueParameters = 29, RULE_functionValueParameter = 30, RULE_functionDeclaration = 31, 
		RULE_functionBody = 32, RULE_variableDeclaration = 33, RULE_multiVariableDeclaration = 34, 
		RULE_propertyDeclaration = 35, RULE_propertyDelegate = 36, RULE_getter = 37, 
		RULE_setter = 38, RULE_parametersWithOptionalType = 39, RULE_functionValueParameterWithOptionalType = 40, 
		RULE_parameterWithOptionalType = 41, RULE_parameter = 42, RULE_objectDeclaration = 43, 
		RULE_secondaryConstructor = 44, RULE_constructorDelegationCall = 45, RULE_enumClassBody = 46, 
		RULE_enumEntries = 47, RULE_enumEntry = 48, RULE_type = 49, RULE_typeReference = 50, 
		RULE_nullableType = 51, RULE_quest = 52, RULE_userType = 53, RULE_simpleUserType = 54, 
		RULE_typeProjection = 55, RULE_typeProjectionModifiers = 56, RULE_typeProjectionModifier = 57, 
		RULE_functionType = 58, RULE_functionTypeParameters = 59, RULE_parenthesizedType = 60, 
		RULE_receiverType = 61, RULE_parenthesizedUserType = 62, RULE_definitelyNonNullableType = 63, 
		RULE_statements = 64, RULE_statement = 65, RULE_label = 66, RULE_controlStructureBody = 67, 
		RULE_block = 68, RULE_loopStatement = 69, RULE_forStatement = 70, RULE_whileStatement = 71, 
		RULE_doWhileStatement = 72, RULE_assignment = 73, RULE_semi = 74, RULE_semis = 75, 
		RULE_expression = 76, RULE_disjunction = 77, RULE_conjunction = 78, RULE_equality = 79, 
		RULE_comparison = 80, RULE_genericCallLikeComparison = 81, RULE_infixOperation = 82, 
		RULE_elvisExpression = 83, RULE_elvis = 84, RULE_infixFunctionCall = 85, 
		RULE_rangeExpression = 86, RULE_additiveExpression = 87, RULE_multiplicativeExpression = 88, 
		RULE_asExpression = 89, RULE_prefixUnaryExpression = 90, RULE_unaryPrefix = 91, 
		RULE_postfixUnaryExpression = 92, RULE_postfixUnarySuffix = 93, RULE_directlyAssignableExpression = 94, 
		RULE_parenthesizedDirectlyAssignableExpression = 95, RULE_assignableExpression = 96, 
		RULE_parenthesizedAssignableExpression = 97, RULE_assignableSuffix = 98, 
		RULE_indexingSuffix = 99, RULE_navigationSuffix = 100, RULE_callSuffix = 101, 
		RULE_annotatedLambda = 102, RULE_typeArguments = 103, RULE_valueArguments = 104, 
		RULE_valueArgument = 105, RULE_primaryExpression = 106, RULE_parenthesizedExpression = 107, 
		RULE_collectionLiteral = 108, RULE_literalConstant = 109, RULE_stringLiteral = 110, 
		RULE_lineStringLiteral = 111, RULE_multiLineStringLiteral = 112, RULE_lineStringContent = 113, 
		RULE_lineStringExpression = 114, RULE_multiLineStringContent = 115, RULE_multiLineStringExpression = 116, 
		RULE_lambdaLiteral = 117, RULE_lambdaParameters = 118, RULE_lambdaParameter = 119, 
		RULE_anonymousFunction = 120, RULE_functionLiteral = 121, RULE_objectLiteral = 122, 
		RULE_thisExpression = 123, RULE_superExpression = 124, RULE_ifExpression = 125, 
		RULE_whenSubject = 126, RULE_whenExpression = 127, RULE_whenEntry = 128, 
		RULE_whenCondition = 129, RULE_rangeTest = 130, RULE_typeTest = 131, RULE_tryExpression = 132, 
		RULE_catchBlock = 133, RULE_finallyBlock = 134, RULE_jumpExpression = 135, 
		RULE_callableReference = 136, RULE_assignmentAndOperator = 137, RULE_equalityOperator = 138, 
		RULE_comparisonOperator = 139, RULE_inOperator = 140, RULE_isOperator = 141, 
		RULE_additiveOperator = 142, RULE_multiplicativeOperator = 143, RULE_asOperator = 144, 
		RULE_prefixUnaryOperator = 145, RULE_postfixUnaryOperator = 146, RULE_excl = 147, 
		RULE_memberAccessOperator = 148, RULE_safeNav = 149, RULE_modifiers = 150, 
		RULE_parameterModifiers = 151, RULE_modifier = 152, RULE_typeModifiers = 153, 
		RULE_typeModifier = 154, RULE_classModifier = 155, RULE_memberModifier = 156, 
		RULE_visibilityModifier = 157, RULE_varianceModifier = 158, RULE_typeParameterModifiers = 159, 
		RULE_typeParameterModifier = 160, RULE_functionModifier = 161, RULE_propertyModifier = 162, 
		RULE_inheritanceModifier = 163, RULE_parameterModifier = 164, RULE_reificationModifier = 165, 
		RULE_platformModifier = 166, RULE_annotation = 167, RULE_singleAnnotation = 168, 
		RULE_multiAnnotation = 169, RULE_annotationUseSiteTarget = 170, RULE_unescapedAnnotation = 171, 
		RULE_simpleIdentifier = 172, RULE_identifier = 173;
	public static readonly string[] ruleNames = {
		"kotlinFile", "script", "shebangLine", "fileAnnotation", "packageHeader", 
		"importList", "importHeader", "importAlias", "topLevelObject", "typeAlias", 
		"declaration", "classDeclaration", "primaryConstructor", "classBody", 
		"classParameters", "classParameter", "delegationSpecifiers", "delegationSpecifier", 
		"constructorInvocation", "annotatedDelegationSpecifier", "explicitDelegation", 
		"typeParameters", "typeParameter", "typeConstraints", "typeConstraint", 
		"classMemberDeclarations", "classMemberDeclaration", "anonymousInitializer", 
		"companionObject", "functionValueParameters", "functionValueParameter", 
		"functionDeclaration", "functionBody", "variableDeclaration", "multiVariableDeclaration", 
		"propertyDeclaration", "propertyDelegate", "getter", "setter", "parametersWithOptionalType", 
		"functionValueParameterWithOptionalType", "parameterWithOptionalType", 
		"parameter", "objectDeclaration", "secondaryConstructor", "constructorDelegationCall", 
		"enumClassBody", "enumEntries", "enumEntry", "type", "typeReference", 
		"nullableType", "quest", "userType", "simpleUserType", "typeProjection", 
		"typeProjectionModifiers", "typeProjectionModifier", "functionType", "functionTypeParameters", 
		"parenthesizedType", "receiverType", "parenthesizedUserType", "definitelyNonNullableType", 
		"statements", "statement", "label", "controlStructureBody", "block", "loopStatement", 
		"forStatement", "whileStatement", "doWhileStatement", "assignment", "semi", 
		"semis", "expression", "disjunction", "conjunction", "equality", "comparison", 
		"genericCallLikeComparison", "infixOperation", "elvisExpression", "elvis", 
		"infixFunctionCall", "rangeExpression", "additiveExpression", "multiplicativeExpression", 
		"asExpression", "prefixUnaryExpression", "unaryPrefix", "postfixUnaryExpression", 
		"postfixUnarySuffix", "directlyAssignableExpression", "parenthesizedDirectlyAssignableExpression", 
		"assignableExpression", "parenthesizedAssignableExpression", "assignableSuffix", 
		"indexingSuffix", "navigationSuffix", "callSuffix", "annotatedLambda", 
		"typeArguments", "valueArguments", "valueArgument", "primaryExpression", 
		"parenthesizedExpression", "collectionLiteral", "literalConstant", "stringLiteral", 
		"lineStringLiteral", "multiLineStringLiteral", "lineStringContent", "lineStringExpression", 
		"multiLineStringContent", "multiLineStringExpression", "lambdaLiteral", 
		"lambdaParameters", "lambdaParameter", "anonymousFunction", "functionLiteral", 
		"objectLiteral", "thisExpression", "superExpression", "ifExpression", 
		"whenSubject", "whenExpression", "whenEntry", "whenCondition", "rangeTest", 
		"typeTest", "tryExpression", "catchBlock", "finallyBlock", "jumpExpression", 
		"callableReference", "assignmentAndOperator", "equalityOperator", "comparisonOperator", 
		"inOperator", "isOperator", "additiveOperator", "multiplicativeOperator", 
		"asOperator", "prefixUnaryOperator", "postfixUnaryOperator", "excl", "memberAccessOperator", 
		"safeNav", "modifiers", "parameterModifiers", "modifier", "typeModifiers", 
		"typeModifier", "classModifier", "memberModifier", "visibilityModifier", 
		"varianceModifier", "typeParameterModifiers", "typeParameterModifier", 
		"functionModifier", "propertyModifier", "inheritanceModifier", "parameterModifier", 
		"reificationModifier", "platformModifier", "annotation", "singleAnnotation", 
		"multiAnnotation", "annotationUseSiteTarget", "unescapedAnnotation", "simpleIdentifier", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'...'", "'.'", "','", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "'*'", "'%'", "'/'", "'+'", "'-'", "'++'", 
		"'--'", "'&&'", "'||'", null, "'!'", "':'", "';'", "'='", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'->'", "'=>'", "'..'", "'..<'", "'::'", "';;'", 
		"'#'", "'@'", null, null, null, null, "'?'", "'<'", "'>'", "'<='", "'>='", 
		"'!='", "'!=='", "'as?'", "'=='", "'==='", "'''", "'&'", null, null, null, 
		null, null, "'file'", "'field'", "'property'", "'get'", "'set'", "'receiver'", 
		"'param'", "'setparam'", "'delegate'", "'package'", "'import'", "'class'", 
		"'interface'", "'fun'", "'object'", "'val'", "'var'", "'typealias'", "'constructor'", 
		"'by'", "'companion'", "'init'", "'this'", "'super'", "'typeof'", "'where'", 
		"'if'", "'else'", "'when'", "'try'", "'catch'", "'finally'", "'for'", 
		"'do'", "'while'", "'throw'", "'return'", "'continue'", "'break'", "'as'", 
		"'is'", "'in'", null, null, "'out'", "'dynamic'", "'public'", "'private'", 
		"'protected'", "'internal'", "'enum'", "'sealed'", "'annotation'", "'data'", 
		"'inner'", "'value'", "'tailrec'", "'operator'", "'inline'", "'infix'", 
		"'external'", "'suspend'", "'override'", "'abstract'", "'final'", "'open'", 
		"'const'", "'lateinit'", "'vararg'", "'noinline'", "'crossinline'", "'reified'", 
		"'expect'", "'actual'", null, null, null, null, null, null, null, null, 
		null, "'null'", null, null, null, null, null, "'\"\"\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ShebangLine", "DelimitedComment", "LineComment", "WS", "NL", "RESERVED", 
		"DOT", "COMMA", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
		"MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", "CONJ", "DISJ", "EXCL_WS", 
		"EXCL_NO_WS", "COLON", "SEMICOLON", "ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", 
		"MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
		"RANGE", "RANGE_UNTIL", "COLONCOLON", "DOUBLE_SEMICOLON", "HASH", "AT_NO_WS", 
		"AT_POST_WS", "AT_PRE_WS", "AT_BOTH_WS", "QUEST_WS", "QUEST_NO_WS", "LANGLE", 
		"RANGLE", "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", "EQEQEQ", 
		"SINGLE_QUOTE", "AMP", "RETURN_AT", "CONTINUE_AT", "BREAK_AT", "THIS_AT", 
		"SUPER_AT", "FILE", "FIELD", "PROPERTY", "GET", "SET", "RECEIVER", "PARAM", 
		"SETPARAM", "DELEGATE", "PACKAGE", "IMPORT", "CLASS", "INTERFACE", "FUN", 
		"OBJECT", "VAL", "VAR", "TYPE_ALIAS", "CONSTRUCTOR", "BY", "COMPANION", 
		"INIT", "THIS", "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", "TRY", 
		"CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", "RETURN", "CONTINUE", 
		"BREAK", "AS", "IS", "IN", "NOT_IS", "NOT_IN", "OUT", "DYNAMIC", "PUBLIC", 
		"PRIVATE", "PROTECTED", "INTERNAL", "ENUM", "SEALED", "ANNOTATION", "DATA", 
		"INNER", "VALUE", "TAILREC", "OPERATOR", "INLINE", "INFIX", "EXTERNAL", 
		"SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", "OPEN", "CONST", "LATEINIT", 
		"VARARG", "NOINLINE", "CROSSINLINE", "REIFIED", "EXPECT", "ACTUAL", "RealLiteral", 
		"FloatLiteral", "DoubleLiteral", "IntegerLiteral", "HexLiteral", "BinLiteral", 
		"UnsignedLiteral", "LongLiteral", "BooleanLiteral", "NullLiteral", "CharacterLiteral", 
		"Identifier", "IdentifierOrSoftKey", "FieldIdentifier", "QUOTE_OPEN", 
		"TRIPLE_QUOTE_OPEN", "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", 
		"UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", 
		"QUOTE_CLOSE", "LineStrRef", "LineStrText", "LineStrEscapedChar", "LineStrExprStart", 
		"TRIPLE_QUOTE_CLOSE", "MultiLineStringQuote", "MultiLineStrRef", "MultiLineStrText", 
		"MultiLineStrExprStart", "Inside_Comment", "Inside_WS", "Inside_NL", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KotlinParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KotlinParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KotlinParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KotlinParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class KotlinFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageHeaderContext packageHeader() {
			return GetRuleContext<PackageHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportListContext importList() {
			return GetRuleContext<ImportListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KotlinParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShebangLineContext shebangLine() {
			return GetRuleContext<ShebangLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileAnnotationContext[] fileAnnotation() {
			return GetRuleContexts<FileAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileAnnotationContext fileAnnotation(int i) {
			return GetRuleContext<FileAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelObjectContext[] topLevelObject() {
			return GetRuleContexts<TopLevelObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelObjectContext topLevelObject(int i) {
			return GetRuleContext<TopLevelObjectContext>(i);
		}
		public KotlinFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kotlinFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKotlinFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KotlinFileContext kotlinFile() {
		KotlinFileContext _localctx = new KotlinFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_kotlinFile);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ShebangLine) {
				{
				State = 348;
				shebangLine();
				}
			}

			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 351;
				Match(NL);
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 360;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 357;
					fileAnnotation();
					}
					} 
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 363;
			packageHeader();
			State = 364;
			importList();
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 8070450497888190591L) != 0)) {
				{
				{
				State = 365;
				topLevelObject();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 371;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageHeaderContext packageHeader() {
			return GetRuleContext<PackageHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportListContext importList() {
			return GetRuleContext<ImportListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KotlinParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShebangLineContext shebangLine() {
			return GetRuleContext<ShebangLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileAnnotationContext[] fileAnnotation() {
			return GetRuleContexts<FileAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileAnnotationContext fileAnnotation(int i) {
			return GetRuleContext<FileAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_script);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ShebangLine) {
				{
				State = 373;
				shebangLine();
				}
			}

			State = 379;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 376;
					Match(NL);
					}
					} 
				}
				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 382;
					fileAnnotation();
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 388;
			packageHeader();
			State = 389;
			importList();
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -288219106103252448L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -8521290612993L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 27259903L) != 0)) {
				{
				{
				State = 390;
				statement();
				State = 391;
				semi();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 398;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShebangLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShebangLine() { return GetToken(KotlinParser.ShebangLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ShebangLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shebangLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShebangLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShebangLineContext shebangLine() {
		ShebangLineContext _localctx = new ShebangLineContext(Context, State);
		EnterRule(_localctx, 4, RULE_shebangLine);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(ShebangLine);
			State = 402;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 401;
					Match(NL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(KotlinParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_NO_WS() { return GetToken(KotlinParser.AT_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_PRE_WS() { return GetToken(KotlinParser.AT_PRE_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(KotlinParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(KotlinParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext[] unescapedAnnotation() {
			return GetRuleContexts<UnescapedAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext unescapedAnnotation(int i) {
			return GetRuleContext<UnescapedAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FileAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileAnnotationContext fileAnnotation() {
		FileAnnotationContext _localctx = new FileAnnotationContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileAnnotation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = TokenStream.LA(1);
			if ( !(_la==AT_NO_WS || _la==AT_PRE_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 407;
			Match(FILE);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 408;
				Match(NL);
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 414;
			Match(COLON);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 415;
				Match(NL);
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 430;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LSQUARE:
				{
				State = 421;
				Match(LSQUARE);
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 422;
					unescapedAnnotation();
					}
					}
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & -17588927330817L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 2098175L) != 0) );
				State = 427;
				Match(RSQUARE);
				}
				break;
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 429;
				unescapedAnnotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 435;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 432;
					Match(NL);
					}
					} 
				}
				State = 437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(KotlinParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		public PackageHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageHeaderContext packageHeader() {
		PackageHeaderContext _localctx = new PackageHeaderContext(Context, State);
		EnterRule(_localctx, 8, RULE_packageHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PACKAGE) {
				{
				State = 438;
				Match(PACKAGE);
				State = 439;
				identifier();
				State = 441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 440;
					semi();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportHeaderContext[] importHeader() {
			return GetRuleContexts<ImportHeaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportHeaderContext importHeader(int i) {
			return GetRuleContext<ImportHeaderContext>(i);
		}
		public ImportListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportListContext importList() {
		ImportListContext _localctx = new ImportListContext(Context, State);
		EnterRule(_localctx, 10, RULE_importList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 445;
					importHeader();
					}
					} 
				}
				State = 450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(KotlinParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext importAlias() {
			return GetRuleContext<ImportAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		public ImportHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportHeaderContext importHeader() {
		ImportHeaderContext _localctx = new ImportHeaderContext(Context, State);
		EnterRule(_localctx, 12, RULE_importHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(IMPORT);
			State = 452;
			identifier();
			State = 456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 453;
				Match(DOT);
				State = 454;
				Match(MULT);
				}
				break;
			case AS:
				{
				State = 455;
				importAlias();
				}
				break;
			case Eof:
			case NL:
			case LPAREN:
			case LSQUARE:
			case LCURL:
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL_WS:
			case EXCL_NO_WS:
			case SEMICOLON:
			case COLONCOLON:
			case AT_NO_WS:
			case AT_PRE_WS:
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case THIS_AT:
			case SUPER_AT:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CLASS:
			case INTERFACE:
			case FUN:
			case OBJECT:
			case VAL:
			case VAR:
			case TYPE_ALIAS:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case THIS:
			case SUPER:
			case WHERE:
			case IF:
			case WHEN:
			case TRY:
			case CATCH:
			case FINALLY:
			case FOR:
			case DO:
			case WHILE:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case RealLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case UnsignedLiteral:
			case LongLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case CharacterLiteral:
			case Identifier:
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
				break;
			default:
				break;
			}
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 458;
				semi();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(KotlinParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		public ImportAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasContext importAlias() {
		ImportAliasContext _localctx = new ImportAliasContext(Context, State);
		EnterRule(_localctx, 14, RULE_importAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(AS);
			State = 462;
			simpleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemisContext semis() {
			return GetRuleContext<SemisContext>(0);
		}
		public TopLevelObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelObjectContext topLevelObject() {
		TopLevelObjectContext _localctx = new TopLevelObjectContext(Context, State);
		EnterRule(_localctx, 16, RULE_topLevelObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			declaration();
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL || _la==SEMICOLON) {
				{
				State = 465;
				semis();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_ALIAS() { return GetToken(KotlinParser.TYPE_ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasContext typeAlias() {
		TypeAliasContext _localctx = new TypeAliasContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 468;
				modifiers();
				}
			}

			State = 471;
			Match(TYPE_ALIAS);
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 472;
				Match(NL);
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 478;
			simpleIdentifier();
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 479;
					Match(NL);
					}
					}
					State = 484;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 485;
				typeParameters();
				}
				break;
			}
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 488;
				Match(NL);
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 494;
			Match(ASSIGNMENT);
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 495;
				Match(NL);
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 501;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration() {
			return GetRuleContext<PropertyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext typeAlias() {
			return GetRuleContext<TypeAliasContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_declaration);
		try {
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				objectDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 505;
				functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 506;
				propertyDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 507;
				typeAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(KotlinParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(KotlinParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryConstructorContext primaryConstructor() {
			return GetRuleContext<PrimaryConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintsContext typeConstraints() {
			return GetRuleContext<TypeConstraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumClassBodyContext enumClassBody() {
			return GetRuleContext<EnumClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUN() { return GetToken(KotlinParser.FUN, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_classDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 510;
				modifiers();
				}
			}

			State = 524;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 513;
				Match(CLASS);
				}
				break;
			case INTERFACE:
			case FUN:
				{
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FUN) {
					{
					State = 514;
					Match(FUN);
					State = 518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 515;
						Match(NL);
						}
						}
						State = 520;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 523;
				Match(INTERFACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 526;
				Match(NL);
				}
				}
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 532;
			simpleIdentifier();
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 533;
					Match(NL);
					}
					}
					State = 538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 539;
				typeParameters();
				}
				break;
			}
			State = 549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 542;
					Match(NL);
					}
					}
					State = 547;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 548;
				primaryConstructor();
				}
				break;
			}
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 551;
					Match(NL);
					}
					}
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 557;
				Match(COLON);
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 558;
						Match(NL);
						}
						} 
					}
					State = 563;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 564;
				delegationSpecifiers();
				}
				break;
			}
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 567;
					Match(NL);
					}
					}
					State = 572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 573;
				typeConstraints();
				}
				break;
			}
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 576;
					Match(NL);
					}
					}
					State = 581;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 582;
				classBody();
				}
				break;
			case 2:
				{
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 583;
					Match(NL);
					}
					}
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 589;
				enumClassBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassParametersContext classParameters() {
			return GetRuleContext<ClassParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR() { return GetToken(KotlinParser.CONSTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public PrimaryConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryConstructorContext primaryConstructor() {
		PrimaryConstructorContext _localctx = new PrimaryConstructorContext(Context, State);
		EnterRule(_localctx, 24, RULE_primaryConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 63050394514751489L) != 0)) {
				{
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
					{
					State = 592;
					modifiers();
					}
				}

				State = 595;
				Match(CONSTRUCTOR);
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 596;
					Match(NL);
					}
					}
					State = 601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 604;
			classParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationsContext classMemberDeclarations() {
			return GetRuleContext<ClassMemberDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_classBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			Match(LCURL);
			State = 610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 607;
					Match(NL);
					}
					} 
				}
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 613;
			classMemberDeclarations();
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 614;
				Match(NL);
				}
				}
				State = 619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 620;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassParameterContext[] classParameter() {
			return GetRuleContexts<ClassParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassParameterContext classParameter(int i) {
			return GetRuleContext<ClassParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public ClassParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParametersContext classParameters() {
		ClassParametersContext _localctx = new ClassParametersContext(Context, State);
		EnterRule(_localctx, 28, RULE_classParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(LPAREN);
			State = 626;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 623;
					Match(NL);
					}
					} 
				}
				State = 628;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 629;
				classParameter();
				State = 646;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 633;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 630;
							Match(NL);
							}
							}
							State = 635;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 636;
						Match(COMMA);
						State = 640;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 637;
								Match(NL);
								}
								} 
							}
							State = 642;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
						}
						State = 643;
						classParameter();
						}
						} 
					}
					State = 648;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				}
				State = 656;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 652;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 649;
						Match(NL);
						}
						}
						State = 654;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 655;
					Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 660;
				Match(NL);
				}
				}
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 666;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(KotlinParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(KotlinParser.VAR, 0); }
		public ClassParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParameterContext classParameter() {
		ClassParameterContext _localctx = new ClassParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_classParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 668;
				modifiers();
				}
				break;
			}
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAL || _la==VAR) {
				{
				State = 671;
				_la = TokenStream.LA(1);
				if ( !(_la==VAL || _la==VAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 674;
				Match(NL);
				}
				}
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 680;
			simpleIdentifier();
			State = 681;
			Match(COLON);
			State = 685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 682;
				Match(NL);
				}
				}
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 688;
			type();
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 689;
					Match(NL);
					}
					}
					State = 694;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 695;
				Match(ASSIGNMENT);
				State = 699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 696;
						Match(NL);
						}
						} 
					}
					State = 701;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				State = 702;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegationSpecifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotatedDelegationSpecifierContext[] annotatedDelegationSpecifier() {
			return GetRuleContexts<AnnotatedDelegationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotatedDelegationSpecifierContext annotatedDelegationSpecifier(int i) {
			return GetRuleContext<AnnotatedDelegationSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public DelegationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegationSpecifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegationSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegationSpecifiersContext delegationSpecifiers() {
		DelegationSpecifiersContext _localctx = new DelegationSpecifiersContext(Context, State);
		EnterRule(_localctx, 32, RULE_delegationSpecifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			annotatedDelegationSpecifier();
			State = 722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 706;
						Match(NL);
						}
						}
						State = 711;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 712;
					Match(COMMA);
					State = 716;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 713;
							Match(NL);
							}
							} 
						}
						State = 718;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
					}
					State = 719;
					annotatedDelegationSpecifier();
					}
					} 
				}
				State = 724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorInvocationContext constructorInvocation() {
			return GetRuleContext<ConstructorInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitDelegationContext explicitDelegation() {
			return GetRuleContext<ExplicitDelegationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(KotlinParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public DelegationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegationSpecifierContext delegationSpecifier() {
		DelegationSpecifierContext _localctx = new DelegationSpecifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_delegationSpecifier);
		int _la;
		try {
			State = 737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 725;
				constructorInvocation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 726;
				explicitDelegation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 727;
				userType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 728;
				functionType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 729;
				Match(SUSPEND);
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 730;
					Match(NL);
					}
					}
					State = 735;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 736;
				functionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInvocationContext constructorInvocation() {
		ConstructorInvocationContext _localctx = new ConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 36, RULE_constructorInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			userType();
			State = 743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 740;
				Match(NL);
				}
				}
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 746;
			valueArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedDelegationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifierContext delegationSpecifier() {
			return GetRuleContext<DelegationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnnotatedDelegationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedDelegationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedDelegationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedDelegationSpecifierContext annotatedDelegationSpecifier() {
		AnnotatedDelegationSpecifierContext _localctx = new AnnotatedDelegationSpecifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_annotatedDelegationSpecifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 748;
					annotation();
					}
					} 
				}
				State = 753;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 754;
				Match(NL);
				}
				}
				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 760;
			delegationSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitDelegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(KotlinParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ExplicitDelegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitDelegation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitDelegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitDelegationContext explicitDelegation() {
		ExplicitDelegationContext _localctx = new ExplicitDelegationContext(Context, State);
		EnterRule(_localctx, 40, RULE_explicitDelegation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 762;
				userType();
				}
				break;
			case 2:
				{
				State = 763;
				functionType();
				}
				break;
			}
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 766;
				Match(NL);
				}
				}
				State = 771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 772;
			Match(BY);
			State = 776;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 773;
					Match(NL);
					}
					} 
				}
				State = 778;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			State = 779;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(LANGLE);
			State = 785;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 782;
					Match(NL);
					}
					} 
				}
				State = 787;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 788;
			typeParameter();
			State = 805;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 792;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 789;
						Match(NL);
						}
						}
						State = 794;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 795;
					Match(COMMA);
					State = 799;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 796;
							Match(NL);
							}
							} 
						}
						State = 801;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
					}
					State = 802;
					typeParameter();
					}
					} 
				}
				State = 807;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			State = 815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 808;
					Match(NL);
					}
					}
					State = 813;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 814;
				Match(COMMA);
				}
				break;
			}
			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 817;
				Match(NL);
				}
				}
				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 823;
			Match(RANGLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifiersContext typeParameterModifiers() {
			return GetRuleContext<TypeParameterModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 825;
				typeParameterModifiers();
				}
				break;
			}
			State = 831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 828;
				Match(NL);
				}
				}
				State = 833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 834;
			simpleIdentifier();
			State = 849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 835;
					Match(NL);
					}
					}
					State = 840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 841;
				Match(COLON);
				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 842;
					Match(NL);
					}
					}
					State = 847;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 848;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConstraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(KotlinParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintContext[] typeConstraint() {
			return GetRuleContexts<TypeConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintContext typeConstraint(int i) {
			return GetRuleContext<TypeConstraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public TypeConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeConstraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeConstraintsContext typeConstraints() {
		TypeConstraintsContext _localctx = new TypeConstraintsContext(Context, State);
		EnterRule(_localctx, 46, RULE_typeConstraints);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			Match(WHERE);
			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 852;
				Match(NL);
				}
				}
				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 858;
			typeConstraint();
			State = 875;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 862;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 859;
						Match(NL);
						}
						}
						State = 864;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 865;
					Match(COMMA);
					State = 869;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 866;
						Match(NL);
						}
						}
						State = 871;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 872;
					typeConstraint();
					}
					} 
				}
				State = 877;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public TypeConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeConstraintContext typeConstraint() {
		TypeConstraintContext _localctx = new TypeConstraintContext(Context, State);
		EnterRule(_localctx, 48, RULE_typeConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT_NO_WS || _la==AT_PRE_WS) {
				{
				{
				State = 878;
				annotation();
				}
				}
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 884;
			simpleIdentifier();
			State = 888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 885;
				Match(NL);
				}
				}
				State = 890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 891;
			Match(COLON);
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 892;
				Match(NL);
				}
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 898;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemisContext[] semis() {
			return GetRuleContexts<SemisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemisContext semis(int i) {
			return GetRuleContext<SemisContext>(i);
		}
		public ClassMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationsContext classMemberDeclarations() {
		ClassMemberDeclarationsContext _localctx = new ClassMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 50, RULE_classMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 8070450497888192255L) != 0)) {
				{
				{
				State = 900;
				classMemberDeclaration();
				State = 902;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 901;
					semis();
					}
					break;
				}
				}
				}
				State = 908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanionObjectContext companionObject() {
			return GetRuleContext<CompanionObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousInitializerContext anonymousInitializer() {
			return GetRuleContext<AnonymousInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SecondaryConstructorContext secondaryConstructor() {
			return GetRuleContext<SecondaryConstructorContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_classMemberDeclaration);
		try {
			State = 913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 909;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 910;
				companionObject();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 911;
				anonymousInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 912;
				secondaryConstructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(KotlinParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnonymousInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousInitializerContext anonymousInitializer() {
		AnonymousInitializerContext _localctx = new AnonymousInitializerContext(Context, State);
		EnterRule(_localctx, 54, RULE_anonymousInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(INIT);
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 916;
				Match(NL);
				}
				}
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 922;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanionObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPANION() { return GetToken(KotlinParser.COMPANION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(KotlinParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(KotlinParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public CompanionObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_companionObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompanionObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanionObjectContext companionObject() {
		CompanionObjectContext _localctx = new CompanionObjectContext(Context, State);
		EnterRule(_localctx, 56, RULE_companionObject);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 924;
				modifiers();
				}
			}

			State = 927;
			Match(COMPANION);
			State = 931;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 928;
					Match(NL);
					}
					} 
				}
				State = 933;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			State = 935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATA) {
				{
				State = 934;
				Match(DATA);
				}
			}

			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 937;
				Match(NL);
				}
				}
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 943;
			Match(OBJECT);
			State = 951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 944;
					Match(NL);
					}
					}
					State = 949;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 950;
				simpleIdentifier();
				}
				break;
			}
			State = 967;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 953;
					Match(NL);
					}
					}
					State = 958;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 959;
				Match(COLON);
				State = 963;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 960;
						Match(NL);
						}
						} 
					}
					State = 965;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				}
				State = 966;
				delegationSpecifiers();
				}
				break;
			}
			State = 976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 969;
					Match(NL);
					}
					}
					State = 974;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 975;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionValueParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParameterContext[] functionValueParameter() {
			return GetRuleContexts<FunctionValueParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParameterContext functionValueParameter(int i) {
			return GetRuleContext<FunctionValueParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public FunctionValueParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionValueParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionValueParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionValueParametersContext functionValueParameters() {
		FunctionValueParametersContext _localctx = new FunctionValueParametersContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionValueParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			Match(LPAREN);
			State = 982;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 979;
					Match(NL);
					}
					} 
				}
				State = 984;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			}
			State = 1014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & 13668035483140101L) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 2200096997375L) != 0)) {
				{
				State = 985;
				functionValueParameter();
				State = 1002;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 989;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 986;
							Match(NL);
							}
							}
							State = 991;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 992;
						Match(COMMA);
						State = 996;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 993;
							Match(NL);
							}
							}
							State = 998;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 999;
						functionValueParameter();
						}
						} 
					}
					State = 1004;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
				}
				State = 1012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 1008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1005;
						Match(NL);
						}
						}
						State = 1010;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1011;
					Match(COMMA);
					}
					break;
				}
				}
			}

			State = 1019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1016;
				Match(NL);
				}
				}
				State = 1021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1022;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionValueParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifiersContext parameterModifiers() {
			return GetRuleContext<ParameterModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext? expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FunctionValueParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionValueParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionValueParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionValueParameterContext functionValueParameter() {
		FunctionValueParameterContext _localctx = new FunctionValueParameterContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionValueParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1024;
				parameterModifiers();
				}
				break;
			}
			State = 1027;
			parameter();
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1028;
					Match(NL);
					}
					}
					State = 1033;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1034;
				Match(ASSIGNMENT);
				State = 1038;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1035;
						Match(NL);
						}
						} 
					}
					State = 1040;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
				}
				State = 1041;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUN() { return GetToken(KotlinParser.FUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParametersContext functionValueParameters() {
			return GetRuleContext<FunctionValueParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintsContext typeConstraints() {
			return GetRuleContext<TypeConstraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 1044;
				modifiers();
				}
			}

			State = 1047;
			Match(FUN);
			State = 1055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1048;
					Match(NL);
					}
					}
					State = 1053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1054;
				typeParameters();
				}
				break;
			}
			State = 1072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 1060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1057;
					Match(NL);
					}
					}
					State = 1062;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1063;
				receiverType();
				State = 1067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1064;
					Match(NL);
					}
					}
					State = 1069;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1070;
				Match(DOT);
				}
				break;
			}
			State = 1077;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1074;
				Match(NL);
				}
				}
				State = 1079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1080;
			simpleIdentifier();
			State = 1084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1081;
				Match(NL);
				}
				}
				State = 1086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1087;
			functionValueParameters();
			State = 1102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1088;
					Match(NL);
					}
					}
					State = 1093;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1094;
				Match(COLON);
				State = 1098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1095;
					Match(NL);
					}
					}
					State = 1100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1101;
				type();
				}
				break;
			}
			State = 1111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1104;
					Match(NL);
					}
					}
					State = 1109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1110;
				typeConstraints();
				}
				break;
			}
			State = 1120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				{
				State = 1116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1113;
					Match(NL);
					}
					}
					State = 1118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1119;
				functionBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_functionBody);
		try {
			int _alt;
			State = 1131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1122;
				block();
				}
				break;
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1123;
				Match(ASSIGNMENT);
				State = 1127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1124;
						Match(NL);
						}
						} 
					}
					State = 1129;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
				}
				State = 1130;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT_NO_WS || _la==AT_PRE_WS) {
				{
				{
				State = 1133;
				annotation();
				}
				}
				State = 1138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1139;
				Match(NL);
				}
				}
				State = 1144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1145;
			simpleIdentifier();
			State = 1160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1146;
					Match(NL);
					}
					}
					State = 1151;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1152;
				Match(COLON);
				State = 1156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1153;
					Match(NL);
					}
					}
					State = 1158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1159;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public MultiVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiVariableDeclarationContext multiVariableDeclaration() {
		MultiVariableDeclarationContext _localctx = new MultiVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_multiVariableDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			Match(LPAREN);
			State = 1166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1163;
					Match(NL);
					}
					} 
				}
				State = 1168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			State = 1169;
			variableDeclaration();
			State = 1186;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1170;
						Match(NL);
						}
						}
						State = 1175;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1176;
					Match(COMMA);
					State = 1180;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1177;
							Match(NL);
							}
							} 
						}
						State = 1182;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
					}
					State = 1183;
					variableDeclaration();
					}
					} 
				}
				State = 1188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			}
			State = 1196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1189;
					Match(NL);
					}
					}
					State = 1194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1195;
				Match(COMMA);
				}
				break;
			}
			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1198;
				Match(NL);
				}
				}
				State = 1203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1204;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(KotlinParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(KotlinParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintsContext typeConstraints() {
			return GetRuleContext<TypeConstraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiVariableDeclarationContext multiVariableDeclaration() {
			return GetRuleContext<MultiVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDelegateContext propertyDelegate() {
			return GetRuleContext<PropertyDelegateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_propertyDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 1206;
				modifiers();
				}
			}

			State = 1209;
			_la = TokenStream.LA(1);
			if ( !(_la==VAL || _la==VAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				{
				State = 1213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1210;
					Match(NL);
					}
					}
					State = 1215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1216;
				typeParameters();
				}
				break;
			}
			State = 1234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				{
				State = 1222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1219;
					Match(NL);
					}
					}
					State = 1224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1225;
				receiverType();
				State = 1229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1226;
					Match(NL);
					}
					}
					State = 1231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1232;
				Match(DOT);
				}
				break;
			}
			{
			State = 1239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1236;
					Match(NL);
					}
					} 
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			State = 1244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 1242;
				multiVariableDeclaration();
				}
				break;
			case NL:
			case AT_NO_WS:
			case AT_PRE_WS:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 1243;
				variableDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			State = 1253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1246;
					Match(NL);
					}
					}
					State = 1251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1252;
				typeConstraints();
				}
				break;
			}
			State = 1272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1255;
					Match(NL);
					}
					}
					State = 1260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1270;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGNMENT:
					{
					State = 1261;
					Match(ASSIGNMENT);
					State = 1265;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1262;
							Match(NL);
							}
							} 
						}
						State = 1267;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
					}
					State = 1268;
					expression();
					}
					break;
				case BY:
					{
					State = 1269;
					propertyDelegate();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1274;
					Match(NL);
					}
					}
					State = 1279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1280;
				Match(SEMICOLON);
				}
				break;
			}
			State = 1286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1283;
					Match(NL);
					}
					} 
				}
				State = 1288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			}
			State = 1319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				{
				State = 1290;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1289;
					getter();
					}
					break;
				}
				State = 1302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
				case 1:
					{
					State = 1295;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1292;
							Match(NL);
							}
							} 
						}
						State = 1297;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
					}
					State = 1299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL || _la==SEMICOLON) {
						{
						State = 1298;
						semi();
						}
					}

					State = 1301;
					setter();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1305;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1304;
					setter();
					}
					break;
				}
				State = 1317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
				case 1:
					{
					State = 1310;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1307;
							Match(NL);
							}
							} 
						}
						State = 1312;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
					}
					State = 1314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL || _la==SEMICOLON) {
						{
						State = 1313;
						semi();
						}
					}

					State = 1316;
					getter();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDelegateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(KotlinParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public PropertyDelegateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDelegate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDelegate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDelegateContext propertyDelegate() {
		PropertyDelegateContext _localctx = new PropertyDelegateContext(Context, State);
		EnterRule(_localctx, 72, RULE_propertyDelegate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321;
			Match(BY);
			State = 1325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1322;
					Match(NL);
					}
					} 
				}
				State = 1327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			}
			State = 1328;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(KotlinParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 74, RULE_getter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 1330;
				modifiers();
				}
			}

			State = 1333;
			Match(GET);
			State = 1371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				State = 1337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1334;
					Match(NL);
					}
					}
					State = 1339;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1340;
				Match(LPAREN);
				State = 1344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1341;
					Match(NL);
					}
					}
					State = 1346;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1347;
				Match(RPAREN);
				State = 1362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
				case 1:
					{
					State = 1351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1348;
						Match(NL);
						}
						}
						State = 1353;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1354;
					Match(COLON);
					State = 1358;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1355;
						Match(NL);
						}
						}
						State = 1360;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1361;
					type();
					}
					break;
				}
				State = 1367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1364;
					Match(NL);
					}
					}
					State = 1369;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1370;
				functionBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(KotlinParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParameterWithOptionalTypeContext functionValueParameterWithOptionalType() {
			return GetRuleContext<FunctionValueParameterWithOptionalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KotlinParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 76, RULE_setter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 1373;
				modifiers();
				}
			}

			State = 1376;
			Match(SET);
			State = 1431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 1380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1377;
					Match(NL);
					}
					}
					State = 1382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1383;
				Match(LPAREN);
				State = 1387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1384;
					Match(NL);
					}
					}
					State = 1389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1390;
				functionValueParameterWithOptionalType();
				State = 1398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1394;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1391;
						Match(NL);
						}
						}
						State = 1396;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1397;
					Match(COMMA);
					}
					break;
				}
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1400;
					Match(NL);
					}
					}
					State = 1405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1406;
				Match(RPAREN);
				State = 1421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1410;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1407;
						Match(NL);
						}
						}
						State = 1412;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1413;
					Match(COLON);
					State = 1417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1414;
						Match(NL);
						}
						}
						State = 1419;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1420;
					type();
					}
					break;
				}
				State = 1426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1423;
					Match(NL);
					}
					}
					State = 1428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1429;
				functionBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersWithOptionalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParameterWithOptionalTypeContext[] functionValueParameterWithOptionalType() {
			return GetRuleContexts<FunctionValueParameterWithOptionalTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParameterWithOptionalTypeContext functionValueParameterWithOptionalType(int i) {
			return GetRuleContext<FunctionValueParameterWithOptionalTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public ParametersWithOptionalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersWithOptionalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersWithOptionalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersWithOptionalTypeContext parametersWithOptionalType() {
		ParametersWithOptionalTypeContext _localctx = new ParametersWithOptionalTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_parametersWithOptionalType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433;
			Match(LPAREN);
			State = 1437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1434;
					Match(NL);
					}
					} 
				}
				State = 1439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			}
			State = 1469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & 13668035483140101L) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 2200096997375L) != 0)) {
				{
				State = 1440;
				functionValueParameterWithOptionalType();
				State = 1457;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1444;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1441;
							Match(NL);
							}
							}
							State = 1446;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1447;
						Match(COMMA);
						State = 1451;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1448;
							Match(NL);
							}
							}
							State = 1453;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1454;
						functionValueParameterWithOptionalType();
						}
						} 
					}
					State = 1459;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
				}
				State = 1467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
				case 1:
					{
					State = 1463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1460;
						Match(NL);
						}
						}
						State = 1465;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1466;
					Match(COMMA);
					}
					break;
				}
				}
			}

			State = 1474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1471;
				Match(NL);
				}
				}
				State = 1476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1477;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionValueParameterWithOptionalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterWithOptionalTypeContext parameterWithOptionalType() {
			return GetRuleContext<ParameterWithOptionalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifiersContext parameterModifiers() {
			return GetRuleContext<ParameterModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FunctionValueParameterWithOptionalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionValueParameterWithOptionalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionValueParameterWithOptionalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionValueParameterWithOptionalTypeContext functionValueParameterWithOptionalType() {
		FunctionValueParameterWithOptionalTypeContext _localctx = new FunctionValueParameterWithOptionalTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_functionValueParameterWithOptionalType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				{
				State = 1479;
				parameterModifiers();
				}
				break;
			}
			State = 1482;
			parameterWithOptionalType();
			State = 1497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 1486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1483;
					Match(NL);
					}
					}
					State = 1488;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1489;
				Match(ASSIGNMENT);
				State = 1493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1490;
						Match(NL);
						}
						} 
					}
					State = 1495;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
				}
				State = 1496;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterWithOptionalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterWithOptionalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterWithOptionalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterWithOptionalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterWithOptionalTypeContext parameterWithOptionalType() {
		ParameterWithOptionalTypeContext _localctx = new ParameterWithOptionalTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_parameterWithOptionalType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499;
			simpleIdentifier();
			State = 1503;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1500;
					Match(NL);
					}
					} 
				}
				State = 1505;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			State = 1514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1506;
				Match(COLON);
				State = 1510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1507;
					Match(NL);
					}
					}
					State = 1512;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1513;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 84, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516;
			simpleIdentifier();
			State = 1520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1517;
				Match(NL);
				}
				}
				State = 1522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1523;
			Match(COLON);
			State = 1527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1524;
				Match(NL);
				}
				}
				State = 1529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1530;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(KotlinParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_objectDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 1532;
				modifiers();
				}
			}

			State = 1535;
			Match(OBJECT);
			State = 1539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1536;
				Match(NL);
				}
				}
				State = 1541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1542;
			simpleIdentifier();
			State = 1557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 1546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1543;
					Match(NL);
					}
					}
					State = 1548;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1549;
				Match(COLON);
				State = 1553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1550;
						Match(NL);
						}
						} 
					}
					State = 1555;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
				}
				State = 1556;
				delegationSpecifiers();
				}
				break;
			}
			State = 1566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 1562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1559;
					Match(NL);
					}
					}
					State = 1564;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1565;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondaryConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR() { return GetToken(KotlinParser.CONSTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParametersContext functionValueParameters() {
			return GetRuleContext<FunctionValueParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDelegationCallContext constructorDelegationCall() {
			return GetRuleContext<ConstructorDelegationCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SecondaryConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondaryConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondaryConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondaryConstructorContext secondaryConstructor() {
		SecondaryConstructorContext _localctx = new SecondaryConstructorContext(Context, State);
		EnterRule(_localctx, 88, RULE_secondaryConstructor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_NO_WS || _la==AT_PRE_WS || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 234881023L) != 0)) {
				{
				State = 1568;
				modifiers();
				}
			}

			State = 1571;
			Match(CONSTRUCTOR);
			State = 1575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1572;
				Match(NL);
				}
				}
				State = 1577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1578;
			functionValueParameters();
			State = 1593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				{
				State = 1582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1579;
					Match(NL);
					}
					}
					State = 1584;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1585;
				Match(COLON);
				State = 1589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1586;
					Match(NL);
					}
					}
					State = 1591;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1592;
				constructorDelegationCall();
				}
				break;
			}
			State = 1598;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1595;
					Match(NL);
					}
					} 
				}
				State = 1600;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			}
			State = 1602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURL) {
				{
				State = 1601;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDelegationCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(KotlinParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(KotlinParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ConstructorDelegationCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDelegationCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDelegationCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDelegationCallContext constructorDelegationCall() {
		ConstructorDelegationCallContext _localctx = new ConstructorDelegationCallContext(Context, State);
		EnterRule(_localctx, 90, RULE_constructorDelegationCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			_la = TokenStream.LA(1);
			if ( !(_la==THIS || _la==SUPER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1605;
				Match(NL);
				}
				}
				State = 1610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1611;
			valueArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntriesContext enumEntries() {
			return GetRuleContext<EnumEntriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationsContext classMemberDeclarations() {
			return GetRuleContext<ClassMemberDeclarationsContext>(0);
		}
		public EnumClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumClassBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumClassBodyContext enumClassBody() {
		EnumClassBodyContext _localctx = new EnumClassBodyContext(Context, State);
		EnterRule(_localctx, 92, RULE_enumClassBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1613;
			Match(LCURL);
			State = 1617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1614;
					Match(NL);
					}
					} 
				}
				State = 1619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
			}
			State = 1621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & 13668035483140101L) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 2200096997375L) != 0)) {
				{
				State = 1620;
				enumEntries();
				}
			}

			State = 1637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 1626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1623;
					Match(NL);
					}
					}
					State = 1628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1629;
				Match(SEMICOLON);
				State = 1633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,231,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1630;
						Match(NL);
						}
						} 
					}
					State = 1635;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,231,Context);
				}
				State = 1636;
				classMemberDeclarations();
				}
				break;
			}
			State = 1642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1639;
				Match(NL);
				}
				}
				State = 1644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1645;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumEntriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntryContext[] enumEntry() {
			return GetRuleContexts<EnumEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntryContext enumEntry(int i) {
			return GetRuleContext<EnumEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public EnumEntriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumEntries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntries(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumEntriesContext enumEntries() {
		EnumEntriesContext _localctx = new EnumEntriesContext(Context, State);
		EnterRule(_localctx, 94, RULE_enumEntries);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647;
			enumEntry();
			State = 1664;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1651;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1648;
						Match(NL);
						}
						}
						State = 1653;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1654;
					Match(COMMA);
					State = 1658;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1655;
						Match(NL);
						}
						}
						State = 1660;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1661;
					enumEntry();
					}
					} 
				}
				State = 1666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			}
			State = 1670;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1667;
					Match(NL);
					}
					} 
				}
				State = 1672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			}
			State = 1674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1673;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public EnumEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumEntryContext enumEntry() {
		EnumEntryContext _localctx = new EnumEntryContext(Context, State);
		EnterRule(_localctx, 96, RULE_enumEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				{
				State = 1676;
				modifiers();
				State = 1680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1677;
					Match(NL);
					}
					}
					State = 1682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1685;
			simpleIdentifier();
			State = 1693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 1689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1686;
					Match(NL);
					}
					}
					State = 1691;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1692;
				valueArguments();
				}
				break;
			}
			State = 1702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				{
				State = 1698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1695;
					Match(NL);
					}
					}
					State = 1700;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1701;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTypeContext parenthesizedType() {
			return GetRuleContext<ParenthesizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitelyNonNullableTypeContext definitelyNonNullableType() {
			return GetRuleContext<DefinitelyNonNullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifiersContext typeModifiers() {
			return GetRuleContext<TypeModifiersContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				{
				State = 1704;
				typeModifiers();
				}
				break;
			}
			State = 1712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				{
				State = 1707;
				functionType();
				}
				break;
			case 2:
				{
				State = 1708;
				parenthesizedType();
				}
				break;
			case 3:
				{
				State = 1709;
				nullableType();
				}
				break;
			case 4:
				{
				State = 1710;
				typeReference();
				}
				break;
			case 5:
				{
				State = 1711;
				definitelyNonNullableType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(KotlinParser.DYNAMIC, 0); }
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeReference);
		try {
			State = 1716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1714;
				userType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1715;
				Match(DYNAMIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTypeContext parenthesizedType() {
			return GetRuleContext<ParenthesizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuestContext[] quest() {
			return GetRuleContexts<QuestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuestContext quest(int i) {
			return GetRuleContext<QuestContext>(i);
		}
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_nullableType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 1718;
				typeReference();
				}
				break;
			case LPAREN:
				{
				State = 1719;
				parenthesizedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1722;
				Match(NL);
				}
				}
				State = 1727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1729;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1728;
					quest();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1731;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEST_NO_WS() { return GetToken(KotlinParser.QUEST_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEST_WS() { return GetToken(KotlinParser.QUEST_WS, 0); }
		public QuestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestContext quest() {
		QuestContext _localctx = new QuestContext(Context, State);
		EnterRule(_localctx, 104, RULE_quest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733;
			_la = TokenStream.LA(1);
			if ( !(_la==QUEST_WS || _la==QUEST_NO_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUserTypeContext[] simpleUserType() {
			return GetRuleContexts<SimpleUserTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUserTypeContext simpleUserType(int i) {
			return GetRuleContext<SimpleUserTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(KotlinParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(KotlinParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public UserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserTypeContext userType() {
		UserTypeContext _localctx = new UserTypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_userType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735;
			simpleUserType();
			State = 1752;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1739;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1736;
						Match(NL);
						}
						}
						State = 1741;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1742;
					Match(DOT);
					State = 1746;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1743;
						Match(NL);
						}
						}
						State = 1748;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1749;
					simpleUserType();
					}
					} 
				}
				State = 1754;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleUserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public SimpleUserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleUserType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleUserTypeContext simpleUserType() {
		SimpleUserTypeContext _localctx = new SimpleUserTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_simpleUserType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			simpleIdentifier();
			State = 1763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 1759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1756;
					Match(NL);
					}
					}
					State = 1761;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1762;
				typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeProjectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionModifiersContext typeProjectionModifiers() {
			return GetRuleContext<TypeProjectionModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		public TypeProjectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeProjection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeProjection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeProjectionContext typeProjection() {
		TypeProjectionContext _localctx = new TypeProjectionContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeProjection);
		try {
			State = 1770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case AT_NO_WS:
			case AT_PRE_WS:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case IN:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1766;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
				case 1:
					{
					State = 1765;
					typeProjectionModifiers();
					}
					break;
				}
				State = 1768;
				type();
				}
				break;
			case MULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1769;
				Match(MULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeProjectionModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionModifierContext[] typeProjectionModifier() {
			return GetRuleContexts<TypeProjectionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionModifierContext typeProjectionModifier(int i) {
			return GetRuleContext<TypeProjectionModifierContext>(i);
		}
		public TypeProjectionModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeProjectionModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeProjectionModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeProjectionModifiersContext typeProjectionModifiers() {
		TypeProjectionModifiersContext _localctx = new TypeProjectionModifiersContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeProjectionModifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1773;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1772;
					typeProjectionModifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1775;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,258,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeProjectionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarianceModifierContext varianceModifier() {
			return GetRuleContext<VarianceModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeProjectionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeProjectionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeProjectionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeProjectionModifierContext typeProjectionModifier() {
		TypeProjectionModifierContext _localctx = new TypeProjectionModifierContext(Context, State);
		EnterRule(_localctx, 114, RULE_typeProjectionModifier);
		int _la;
		try {
			State = 1785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
			case OUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1777;
				varianceModifier();
				State = 1781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1778;
					Match(NL);
					}
					}
					State = 1783;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case AT_NO_WS:
			case AT_PRE_WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1784;
				annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParametersContext functionTypeParameters() {
			return GetRuleContext<FunctionTypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(KotlinParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 1787;
				receiverType();
				State = 1791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1788;
					Match(NL);
					}
					}
					State = 1793;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1794;
				Match(DOT);
				State = 1798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1795;
					Match(NL);
					}
					}
					State = 1800;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1803;
			functionTypeParameters();
			State = 1807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1804;
				Match(NL);
				}
				}
				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1810;
			Match(ARROW);
			State = 1814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1811;
				Match(NL);
				}
				}
				State = 1816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1817;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public FunctionTypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParametersContext functionTypeParameters() {
		FunctionTypeParametersContext _localctx = new FunctionTypeParametersContext(Context, State);
		EnterRule(_localctx, 118, RULE_functionTypeParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1819;
			Match(LPAREN);
			State = 1823;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1820;
					Match(NL);
					}
					} 
				}
				State = 1825;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
			}
			State = 1828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				{
				State = 1826;
				parameter();
				}
				break;
			case 2:
				{
				State = 1827;
				type();
				}
				break;
			}
			State = 1849;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1833;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1830;
						Match(NL);
						}
						}
						State = 1835;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1836;
					Match(COMMA);
					State = 1840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1837;
						Match(NL);
						}
						}
						State = 1842;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1845;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
					case 1:
						{
						State = 1843;
						parameter();
						}
						break;
					case 2:
						{
						State = 1844;
						type();
						}
						break;
					}
					}
					} 
				}
				State = 1851;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
			}
			State = 1859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 1855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1852;
					Match(NL);
					}
					}
					State = 1857;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1858;
				Match(COMMA);
				}
				break;
			}
			State = 1864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1861;
				Match(NL);
				}
				}
				State = 1866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1867;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ParenthesizedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedTypeContext parenthesizedType() {
		ParenthesizedTypeContext _localctx = new ParenthesizedTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_parenthesizedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1869;
			Match(LPAREN);
			State = 1873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1870;
				Match(NL);
				}
				}
				State = 1875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1876;
			type();
			State = 1880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1877;
				Match(NL);
				}
				}
				State = 1882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1883;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTypeContext parenthesizedType() {
			return GetRuleContext<ParenthesizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifiersContext typeModifiers() {
			return GetRuleContext<TypeModifiersContext>(0);
		}
		public ReceiverTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverTypeContext receiverType() {
		ReceiverTypeContext _localctx = new ReceiverTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_receiverType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 1885;
				typeModifiers();
				}
				break;
			}
			State = 1891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 1888;
				parenthesizedType();
				}
				break;
			case 2:
				{
				State = 1889;
				nullableType();
				}
				break;
			case 3:
				{
				State = 1890;
				typeReference();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedUserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedUserTypeContext parenthesizedUserType() {
			return GetRuleContext<ParenthesizedUserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ParenthesizedUserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedUserType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedUserTypeContext parenthesizedUserType() {
		ParenthesizedUserTypeContext _localctx = new ParenthesizedUserTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_parenthesizedUserType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893;
			Match(LPAREN);
			State = 1897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1894;
				Match(NL);
				}
				}
				State = 1899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 1900;
				userType();
				}
				break;
			case LPAREN:
				{
				State = 1901;
				parenthesizedUserType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1904;
				Match(NL);
				}
				}
				State = 1909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1910;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitelyNonNullableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(KotlinParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext[] userType() {
			return GetRuleContexts<UserTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType(int i) {
			return GetRuleContext<UserTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedUserTypeContext[] parenthesizedUserType() {
			return GetRuleContexts<ParenthesizedUserTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedUserTypeContext parenthesizedUserType(int i) {
			return GetRuleContext<ParenthesizedUserTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifiersContext[] typeModifiers() {
			return GetRuleContexts<TypeModifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifiersContext typeModifiers(int i) {
			return GetRuleContext<TypeModifiersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public DefinitelyNonNullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitelyNonNullableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitelyNonNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitelyNonNullableTypeContext definitelyNonNullableType() {
		DefinitelyNonNullableTypeContext _localctx = new DefinitelyNonNullableTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_definitelyNonNullableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 1912;
				typeModifiers();
				}
				break;
			}
			State = 1917;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 1915;
				userType();
				}
				break;
			case LPAREN:
				{
				State = 1916;
				parenthesizedUserType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1919;
				Match(NL);
				}
				}
				State = 1924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1925;
			Match(AMP);
			State = 1929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1926;
				Match(NL);
				}
				}
				State = 1931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				{
				State = 1932;
				typeModifiers();
				}
				break;
			}
			State = 1937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 1935;
				userType();
				}
				break;
			case LPAREN:
				{
				State = 1936;
				parenthesizedUserType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemisContext[] semis() {
			return GetRuleContexts<SemisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemisContext semis(int i) {
			return GetRuleContext<SemisContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 128, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				{
				State = 1939;
				statement();
				State = 1945;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,288,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1940;
						semis();
						State = 1941;
						statement();
						}
						} 
					}
					State = 1947;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,288,Context);
				}
				}
				break;
			}
			State = 1951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				{
				State = 1950;
				semis();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1957;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1955;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILE:
					case FIELD:
					case PROPERTY:
					case GET:
					case SET:
					case RECEIVER:
					case PARAM:
					case SETPARAM:
					case DELEGATE:
					case IMPORT:
					case CONSTRUCTOR:
					case BY:
					case COMPANION:
					case INIT:
					case WHERE:
					case CATCH:
					case FINALLY:
					case OUT:
					case DYNAMIC:
					case PUBLIC:
					case PRIVATE:
					case PROTECTED:
					case INTERNAL:
					case ENUM:
					case SEALED:
					case ANNOTATION:
					case DATA:
					case INNER:
					case VALUE:
					case TAILREC:
					case OPERATOR:
					case INLINE:
					case INFIX:
					case EXTERNAL:
					case SUSPEND:
					case OVERRIDE:
					case ABSTRACT:
					case FINAL:
					case OPEN:
					case CONST:
					case LATEINIT:
					case VARARG:
					case NOINLINE:
					case CROSSINLINE:
					case REIFIED:
					case EXPECT:
					case ACTUAL:
					case Identifier:
						{
						State = 1953;
						label();
						}
						break;
					case AT_NO_WS:
					case AT_PRE_WS:
						{
						State = 1954;
						annotation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
			}
			State = 1964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				{
				State = 1960;
				declaration();
				}
				break;
			case 2:
				{
				State = 1961;
				assignment();
				}
				break;
			case 3:
				{
				State = 1962;
				loopStatement();
				}
				break;
			case 4:
				{
				State = 1963;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_NO_WS() { return GetToken(KotlinParser.AT_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_POST_WS() { return GetToken(KotlinParser.AT_POST_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 132, RULE_label);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966;
			simpleIdentifier();
			State = 1967;
			_la = TokenStream.LA(1);
			if ( !(_la==AT_NO_WS || _la==AT_POST_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1971;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1968;
					Match(NL);
					}
					} 
				}
				State = 1973;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructureBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ControlStructureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructureBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlStructureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureBodyContext controlStructureBody() {
		ControlStructureBodyContext _localctx = new ControlStructureBodyContext(Context, State);
		EnterRule(_localctx, 134, RULE_controlStructureBody);
		try {
			State = 1976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1974;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1975;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 136, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978;
			Match(LCURL);
			State = 1982;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1979;
					Match(NL);
					}
					} 
				}
				State = 1984;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			}
			State = 1985;
			statements();
			State = 1989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1986;
				Match(NL);
				}
				}
				State = 1991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1992;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_loopStatement);
		try {
			State = 1997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1994;
				forStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1995;
				whileStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1996;
				doWhileStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(KotlinParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(KotlinParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiVariableDeclarationContext multiVariableDeclaration() {
			return GetRuleContext<MultiVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_forStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999;
			Match(FOR);
			State = 2003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2000;
				Match(NL);
				}
				}
				State = 2005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2006;
			Match(LPAREN);
			State = 2010;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2007;
					annotation();
					}
					} 
				}
				State = 2012;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			}
			State = 2015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case AT_NO_WS:
			case AT_PRE_WS:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 2013;
				variableDeclaration();
				}
				break;
			case LPAREN:
				{
				State = 2014;
				multiVariableDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2017;
			Match(IN);
			State = 2018;
			expression();
			State = 2019;
			Match(RPAREN);
			State = 2023;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2020;
					Match(NL);
					}
					} 
				}
				State = 2025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			}
			State = 2027;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 2026;
				controlStructureBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(KotlinParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2029;
			Match(WHILE);
			State = 2033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2030;
				Match(NL);
				}
				}
				State = 2035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2036;
			Match(LPAREN);
			State = 2037;
			expression();
			State = 2038;
			Match(RPAREN);
			State = 2042;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,305,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2039;
					Match(NL);
					}
					} 
				}
				State = 2044;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,305,Context);
			}
			State = 2047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case LPAREN:
			case LSQUARE:
			case LCURL:
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL_WS:
			case EXCL_NO_WS:
			case COLONCOLON:
			case AT_NO_WS:
			case AT_PRE_WS:
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case THIS_AT:
			case SUPER_AT:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CLASS:
			case INTERFACE:
			case FUN:
			case OBJECT:
			case VAL:
			case VAR:
			case TYPE_ALIAS:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case THIS:
			case SUPER:
			case WHERE:
			case IF:
			case WHEN:
			case TRY:
			case CATCH:
			case FINALLY:
			case FOR:
			case DO:
			case WHILE:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case RealLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case UnsignedLiteral:
			case LongLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case CharacterLiteral:
			case Identifier:
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
				{
				State = 2045;
				controlStructureBody();
				}
				break;
			case SEMICOLON:
				{
				State = 2046;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(KotlinParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(KotlinParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_doWhileStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049;
			Match(DO);
			State = 2053;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2050;
					Match(NL);
					}
					} 
				}
				State = 2055;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			}
			State = 2057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
			case 1:
				{
				State = 2056;
				controlStructureBody();
				}
				break;
			}
			State = 2062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2059;
				Match(NL);
				}
				}
				State = 2064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2065;
			Match(WHILE);
			State = 2069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2066;
				Match(NL);
				}
				}
				State = 2071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2072;
			Match(LPAREN);
			State = 2073;
			expression();
			State = 2074;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyAssignableExpressionContext directlyAssignableExpression() {
			return GetRuleContext<DirectlyAssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentAndOperatorContext assignmentAndOperator() {
			return GetRuleContext<AssignmentAndOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 146, RULE_assignment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				{
				State = 2076;
				directlyAssignableExpression();
				State = 2077;
				Match(ASSIGNMENT);
				}
				break;
			case 2:
				{
				State = 2079;
				assignableExpression();
				State = 2080;
				assignmentAndOperator();
				}
				break;
			}
			State = 2087;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2084;
					Match(NL);
					}
					} 
				}
				State = 2089;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
			}
			State = 2090;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public SemiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiContext semi() {
		SemiContext _localctx = new SemiContext(Context, State);
		EnterRule(_localctx, 148, RULE_semi);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2092;
			_la = TokenStream.LA(1);
			if ( !(_la==NL || _la==SEMICOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2096;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,313,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2093;
					Match(NL);
					}
					} 
				}
				State = 2098;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,313,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(KotlinParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(KotlinParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public SemisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemisContext semis() {
		SemisContext _localctx = new SemisContext(Context, State);
		EnterRule(_localctx, 150, RULE_semis);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2100;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2099;
					_la = TokenStream.LA(1);
					if ( !(_la==NL || _la==SEMICOLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2104;
			disjunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext[] conjunction() {
			return GetRuleContexts<ConjunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction(int i) {
			return GetRuleContext<ConjunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISJ() { return GetTokens(KotlinParser.DISJ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISJ(int i) {
			return GetToken(KotlinParser.DISJ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 154, RULE_disjunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106;
			conjunction();
			State = 2123;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2107;
						Match(NL);
						}
						}
						State = 2112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2113;
					Match(DISJ);
					State = 2117;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2114;
							Match(NL);
							}
							} 
						}
						State = 2119;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
					}
					State = 2120;
					conjunction();
					}
					} 
				}
				State = 2125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONJ() { return GetTokens(KotlinParser.CONJ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONJ(int i) {
			return GetToken(KotlinParser.CONJ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 156, RULE_conjunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2126;
			equality();
			State = 2143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2127;
						Match(NL);
						}
						}
						State = 2132;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2133;
					Match(CONJ);
					State = 2137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2134;
							Match(NL);
							}
							} 
						}
						State = 2139;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
					}
					State = 2140;
					equality();
					}
					} 
				}
				State = 2145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperatorContext[] equalityOperator() {
			return GetRuleContexts<EqualityOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperatorContext equalityOperator(int i) {
			return GetRuleContext<EqualityOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 158, RULE_equality);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2146;
			comparison();
			State = 2158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2147;
					equalityOperator();
					State = 2151;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2148;
							Match(NL);
							}
							} 
						}
						State = 2153;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
					}
					State = 2154;
					comparison();
					}
					} 
				}
				State = 2160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericCallLikeComparisonContext[] genericCallLikeComparison() {
			return GetRuleContexts<GenericCallLikeComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericCallLikeComparisonContext genericCallLikeComparison(int i) {
			return GetRuleContext<GenericCallLikeComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext[] comparisonOperator() {
			return GetRuleContexts<ComparisonOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator(int i) {
			return GetRuleContext<ComparisonOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 160, RULE_comparison);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2161;
			genericCallLikeComparison();
			State = 2173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,324,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2162;
					comparisonOperator();
					State = 2166;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,323,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2163;
							Match(NL);
							}
							} 
						}
						State = 2168;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,323,Context);
					}
					State = 2169;
					genericCallLikeComparison();
					}
					} 
				}
				State = 2175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,324,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericCallLikeComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfixOperationContext infixOperation() {
			return GetRuleContext<InfixOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext[] callSuffix() {
			return GetRuleContexts<CallSuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext callSuffix(int i) {
			return GetRuleContext<CallSuffixContext>(i);
		}
		public GenericCallLikeComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericCallLikeComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericCallLikeComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericCallLikeComparisonContext genericCallLikeComparison() {
		GenericCallLikeComparisonContext _localctx = new GenericCallLikeComparisonContext(Context, State);
		EnterRule(_localctx, 162, RULE_genericCallLikeComparison);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2176;
			infixOperation();
			State = 2180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2177;
					callSuffix();
					}
					} 
				}
				State = 2182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfixOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElvisExpressionContext[] elvisExpression() {
			return GetRuleContexts<ElvisExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElvisExpressionContext elvisExpression(int i) {
			return GetRuleContext<ElvisExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOperatorContext[] inOperator() {
			return GetRuleContexts<InOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOperatorContext inOperator(int i) {
			return GetRuleContext<InOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsOperatorContext[] isOperator() {
			return GetRuleContexts<IsOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsOperatorContext isOperator(int i) {
			return GetRuleContext<IsOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public InfixOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infixOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfixOperationContext infixOperation() {
		InfixOperationContext _localctx = new InfixOperationContext(Context, State);
		EnterRule(_localctx, 164, RULE_infixOperation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2183;
			elvisExpression();
			State = 2204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2202;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IN:
					case NOT_IN:
						{
						State = 2184;
						inOperator();
						State = 2188;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 2185;
								Match(NL);
								}
								} 
							}
							State = 2190;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
						}
						State = 2191;
						elvisExpression();
						}
						break;
					case IS:
					case NOT_IS:
						{
						State = 2193;
						isOperator();
						State = 2197;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 2194;
							Match(NL);
							}
							}
							State = 2199;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 2200;
						type();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElvisExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfixFunctionCallContext[] infixFunctionCall() {
			return GetRuleContexts<InfixFunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InfixFunctionCallContext infixFunctionCall(int i) {
			return GetRuleContext<InfixFunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElvisContext[] elvis() {
			return GetRuleContexts<ElvisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElvisContext elvis(int i) {
			return GetRuleContext<ElvisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ElvisExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elvisExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElvisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElvisExpressionContext elvisExpression() {
		ElvisExpressionContext _localctx = new ElvisExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_elvisExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2207;
			infixFunctionCall();
			State = 2225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2208;
						Match(NL);
						}
						}
						State = 2213;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2214;
					elvis();
					State = 2218;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,331,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2215;
							Match(NL);
							}
							} 
						}
						State = 2220;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,331,Context);
					}
					State = 2221;
					infixFunctionCall();
					}
					} 
				}
				State = 2227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElvisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEST_NO_WS() { return GetToken(KotlinParser.QUEST_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		public ElvisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elvis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElvis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElvisContext elvis() {
		ElvisContext _localctx = new ElvisContext(Context, State);
		EnterRule(_localctx, 168, RULE_elvis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228;
			Match(QUEST_NO_WS);
			State = 2229;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfixFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeExpressionContext[] rangeExpression() {
			return GetRuleContexts<RangeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeExpressionContext rangeExpression(int i) {
			return GetRuleContext<RangeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public InfixFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infixFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfixFunctionCallContext infixFunctionCall() {
		InfixFunctionCallContext _localctx = new InfixFunctionCallContext(Context, State);
		EnterRule(_localctx, 170, RULE_infixFunctionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231;
			rangeExpression();
			State = 2243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,334,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2232;
					simpleIdentifier();
					State = 2236;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2233;
							Match(NL);
							}
							} 
						}
						State = 2238;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
					}
					State = 2239;
					rangeExpression();
					}
					} 
				}
				State = 2245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,334,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RANGE() { return GetTokens(KotlinParser.RANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE(int i) {
			return GetToken(KotlinParser.RANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RANGE_UNTIL() { return GetTokens(KotlinParser.RANGE_UNTIL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_UNTIL(int i) {
			return GetToken(KotlinParser.RANGE_UNTIL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public RangeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeExpressionContext rangeExpression() {
		RangeExpressionContext _localctx = new RangeExpressionContext(Context, State);
		EnterRule(_localctx, 172, RULE_rangeExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246;
			additiveExpression();
			State = 2257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2247;
					_la = TokenStream.LA(1);
					if ( !(_la==RANGE || _la==RANGE_UNTIL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2251;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2248;
							Match(NL);
							}
							} 
						}
						State = 2253;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
					}
					State = 2254;
					additiveExpression();
					}
					} 
				}
				State = 2259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOperatorContext[] additiveOperator() {
			return GetRuleContexts<AdditiveOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOperatorContext additiveOperator(int i) {
			return GetRuleContext<AdditiveOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 174, RULE_additiveExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2260;
			multiplicativeExpression();
			State = 2272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2261;
					additiveOperator();
					State = 2265;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2262;
							Match(NL);
							}
							} 
						}
						State = 2267;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
					}
					State = 2268;
					multiplicativeExpression();
					}
					} 
				}
				State = 2274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsExpressionContext[] asExpression() {
			return GetRuleContexts<AsExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsExpressionContext asExpression(int i) {
			return GetRuleContext<AsExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOperatorContext[] multiplicativeOperator() {
			return GetRuleContexts<MultiplicativeOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOperatorContext multiplicativeOperator(int i) {
			return GetRuleContext<MultiplicativeOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 176, RULE_multiplicativeExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275;
			asExpression();
			State = 2287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2276;
					multiplicativeOperator();
					State = 2280;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,339,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2277;
							Match(NL);
							}
							} 
						}
						State = 2282;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,339,Context);
					}
					State = 2283;
					asExpression();
					}
					} 
				}
				State = 2289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixUnaryExpressionContext prefixUnaryExpression() {
			return GetRuleContext<PrefixUnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsOperatorContext[] asOperator() {
			return GetRuleContexts<AsOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsOperatorContext asOperator(int i) {
			return GetRuleContext<AsOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsExpressionContext asExpression() {
		AsExpressionContext _localctx = new AsExpressionContext(Context, State);
		EnterRule(_localctx, 178, RULE_asExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290;
			prefixUnaryExpression();
			State = 2308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2291;
						Match(NL);
						}
						}
						State = 2296;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2297;
					asOperator();
					State = 2301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2298;
						Match(NL);
						}
						}
						State = 2303;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2304;
					type();
					}
					} 
				}
				State = 2310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixUnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnaryExpressionContext postfixUnaryExpression() {
			return GetRuleContext<PostfixUnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryPrefixContext[] unaryPrefix() {
			return GetRuleContexts<UnaryPrefixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryPrefixContext unaryPrefix(int i) {
			return GetRuleContext<UnaryPrefixContext>(i);
		}
		public PrefixUnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixUnaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixUnaryExpressionContext prefixUnaryExpression() {
		PrefixUnaryExpressionContext _localctx = new PrefixUnaryExpressionContext(Context, State);
		EnterRule(_localctx, 180, RULE_prefixUnaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,344,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2311;
					unaryPrefix();
					}
					} 
				}
				State = 2316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,344,Context);
			}
			State = 2317;
			postfixUnaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixUnaryOperatorContext prefixUnaryOperator() {
			return GetRuleContext<PrefixUnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public UnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryPrefixContext unaryPrefix() {
		UnaryPrefixContext _localctx = new UnaryPrefixContext(Context, State);
		EnterRule(_localctx, 182, RULE_unaryPrefix);
		try {
			int _alt;
			State = 2328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_NO_WS:
			case AT_PRE_WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2319;
				annotation();
				}
				break;
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2320;
				label();
				}
				break;
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL_WS:
			case EXCL_NO_WS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2321;
				prefixUnaryOperator();
				State = 2325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,345,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2322;
						Match(NL);
						}
						} 
					}
					State = 2327;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,345,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixUnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnarySuffixContext[] postfixUnarySuffix() {
			return GetRuleContexts<PostfixUnarySuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnarySuffixContext postfixUnarySuffix(int i) {
			return GetRuleContext<PostfixUnarySuffixContext>(i);
		}
		public PostfixUnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixUnaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixUnaryExpressionContext postfixUnaryExpression() {
		PostfixUnaryExpressionContext _localctx = new PostfixUnaryExpressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_postfixUnaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2330;
			primaryExpression();
			State = 2334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2331;
					postfixUnarySuffix();
					}
					} 
				}
				State = 2336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixUnarySuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnaryOperatorContext postfixUnaryOperator() {
			return GetRuleContext<PostfixUnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext callSuffix() {
			return GetRuleContext<CallSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexingSuffixContext indexingSuffix() {
			return GetRuleContext<IndexingSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NavigationSuffixContext navigationSuffix() {
			return GetRuleContext<NavigationSuffixContext>(0);
		}
		public PostfixUnarySuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixUnarySuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnarySuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixUnarySuffixContext postfixUnarySuffix() {
		PostfixUnarySuffixContext _localctx = new PostfixUnarySuffixContext(Context, State);
		EnterRule(_localctx, 186, RULE_postfixUnarySuffix);
		try {
			State = 2342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2337;
				postfixUnaryOperator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2338;
				typeArguments();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2339;
				callSuffix();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2340;
				indexingSuffix();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2341;
				navigationSuffix();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectlyAssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnaryExpressionContext postfixUnaryExpression() {
			return GetRuleContext<PostfixUnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableSuffixContext assignableSuffix() {
			return GetRuleContext<AssignableSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedDirectlyAssignableExpressionContext parenthesizedDirectlyAssignableExpression() {
			return GetRuleContext<ParenthesizedDirectlyAssignableExpressionContext>(0);
		}
		public DirectlyAssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directlyAssignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectlyAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectlyAssignableExpressionContext directlyAssignableExpression() {
		DirectlyAssignableExpressionContext _localctx = new DirectlyAssignableExpressionContext(Context, State);
		EnterRule(_localctx, 188, RULE_directlyAssignableExpression);
		try {
			State = 2349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2344;
				postfixUnaryExpression();
				State = 2345;
				assignableSuffix();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2347;
				simpleIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2348;
				parenthesizedDirectlyAssignableExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedDirectlyAssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyAssignableExpressionContext directlyAssignableExpression() {
			return GetRuleContext<DirectlyAssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ParenthesizedDirectlyAssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedDirectlyAssignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedDirectlyAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedDirectlyAssignableExpressionContext parenthesizedDirectlyAssignableExpression() {
		ParenthesizedDirectlyAssignableExpressionContext _localctx = new ParenthesizedDirectlyAssignableExpressionContext(Context, State);
		EnterRule(_localctx, 190, RULE_parenthesizedDirectlyAssignableExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2351;
			Match(LPAREN);
			State = 2355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2352;
					Match(NL);
					}
					} 
				}
				State = 2357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			}
			State = 2358;
			directlyAssignableExpression();
			State = 2362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2359;
				Match(NL);
				}
				}
				State = 2364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2365;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixUnaryExpressionContext prefixUnaryExpression() {
			return GetRuleContext<PrefixUnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedAssignableExpressionContext parenthesizedAssignableExpression() {
			return GetRuleContext<ParenthesizedAssignableExpressionContext>(0);
		}
		public AssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableExpressionContext assignableExpression() {
		AssignableExpressionContext _localctx = new AssignableExpressionContext(Context, State);
		EnterRule(_localctx, 192, RULE_assignableExpression);
		try {
			State = 2369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2367;
				prefixUnaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2368;
				parenthesizedAssignableExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedAssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ParenthesizedAssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedAssignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedAssignableExpressionContext parenthesizedAssignableExpression() {
		ParenthesizedAssignableExpressionContext _localctx = new ParenthesizedAssignableExpressionContext(Context, State);
		EnterRule(_localctx, 194, RULE_parenthesizedAssignableExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2371;
			Match(LPAREN);
			State = 2375;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2372;
					Match(NL);
					}
					} 
				}
				State = 2377;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
			}
			State = 2378;
			assignableExpression();
			State = 2382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2379;
				Match(NL);
				}
				}
				State = 2384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2385;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexingSuffixContext indexingSuffix() {
			return GetRuleContext<IndexingSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NavigationSuffixContext navigationSuffix() {
			return GetRuleContext<NavigationSuffixContext>(0);
		}
		public AssignableSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableSuffixContext assignableSuffix() {
		AssignableSuffixContext _localctx = new AssignableSuffixContext(Context, State);
		EnterRule(_localctx, 196, RULE_assignableSuffix);
		try {
			State = 2390;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LANGLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2387;
				typeArguments();
				}
				break;
			case LSQUARE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2388;
				indexingSuffix();
				}
				break;
			case NL:
			case DOT:
			case COLONCOLON:
			case QUEST_NO_WS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2389;
				navigationSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexingSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(KotlinParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(KotlinParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public IndexingSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexingSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexingSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexingSuffixContext indexingSuffix() {
		IndexingSuffixContext _localctx = new IndexingSuffixContext(Context, State);
		EnterRule(_localctx, 198, RULE_indexingSuffix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2392;
			Match(LSQUARE);
			State = 2396;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,356,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2393;
					Match(NL);
					}
					} 
				}
				State = 2398;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,356,Context);
			}
			State = 2399;
			expression();
			State = 2416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,359,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2400;
						Match(NL);
						}
						}
						State = 2405;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2406;
					Match(COMMA);
					State = 2410;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,358,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2407;
							Match(NL);
							}
							} 
						}
						State = 2412;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,358,Context);
					}
					State = 2413;
					expression();
					}
					} 
				}
				State = 2418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,359,Context);
			}
			State = 2426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				{
				State = 2422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2419;
					Match(NL);
					}
					}
					State = 2424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2425;
				Match(COMMA);
				}
				break;
			}
			State = 2431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2428;
				Match(NL);
				}
				}
				State = 2433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2434;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NavigationSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessOperatorContext memberAccessOperator() {
			return GetRuleContext<MemberAccessOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(KotlinParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public NavigationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_navigationSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNavigationSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NavigationSuffixContext navigationSuffix() {
		NavigationSuffixContext _localctx = new NavigationSuffixContext(Context, State);
		EnterRule(_localctx, 200, RULE_navigationSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436;
			memberAccessOperator();
			State = 2440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2437;
				Match(NL);
				}
				}
				State = 2442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 2443;
				simpleIdentifier();
				}
				break;
			case LPAREN:
				{
				State = 2444;
				parenthesizedExpression();
				}
				break;
			case CLASS:
				{
				State = 2445;
				Match(CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotatedLambdaContext annotatedLambda() {
			return GetRuleContext<AnnotatedLambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public CallSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallSuffixContext callSuffix() {
		CallSuffixContext _localctx = new CallSuffixContext(Context, State);
		EnterRule(_localctx, 202, RULE_callSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LANGLE) {
				{
				State = 2448;
				typeArguments();
				}
			}

			State = 2456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
			case 1:
				{
				State = 2452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2451;
					valueArguments();
					}
				}

				State = 2454;
				annotatedLambda();
				}
				break;
			case 2:
				{
				State = 2455;
				valueArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedLambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaLiteralContext lambdaLiteral() {
			return GetRuleContext<LambdaLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnnotatedLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedLambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedLambdaContext annotatedLambda() {
		AnnotatedLambdaContext _localctx = new AnnotatedLambdaContext(Context, State);
		EnterRule(_localctx, 204, RULE_annotatedLambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT_NO_WS || _la==AT_PRE_WS) {
				{
				{
				State = 2458;
				annotation();
				}
				}
				State = 2463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & -17588927330817L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 2098175L) != 0)) {
				{
				State = 2464;
				label();
				}
			}

			State = 2470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2467;
				Match(NL);
				}
				}
				State = 2472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2473;
			lambdaLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionContext[] typeProjection() {
			return GetRuleContexts<TypeProjectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionContext typeProjection(int i) {
			return GetRuleContext<TypeProjectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 206, RULE_typeArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475;
			Match(LANGLE);
			State = 2479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2476;
				Match(NL);
				}
				}
				State = 2481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2482;
			typeProjection();
			State = 2499;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2486;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2483;
						Match(NL);
						}
						}
						State = 2488;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2489;
					Match(COMMA);
					State = 2493;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2490;
						Match(NL);
						}
						}
						State = 2495;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2496;
					typeProjection();
					}
					} 
				}
				State = 2501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			}
			State = 2509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				{
				State = 2505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2502;
					Match(NL);
					}
					}
					State = 2507;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2508;
				Match(COMMA);
				}
				break;
			}
			State = 2514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2511;
				Match(NL);
				}
				}
				State = 2516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2517;
			Match(RANGLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentContext[] valueArgument() {
			return GetRuleContexts<ValueArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentContext valueArgument(int i) {
			return GetRuleContext<ValueArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public ValueArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueArgumentsContext valueArguments() {
		ValueArgumentsContext _localctx = new ValueArgumentsContext(Context, State);
		EnterRule(_localctx, 208, RULE_valueArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519;
			Match(LPAREN);
			State = 2523;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,378,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2520;
					Match(NL);
					}
					} 
				}
				State = 2525;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,378,Context);
			}
			State = 2561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -288219106103219680L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -8536323116289L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 27259903L) != 0)) {
				{
				State = 2526;
				valueArgument();
				State = 2543;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,381,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2530;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 2527;
							Match(NL);
							}
							}
							State = 2532;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 2533;
						Match(COMMA);
						State = 2537;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,380,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 2534;
								Match(NL);
								}
								} 
							}
							State = 2539;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,380,Context);
						}
						State = 2540;
						valueArgument();
						}
						} 
					}
					State = 2545;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,381,Context);
				}
				State = 2553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,383,Context) ) {
				case 1:
					{
					State = 2549;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2546;
						Match(NL);
						}
						}
						State = 2551;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2552;
					Match(COMMA);
					}
					break;
				}
				State = 2558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2555;
					Match(NL);
					}
					}
					State = 2560;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2563;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		public ValueArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueArgumentContext valueArgument() {
		ValueArgumentContext _localctx = new ValueArgumentContext(Context, State);
		EnterRule(_localctx, 210, RULE_valueArgument);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				{
				State = 2565;
				annotation();
				}
				break;
			}
			State = 2571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,387,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2568;
					Match(NL);
					}
					} 
				}
				State = 2573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,387,Context);
			}
			State = 2588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				{
				State = 2574;
				simpleIdentifier();
				State = 2578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2575;
					Match(NL);
					}
					}
					State = 2580;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2581;
				Match(ASSIGNMENT);
				State = 2585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,389,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2582;
						Match(NL);
						}
						} 
					}
					State = 2587;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,389,Context);
				}
				}
				break;
			}
			State = 2591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MULT) {
				{
				State = 2590;
				Match(MULT);
				}
			}

			State = 2596;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2593;
					Match(NL);
					}
					} 
				}
				State = 2598;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
			}
			State = 2599;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralConstantContext literalConstant() {
			return GetRuleContext<LiteralConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallableReferenceContext callableReference() {
			return GetRuleContext<CallableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionLiteralContext functionLiteral() {
			return GetRuleContext<FunctionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionLiteralContext collectionLiteral() {
			return GetRuleContext<CollectionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThisExpressionContext thisExpression() {
			return GetRuleContext<ThisExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperExpressionContext superExpression() {
			return GetRuleContext<SuperExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression() {
			return GetRuleContext<WhenExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryExpressionContext tryExpression() {
			return GetRuleContext<TryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpExpressionContext jumpExpression() {
			return GetRuleContext<JumpExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 212, RULE_primaryExpression);
		try {
			State = 2615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2601;
				parenthesizedExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2602;
				simpleIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2603;
				literalConstant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2604;
				stringLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2605;
				callableReference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2606;
				functionLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2607;
				objectLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2608;
				collectionLiteral();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2609;
				thisExpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2610;
				superExpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2611;
				ifExpression();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2612;
				whenExpression();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2613;
				tryExpression();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2614;
				jumpExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 214, RULE_parenthesizedExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2617;
			Match(LPAREN);
			State = 2621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,394,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2618;
					Match(NL);
					}
					} 
				}
				State = 2623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,394,Context);
			}
			State = 2624;
			expression();
			State = 2628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2625;
				Match(NL);
				}
				}
				State = 2630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2631;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(KotlinParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(KotlinParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public CollectionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionLiteralContext collectionLiteral() {
		CollectionLiteralContext _localctx = new CollectionLiteralContext(Context, State);
		EnterRule(_localctx, 216, RULE_collectionLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2633;
			Match(LSQUARE);
			State = 2637;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,396,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2634;
					Match(NL);
					}
					} 
				}
				State = 2639;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,396,Context);
			}
			State = 2675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -288219106103252448L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -8536323116289L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 27259903L) != 0)) {
				{
				State = 2640;
				expression();
				State = 2657;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,399,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2644;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 2641;
							Match(NL);
							}
							}
							State = 2646;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 2647;
						Match(COMMA);
						State = 2651;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,398,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 2648;
								Match(NL);
								}
								} 
							}
							State = 2653;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,398,Context);
						}
						State = 2654;
						expression();
						}
						} 
					}
					State = 2659;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,399,Context);
				}
				State = 2667;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,401,Context) ) {
				case 1:
					{
					State = 2663;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2660;
						Match(NL);
						}
						}
						State = 2665;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2666;
					Match(COMMA);
					}
					break;
				}
				State = 2672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2669;
					Match(NL);
					}
					}
					State = 2674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2677;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(KotlinParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(KotlinParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(KotlinParser.HexLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinLiteral() { return GetToken(KotlinParser.BinLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(KotlinParser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RealLiteral() { return GetToken(KotlinParser.RealLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(KotlinParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongLiteral() { return GetToken(KotlinParser.LongLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedLiteral() { return GetToken(KotlinParser.UnsignedLiteral, 0); }
		public LiteralConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralConstantContext literalConstant() {
		LiteralConstantContext _localctx = new LiteralConstantContext(Context, State);
		EnterRule(_localctx, 218, RULE_literalConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2679;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 2041L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineStringLiteralContext lineStringLiteral() {
			return GetRuleContext<LineStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringLiteralContext multiLineStringLiteral() {
			return GetRuleContext<MultiLineStringLiteralContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 220, RULE_stringLiteral);
		try {
			State = 2683;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTE_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2681;
				lineStringLiteral();
				}
				break;
			case TRIPLE_QUOTE_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2682;
				multiLineStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_OPEN() { return GetToken(KotlinParser.QUOTE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_CLOSE() { return GetToken(KotlinParser.QUOTE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineStringContentContext[] lineStringContent() {
			return GetRuleContexts<LineStringContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringContentContext lineStringContent(int i) {
			return GetRuleContext<LineStringContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringExpressionContext[] lineStringExpression() {
			return GetRuleContexts<LineStringExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringExpressionContext lineStringExpression(int i) {
			return GetRuleContext<LineStringExpressionContext>(i);
		}
		public LineStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineStringLiteralContext lineStringLiteral() {
		LineStringLiteralContext _localctx = new LineStringLiteralContext(Context, State);
		EnterRule(_localctx, 222, RULE_lineStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2685;
			Match(QUOTE_OPEN);
			State = 2690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 15L) != 0)) {
				{
				State = 2688;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LineStrRef:
				case LineStrText:
				case LineStrEscapedChar:
					{
					State = 2686;
					lineStringContent();
					}
					break;
				case LineStrExprStart:
					{
					State = 2687;
					lineStringExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2693;
			Match(QUOTE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_QUOTE_OPEN() { return GetToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_QUOTE_CLOSE() { return GetToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringContentContext[] multiLineStringContent() {
			return GetRuleContexts<MultiLineStringContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringContentContext multiLineStringContent(int i) {
			return GetRuleContext<MultiLineStringContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringExpressionContext[] multiLineStringExpression() {
			return GetRuleContexts<MultiLineStringExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringExpressionContext multiLineStringExpression(int i) {
			return GetRuleContext<MultiLineStringExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MultiLineStringQuote() { return GetTokens(KotlinParser.MultiLineStringQuote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStringQuote(int i) {
			return GetToken(KotlinParser.MultiLineStringQuote, i);
		}
		public MultiLineStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringLiteralContext multiLineStringLiteral() {
		MultiLineStringLiteralContext _localctx = new MultiLineStringLiteralContext(Context, State);
		EnterRule(_localctx, 224, RULE_multiLineStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2695;
			Match(TRIPLE_QUOTE_OPEN);
			State = 2701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 15L) != 0)) {
				{
				State = 2699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
				case 1:
					{
					State = 2696;
					multiLineStringContent();
					}
					break;
				case 2:
					{
					State = 2697;
					multiLineStringExpression();
					}
					break;
				case 3:
					{
					State = 2698;
					Match(MultiLineStringQuote);
					}
					break;
				}
				}
				State = 2703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2704;
			Match(TRIPLE_QUOTE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineStringContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrText() { return GetToken(KotlinParser.LineStrText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrEscapedChar() { return GetToken(KotlinParser.LineStrEscapedChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrRef() { return GetToken(KotlinParser.LineStrRef, 0); }
		public LineStringContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineStringContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStringContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineStringContentContext lineStringContent() {
		LineStringContentContext _localctx = new LineStringContentContext(Context, State);
		EnterRule(_localctx, 226, RULE_lineStringContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2706;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineStringExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrExprStart() { return GetToken(KotlinParser.LineStrExprStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public LineStringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineStringExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineStringExpressionContext lineStringExpression() {
		LineStringExpressionContext _localctx = new LineStringExpressionContext(Context, State);
		EnterRule(_localctx, 228, RULE_lineStringExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2708;
			Match(LineStrExprStart);
			State = 2712;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,409,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2709;
					Match(NL);
					}
					} 
				}
				State = 2714;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,409,Context);
			}
			State = 2715;
			expression();
			State = 2719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2716;
				Match(NL);
				}
				}
				State = 2721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2722;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStrText() { return GetToken(KotlinParser.MultiLineStrText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStringQuote() { return GetToken(KotlinParser.MultiLineStringQuote, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStrRef() { return GetToken(KotlinParser.MultiLineStrRef, 0); }
		public MultiLineStringContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineStringContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineStringContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringContentContext multiLineStringContent() {
		MultiLineStringContentContext _localctx = new MultiLineStringContentContext(Context, State);
		EnterRule(_localctx, 230, RULE_multiLineStringContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2724;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStrExprStart() { return GetToken(KotlinParser.MultiLineStrExprStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public MultiLineStringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineStringExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringExpressionContext multiLineStringExpression() {
		MultiLineStringExpressionContext _localctx = new MultiLineStringExpressionContext(Context, State);
		EnterRule(_localctx, 232, RULE_multiLineStringExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2726;
			Match(MultiLineStrExprStart);
			State = 2730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,411,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2727;
					Match(NL);
					}
					} 
				}
				State = 2732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,411,Context);
			}
			State = 2733;
			expression();
			State = 2737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2734;
				Match(NL);
				}
				}
				State = 2739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2740;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(KotlinParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaLiteralContext lambdaLiteral() {
		LambdaLiteralContext _localctx = new LambdaLiteralContext(Context, State);
		EnterRule(_localctx, 234, RULE_lambdaLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2742;
			Match(LCURL);
			State = 2746;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,413,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2743;
					Match(NL);
					}
					} 
				}
				State = 2748;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,413,Context);
			}
			State = 2765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,417,Context) ) {
			case 1:
				{
				State = 2750;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
				case 1:
					{
					State = 2749;
					lambdaParameters();
					}
					break;
				}
				State = 2755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2752;
					Match(NL);
					}
					}
					State = 2757;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2758;
				Match(ARROW);
				State = 2762;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,416,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2759;
						Match(NL);
						}
						} 
					}
					State = 2764;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,416,Context);
				}
				}
				break;
			}
			State = 2767;
			statements();
			State = 2771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2768;
				Match(NL);
				}
				}
				State = 2773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2774;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterContext[] lambdaParameter() {
			return GetRuleContexts<LambdaParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterContext lambdaParameter(int i) {
			return GetRuleContext<LambdaParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 236, RULE_lambdaParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2776;
			lambdaParameter();
			State = 2793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,421,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2780;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2777;
						Match(NL);
						}
						}
						State = 2782;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2783;
					Match(COMMA);
					State = 2787;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,420,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2784;
							Match(NL);
							}
							} 
						}
						State = 2789;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,420,Context);
					}
					State = 2790;
					lambdaParameter();
					}
					} 
				}
				State = 2795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,421,Context);
			}
			State = 2803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				{
				State = 2799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2796;
					Match(NL);
					}
					}
					State = 2801;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2802;
				Match(COMMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiVariableDeclarationContext multiVariableDeclaration() {
			return GetRuleContext<MultiVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public LambdaParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterContext lambdaParameter() {
		LambdaParameterContext _localctx = new LambdaParameterContext(Context, State);
		EnterRule(_localctx, 238, RULE_lambdaParameter);
		int _la;
		try {
			State = 2823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case AT_NO_WS:
			case AT_PRE_WS:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2805;
				variableDeclaration();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2806;
				multiVariableDeclaration();
				State = 2821;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
				case 1:
					{
					State = 2810;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2807;
						Match(NL);
						}
						}
						State = 2812;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2813;
					Match(COLON);
					State = 2817;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2814;
						Match(NL);
						}
						}
						State = 2819;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2820;
					type();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUN() { return GetToken(KotlinParser.FUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersWithOptionalTypeContext parametersWithOptionalType() {
			return GetRuleContext<ParametersWithOptionalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(KotlinParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintsContext typeConstraints() {
			return GetRuleContext<TypeConstraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public AnonymousFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionContext anonymousFunction() {
		AnonymousFunctionContext _localctx = new AnonymousFunctionContext(Context, State);
		EnterRule(_localctx, 240, RULE_anonymousFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUSPEND) {
				{
				State = 2825;
				Match(SUSPEND);
				}
			}

			State = 2831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2828;
				Match(NL);
				}
				}
				State = 2833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2834;
			Match(FUN);
			State = 2850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
			case 1:
				{
				State = 2838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2835;
					Match(NL);
					}
					}
					State = 2840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2841;
				type();
				State = 2845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2842;
					Match(NL);
					}
					}
					State = 2847;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2848;
				Match(DOT);
				}
				break;
			}
			State = 2855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2852;
				Match(NL);
				}
				}
				State = 2857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2858;
			parametersWithOptionalType();
			State = 2873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
			case 1:
				{
				State = 2862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2859;
					Match(NL);
					}
					}
					State = 2864;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2865;
				Match(COLON);
				State = 2869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2866;
					Match(NL);
					}
					}
					State = 2871;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2872;
				type();
				}
				break;
			}
			State = 2882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				{
				State = 2878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2875;
					Match(NL);
					}
					}
					State = 2880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2881;
				typeConstraints();
				}
				break;
			}
			State = 2891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
			case 1:
				{
				State = 2887;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2884;
					Match(NL);
					}
					}
					State = 2889;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2890;
				functionBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaLiteralContext lambdaLiteral() {
			return GetRuleContext<LambdaLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousFunctionContext anonymousFunction() {
			return GetRuleContext<AnonymousFunctionContext>(0);
		}
		public FunctionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionLiteralContext functionLiteral() {
		FunctionLiteralContext _localctx = new FunctionLiteralContext(Context, State);
		EnterRule(_localctx, 242, RULE_functionLiteral);
		try {
			State = 2895;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2893;
				lambdaLiteral();
				}
				break;
			case NL:
			case FUN:
			case SUSPEND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2894;
				anonymousFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(KotlinParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(KotlinParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 244, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATA) {
				{
				State = 2897;
				Match(DATA);
				}
			}

			State = 2903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2900;
				Match(NL);
				}
				}
				State = 2905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2906;
			Match(OBJECT);
			State = 2927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				{
				State = 2910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2907;
					Match(NL);
					}
					}
					State = 2912;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2913;
				Match(COLON);
				State = 2917;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,445,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2914;
						Match(NL);
						}
						} 
					}
					State = 2919;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,445,Context);
				}
				State = 2920;
				delegationSpecifiers();
				State = 2924;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,446,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2921;
						Match(NL);
						}
						} 
					}
					State = 2926;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,446,Context);
				}
				}
				break;
			}
			State = 2936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				{
				State = 2932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2929;
					Match(NL);
					}
					}
					State = 2934;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2935;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(KotlinParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_AT() { return GetToken(KotlinParser.THIS_AT, 0); }
		public ThisExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisExpressionContext thisExpression() {
		ThisExpressionContext _localctx = new ThisExpressionContext(Context, State);
		EnterRule(_localctx, 246, RULE_thisExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2938;
			_la = TokenStream.LA(1);
			if ( !(_la==THIS_AT || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(KotlinParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_NO_WS() { return GetToken(KotlinParser.AT_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_AT() { return GetToken(KotlinParser.SUPER_AT, 0); }
		public SuperExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperExpressionContext superExpression() {
		SuperExpressionContext _localctx = new SuperExpressionContext(Context, State);
		EnterRule(_localctx, 248, RULE_superExpression);
		int _la;
		try {
			State = 2964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2940;
				Match(SUPER);
				State = 2957;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
				case 1:
					{
					State = 2941;
					Match(LANGLE);
					State = 2945;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2942;
						Match(NL);
						}
						}
						State = 2947;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2948;
					type();
					State = 2952;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2949;
						Match(NL);
						}
						}
						State = 2954;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2955;
					Match(RANGLE);
					}
					break;
				}
				State = 2961;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
				case 1:
					{
					State = 2959;
					Match(AT_NO_WS);
					State = 2960;
					simpleIdentifier();
					}
					break;
				}
				}
				break;
			case SUPER_AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2963;
				Match(SUPER_AT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(KotlinParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext[] controlStructureBody() {
			return GetRuleContexts<ControlStructureBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody(int i) {
			return GetRuleContext<ControlStructureBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KotlinParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(KotlinParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(KotlinParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 250, RULE_ifExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			Match(IF);
			State = 2970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2967;
				Match(NL);
				}
				}
				State = 2972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2973;
			Match(LPAREN);
			State = 2977;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,456,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2974;
					Match(NL);
					}
					} 
				}
				State = 2979;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,456,Context);
			}
			State = 2980;
			expression();
			State = 2984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2981;
				Match(NL);
				}
				}
				State = 2986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2987;
			Match(RPAREN);
			State = 2991;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,458,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2988;
					Match(NL);
					}
					} 
				}
				State = 2993;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,458,Context);
			}
			State = 3025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
			case 1:
				{
				State = 2994;
				controlStructureBody();
				}
				break;
			case 2:
				{
				State = 2996;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
				case 1:
					{
					State = 2995;
					controlStructureBody();
					}
					break;
				}
				State = 3001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2998;
						Match(NL);
						}
						} 
					}
					State = 3003;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
				}
				State = 3005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 3004;
					Match(SEMICOLON);
					}
				}

				State = 3010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3007;
					Match(NL);
					}
					}
					State = 3012;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3013;
				Match(ELSE);
				State = 3017;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,463,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3014;
						Match(NL);
						}
						} 
					}
					State = 3019;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,463,Context);
				}
				State = 3022;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NL:
				case LPAREN:
				case LSQUARE:
				case LCURL:
				case ADD:
				case SUB:
				case INCR:
				case DECR:
				case EXCL_WS:
				case EXCL_NO_WS:
				case COLONCOLON:
				case AT_NO_WS:
				case AT_PRE_WS:
				case RETURN_AT:
				case CONTINUE_AT:
				case BREAK_AT:
				case THIS_AT:
				case SUPER_AT:
				case FILE:
				case FIELD:
				case PROPERTY:
				case GET:
				case SET:
				case RECEIVER:
				case PARAM:
				case SETPARAM:
				case DELEGATE:
				case IMPORT:
				case CLASS:
				case INTERFACE:
				case FUN:
				case OBJECT:
				case VAL:
				case VAR:
				case TYPE_ALIAS:
				case CONSTRUCTOR:
				case BY:
				case COMPANION:
				case INIT:
				case THIS:
				case SUPER:
				case WHERE:
				case IF:
				case WHEN:
				case TRY:
				case CATCH:
				case FINALLY:
				case FOR:
				case DO:
				case WHILE:
				case THROW:
				case RETURN:
				case CONTINUE:
				case BREAK:
				case OUT:
				case DYNAMIC:
				case PUBLIC:
				case PRIVATE:
				case PROTECTED:
				case INTERNAL:
				case ENUM:
				case SEALED:
				case ANNOTATION:
				case DATA:
				case INNER:
				case VALUE:
				case TAILREC:
				case OPERATOR:
				case INLINE:
				case INFIX:
				case EXTERNAL:
				case SUSPEND:
				case OVERRIDE:
				case ABSTRACT:
				case FINAL:
				case OPEN:
				case CONST:
				case LATEINIT:
				case VARARG:
				case NOINLINE:
				case CROSSINLINE:
				case REIFIED:
				case EXPECT:
				case ACTUAL:
				case RealLiteral:
				case IntegerLiteral:
				case HexLiteral:
				case BinLiteral:
				case UnsignedLiteral:
				case LongLiteral:
				case BooleanLiteral:
				case NullLiteral:
				case CharacterLiteral:
				case Identifier:
				case QUOTE_OPEN:
				case TRIPLE_QUOTE_OPEN:
					{
					State = 3020;
					controlStructureBody();
					}
					break;
				case SEMICOLON:
					{
					State = 3021;
					Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 3024;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenSubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(KotlinParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public WhenSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenSubject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenSubjectContext whenSubject() {
		WhenSubjectContext _localctx = new WhenSubjectContext(Context, State);
		EnterRule(_localctx, 252, RULE_whenSubject);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3027;
			Match(LPAREN);
			State = 3061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
			case 1:
				{
				State = 3031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT_NO_WS || _la==AT_PRE_WS) {
					{
					{
					State = 3028;
					annotation();
					}
					}
					State = 3033;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3034;
					Match(NL);
					}
					}
					State = 3039;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3040;
				Match(VAL);
				State = 3044;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,468,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3041;
						Match(NL);
						}
						} 
					}
					State = 3046;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,468,Context);
				}
				State = 3047;
				variableDeclaration();
				State = 3051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3048;
					Match(NL);
					}
					}
					State = 3053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3054;
				Match(ASSIGNMENT);
				State = 3058;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,470,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3055;
						Match(NL);
						}
						} 
					}
					State = 3060;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,470,Context);
				}
				}
				break;
			}
			State = 3063;
			expression();
			State = 3064;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(KotlinParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenSubjectContext whenSubject() {
			return GetRuleContext<WhenSubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenEntryContext[] whenEntry() {
			return GetRuleContexts<WhenEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenEntryContext whenEntry(int i) {
			return GetRuleContext<WhenEntryContext>(i);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 254, RULE_whenExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3066;
			Match(WHEN);
			State = 3070;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,472,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3067;
					Match(NL);
					}
					} 
				}
				State = 3072;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,472,Context);
			}
			State = 3074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 3073;
				whenSubject();
				}
			}

			State = 3079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3076;
				Match(NL);
				}
				}
				State = 3081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3082;
			Match(LCURL);
			State = 3086;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,475,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3083;
					Match(NL);
					}
					} 
				}
				State = 3088;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,475,Context);
			}
			State = 3098;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,477,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3089;
					whenEntry();
					State = 3093;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,476,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3090;
							Match(NL);
							}
							} 
						}
						State = 3095;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,476,Context);
					}
					}
					} 
				}
				State = 3100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,477,Context);
			}
			State = 3104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3101;
				Match(NL);
				}
				}
				State = 3106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3107;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhenConditionContext[] whenCondition() {
			return GetRuleContexts<WhenConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenConditionContext whenCondition(int i) {
			return GetRuleContext<WhenConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(KotlinParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KotlinParser.ELSE, 0); }
		public WhenEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenEntryContext whenEntry() {
		WhenEntryContext _localctx = new WhenEntryContext(Context, State);
		EnterRule(_localctx, 256, RULE_whenEntry);
		int _la;
		try {
			int _alt;
			State = 3173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case LPAREN:
			case LSQUARE:
			case LCURL:
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL_WS:
			case EXCL_NO_WS:
			case COLONCOLON:
			case AT_NO_WS:
			case AT_PRE_WS:
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case THIS_AT:
			case SUPER_AT:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case FUN:
			case OBJECT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case THIS:
			case SUPER:
			case WHERE:
			case IF:
			case WHEN:
			case TRY:
			case CATCH:
			case FINALLY:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case IS:
			case IN:
			case NOT_IS:
			case NOT_IN:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case RealLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case UnsignedLiteral:
			case LongLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case CharacterLiteral:
			case Identifier:
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3109;
				whenCondition();
				State = 3126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,481,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3113;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 3110;
							Match(NL);
							}
							}
							State = 3115;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 3116;
						Match(COMMA);
						State = 3120;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,480,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 3117;
								Match(NL);
								}
								} 
							}
							State = 3122;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,480,Context);
						}
						State = 3123;
						whenCondition();
						}
						} 
					}
					State = 3128;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,481,Context);
				}
				State = 3136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
				case 1:
					{
					State = 3132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 3129;
						Match(NL);
						}
						}
						State = 3134;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3135;
					Match(COMMA);
					}
					break;
				}
				State = 3141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3138;
					Match(NL);
					}
					}
					State = 3143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3144;
				Match(ARROW);
				State = 3148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,485,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3145;
						Match(NL);
						}
						} 
					}
					State = 3150;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,485,Context);
				}
				State = 3151;
				controlStructureBody();
				State = 3153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
				case 1:
					{
					State = 3152;
					semi();
					}
					break;
				}
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3155;
				Match(ELSE);
				State = 3159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3156;
					Match(NL);
					}
					}
					State = 3161;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3162;
				Match(ARROW);
				State = 3166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,488,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3163;
						Match(NL);
						}
						} 
					}
					State = 3168;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,488,Context);
				}
				State = 3169;
				controlStructureBody();
				State = 3171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,489,Context) ) {
				case 1:
					{
					State = 3170;
					semi();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeTestContext rangeTest() {
			return GetRuleContext<RangeTestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTestContext typeTest() {
			return GetRuleContext<TypeTestContext>(0);
		}
		public WhenConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenConditionContext whenCondition() {
		WhenConditionContext _localctx = new WhenConditionContext(Context, State);
		EnterRule(_localctx, 258, RULE_whenCondition);
		try {
			State = 3178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case LPAREN:
			case LSQUARE:
			case LCURL:
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL_WS:
			case EXCL_NO_WS:
			case COLONCOLON:
			case AT_NO_WS:
			case AT_PRE_WS:
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case THIS_AT:
			case SUPER_AT:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case FUN:
			case OBJECT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case THIS:
			case SUPER:
			case WHERE:
			case IF:
			case WHEN:
			case TRY:
			case CATCH:
			case FINALLY:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case RealLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case UnsignedLiteral:
			case LongLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case CharacterLiteral:
			case Identifier:
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3175;
				expression();
				}
				break;
			case IN:
			case NOT_IN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3176;
				rangeTest();
				}
				break;
			case IS:
			case NOT_IS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3177;
				typeTest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InOperatorContext inOperator() {
			return GetRuleContext<InOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public RangeTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeTestContext rangeTest() {
		RangeTestContext _localctx = new RangeTestContext(Context, State);
		EnterRule(_localctx, 260, RULE_rangeTest);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3180;
			inOperator();
			State = 3184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,492,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3181;
					Match(NL);
					}
					} 
				}
				State = 3186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,492,Context);
			}
			State = 3187;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IsOperatorContext isOperator() {
			return GetRuleContext<IsOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public TypeTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTestContext typeTest() {
		TypeTestContext _localctx = new TypeTestContext(Context, State);
		EnterRule(_localctx, 262, RULE_typeTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3189;
			isOperator();
			State = 3193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3190;
				Match(NL);
				}
				}
				State = 3195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3196;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(KotlinParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryExpressionContext tryExpression() {
		TryExpressionContext _localctx = new TryExpressionContext(Context, State);
		EnterRule(_localctx, 264, RULE_tryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3198;
			Match(TRY);
			State = 3202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3199;
				Match(NL);
				}
				}
				State = 3204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3205;
			block();
			State = 3233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				{
				State = 3213;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3209;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 3206;
							Match(NL);
							}
							}
							State = 3211;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 3212;
						catchBlock();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3215;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,496,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3224;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
				case 1:
					{
					State = 3220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 3217;
						Match(NL);
						}
						}
						State = 3222;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3223;
					finallyBlock();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3226;
					Match(NL);
					}
					}
					State = 3231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3232;
				finallyBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(KotlinParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KotlinParser.COMMA, 0); }
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(Context, State);
		EnterRule(_localctx, 266, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3235;
			Match(CATCH);
			State = 3239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3236;
				Match(NL);
				}
				}
				State = 3241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3242;
			Match(LPAREN);
			State = 3246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT_NO_WS || _la==AT_PRE_WS) {
				{
				{
				State = 3243;
				annotation();
				}
				}
				State = 3248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3249;
			simpleIdentifier();
			State = 3250;
			Match(COLON);
			State = 3251;
			type();
			State = 3259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL || _la==COMMA) {
				{
				State = 3255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3252;
					Match(NL);
					}
					}
					State = 3257;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3258;
				Match(COMMA);
				}
			}

			State = 3261;
			Match(RPAREN);
			State = 3265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3262;
				Match(NL);
				}
				}
				State = 3267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3268;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(KotlinParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 268, RULE_finallyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3270;
			Match(FINALLY);
			State = 3274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3271;
				Match(NL);
				}
				}
				State = 3276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3277;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(KotlinParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(KotlinParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_AT() { return GetToken(KotlinParser.RETURN_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(KotlinParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_AT() { return GetToken(KotlinParser.CONTINUE_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(KotlinParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK_AT() { return GetToken(KotlinParser.BREAK_AT, 0); }
		public JumpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpExpressionContext jumpExpression() {
		JumpExpressionContext _localctx = new JumpExpressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_jumpExpression);
		int _la;
		try {
			int _alt;
			State = 3295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3279;
				Match(THROW);
				State = 3283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,507,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3280;
						Match(NL);
						}
						} 
					}
					State = 3285;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,507,Context);
				}
				State = 3286;
				expression();
				}
				break;
			case RETURN_AT:
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3287;
				_la = TokenStream.LA(1);
				if ( !(_la==RETURN_AT || _la==RETURN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,508,Context) ) {
				case 1:
					{
					State = 3288;
					expression();
					}
					break;
				}
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3291;
				Match(CONTINUE);
				}
				break;
			case CONTINUE_AT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3292;
				Match(CONTINUE_AT);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3293;
				Match(BREAK);
				}
				break;
			case BREAK_AT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3294;
				Match(BREAK_AT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(KotlinParser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(KotlinParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public CallableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallableReferenceContext callableReference() {
		CallableReferenceContext _localctx = new CallableReferenceContext(Context, State);
		EnterRule(_localctx, 272, RULE_callableReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223361041738497536L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -8794463665409L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 1049087L) != 0)) {
				{
				State = 3297;
				receiverType();
				}
			}

			State = 3300;
			Match(COLONCOLON);
			State = 3304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3301;
				Match(NL);
				}
				}
				State = 3306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case EXPECT:
			case ACTUAL:
			case Identifier:
				{
				State = 3307;
				simpleIdentifier();
				}
				break;
			case CLASS:
				{
				State = 3308;
				Match(CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentAndOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGNMENT() { return GetToken(KotlinParser.ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGNMENT() { return GetToken(KotlinParser.SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGNMENT() { return GetToken(KotlinParser.MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGNMENT() { return GetToken(KotlinParser.DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGNMENT() { return GetToken(KotlinParser.MOD_ASSIGNMENT, 0); }
		public AssignmentAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentAndOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentAndOperatorContext assignmentAndOperator() {
		AssignmentAndOperatorContext _localctx = new AssignmentAndOperatorContext(Context, State);
		EnterRule(_localctx, 274, RULE_assignmentAndOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3311;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16642998272L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_EQ() { return GetToken(KotlinParser.EXCL_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_EQEQ() { return GetToken(KotlinParser.EXCL_EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(KotlinParser.EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQEQ() { return GetToken(KotlinParser.EQEQEQ, 0); }
		public EqualityOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperatorContext equalityOperator() {
		EqualityOperatorContext _localctx = new EqualityOperatorContext(Context, State);
		EnterRule(_localctx, 276, RULE_equalityOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3313;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60798594969501696L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(KotlinParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(KotlinParser.GE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 278, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3315;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(KotlinParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_IN() { return GetToken(KotlinParser.NOT_IN, 0); }
		public InOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOperatorContext inOperator() {
		InOperatorContext _localctx = new InOperatorContext(Context, State);
		EnterRule(_localctx, 280, RULE_inOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3317;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==NOT_IN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(KotlinParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_IS() { return GetToken(KotlinParser.NOT_IS, 0); }
		public IsOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOperatorContext isOperator() {
		IsOperatorContext _localctx = new IsOperatorContext(Context, State);
		EnterRule(_localctx, 282, RULE_isOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3319;
			_la = TokenStream.LA(1);
			if ( !(_la==IS || _la==NOT_IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KotlinParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(KotlinParser.SUB, 0); }
		public AdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOperatorContext additiveOperator() {
		AdditiveOperatorContext _localctx = new AdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 284, RULE_additiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3321;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KotlinParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(KotlinParser.MOD, 0); }
		public MultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOperatorContext multiplicativeOperator() {
		MultiplicativeOperatorContext _localctx = new MultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 286, RULE_multiplicativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3323;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(KotlinParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SAFE() { return GetToken(KotlinParser.AS_SAFE, 0); }
		public AsOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsOperatorContext asOperator() {
		AsOperatorContext _localctx = new AsOperatorContext(Context, State);
		EnterRule(_localctx, 288, RULE_asOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3325;
			_la = TokenStream.LA(1);
			if ( !(_la==AS_SAFE || _la==AS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixUnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(KotlinParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(KotlinParser.DECR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(KotlinParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KotlinParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExclContext excl() {
			return GetRuleContext<ExclContext>(0);
		}
		public PrefixUnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixUnaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixUnaryOperatorContext prefixUnaryOperator() {
		PrefixUnaryOperatorContext _localctx = new PrefixUnaryOperatorContext(Context, State);
		EnterRule(_localctx, 290, RULE_prefixUnaryOperator);
		try {
			State = 3332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3327;
				Match(INCR);
				}
				break;
			case DECR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3328;
				Match(DECR);
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3329;
				Match(SUB);
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3330;
				Match(ADD);
				}
				break;
			case EXCL_WS:
			case EXCL_NO_WS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3331;
				excl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixUnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(KotlinParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(KotlinParser.DECR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_NO_WS() { return GetToken(KotlinParser.EXCL_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExclContext excl() {
			return GetRuleContext<ExclContext>(0);
		}
		public PostfixUnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixUnaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixUnaryOperatorContext postfixUnaryOperator() {
		PostfixUnaryOperatorContext _localctx = new PostfixUnaryOperatorContext(Context, State);
		EnterRule(_localctx, 292, RULE_postfixUnaryOperator);
		try {
			State = 3338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3334;
				Match(INCR);
				}
				break;
			case DECR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3335;
				Match(DECR);
				}
				break;
			case EXCL_NO_WS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3336;
				Match(EXCL_NO_WS);
				State = 3337;
				excl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_NO_WS() { return GetToken(KotlinParser.EXCL_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_WS() { return GetToken(KotlinParser.EXCL_WS, 0); }
		public ExclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_excl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclContext excl() {
		ExclContext _localctx = new ExclContext(Context, State);
		EnterRule(_localctx, 294, RULE_excl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3340;
			_la = TokenStream.LA(1);
			if ( !(_la==EXCL_WS || _la==EXCL_NO_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SafeNavContext safeNav() {
			return GetRuleContext<SafeNavContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(KotlinParser.COLONCOLON, 0); }
		public MemberAccessOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccessOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessOperatorContext memberAccessOperator() {
		MemberAccessOperatorContext _localctx = new MemberAccessOperatorContext(Context, State);
		EnterRule(_localctx, 296, RULE_memberAccessOperator);
		int _la;
		try {
			State = 3357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3342;
					Match(NL);
					}
					}
					State = 3347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3348;
				Match(DOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3349;
					Match(NL);
					}
					}
					State = 3354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3355;
				safeNav();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3356;
				Match(COLONCOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafeNavContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEST_NO_WS() { return GetToken(KotlinParser.QUEST_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		public SafeNavContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safeNav; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafeNav(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafeNavContext safeNav() {
		SafeNavContext _localctx = new SafeNavContext(Context, State);
		EnterRule(_localctx, 298, RULE_safeNav);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3359;
			Match(QUEST_NO_WS);
			State = 3360;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifiersContext modifiers() {
		ModifiersContext _localctx = new ModifiersContext(Context, State);
		EnterRule(_localctx, 300, RULE_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3364;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3364;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT_NO_WS:
					case AT_PRE_WS:
						{
						State = 3362;
						annotation();
						}
						break;
					case PUBLIC:
					case PRIVATE:
					case PROTECTED:
					case INTERNAL:
					case ENUM:
					case SEALED:
					case ANNOTATION:
					case DATA:
					case INNER:
					case VALUE:
					case TAILREC:
					case OPERATOR:
					case INLINE:
					case INFIX:
					case EXTERNAL:
					case SUSPEND:
					case OVERRIDE:
					case ABSTRACT:
					case FINAL:
					case OPEN:
					case CONST:
					case LATEINIT:
					case VARARG:
					case NOINLINE:
					case CROSSINLINE:
					case EXPECT:
					case ACTUAL:
						{
						State = 3363;
						modifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,519,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public ParameterModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifiersContext parameterModifiers() {
		ParameterModifiersContext _localctx = new ParameterModifiersContext(Context, State);
		EnterRule(_localctx, 302, RULE_parameterModifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3370;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3370;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT_NO_WS:
					case AT_PRE_WS:
						{
						State = 3368;
						annotation();
						}
						break;
					case VARARG:
					case NOINLINE:
					case CROSSINLINE:
						{
						State = 3369;
						parameterModifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,521,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier() {
			return GetRuleContext<ClassModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext memberModifier() {
			return GetRuleContext<MemberModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityModifierContext visibilityModifier() {
			return GetRuleContext<VisibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier() {
			return GetRuleContext<FunctionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyModifierContext propertyModifier() {
			return GetRuleContext<PropertyModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceModifierContext inheritanceModifier() {
			return GetRuleContext<InheritanceModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier() {
			return GetRuleContext<ParameterModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlatformModifierContext platformModifier() {
			return GetRuleContext<PlatformModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 304, RULE_modifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case VALUE:
				{
				State = 3374;
				classModifier();
				}
				break;
			case OVERRIDE:
			case LATEINIT:
				{
				State = 3375;
				memberModifier();
				}
				break;
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
				{
				State = 3376;
				visibilityModifier();
				}
				break;
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
				{
				State = 3377;
				functionModifier();
				}
				break;
			case CONST:
				{
				State = 3378;
				propertyModifier();
				}
				break;
			case ABSTRACT:
			case FINAL:
			case OPEN:
				{
				State = 3379;
				inheritanceModifier();
				}
				break;
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
				{
				State = 3380;
				parameterModifier();
				}
				break;
			case EXPECT:
			case ACTUAL:
				{
				State = 3381;
				platformModifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3387;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,523,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3384;
					Match(NL);
					}
					} 
				}
				State = 3389;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,523,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifierContext[] typeModifier() {
			return GetRuleContexts<TypeModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifierContext typeModifier(int i) {
			return GetRuleContext<TypeModifierContext>(i);
		}
		public TypeModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModifiersContext typeModifiers() {
		TypeModifiersContext _localctx = new TypeModifiersContext(Context, State);
		EnterRule(_localctx, 306, RULE_typeModifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3391;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3390;
					typeModifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,524,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(KotlinParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public TypeModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModifierContext typeModifier() {
		TypeModifierContext _localctx = new TypeModifierContext(Context, State);
		EnterRule(_localctx, 308, RULE_typeModifier);
		int _la;
		try {
			State = 3403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_NO_WS:
			case AT_PRE_WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3395;
				annotation();
				}
				break;
			case SUSPEND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3396;
				Match(SUSPEND);
				State = 3400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3397;
					Match(NL);
					}
					}
					State = 3402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(KotlinParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(KotlinParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION() { return GetToken(KotlinParser.ANNOTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(KotlinParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(KotlinParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(KotlinParser.VALUE, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 310, RULE_classModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3405;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(KotlinParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEINIT() { return GetToken(KotlinParser.LATEINIT, 0); }
		public MemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifierContext memberModifier() {
		MemberModifierContext _localctx = new MemberModifierContext(Context, State);
		EnterRule(_localctx, 312, RULE_memberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3407;
			_la = TokenStream.LA(1);
			if ( !(_la==OVERRIDE || _la==LATEINIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(KotlinParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(KotlinParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(KotlinParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(KotlinParser.PROTECTED, 0); }
		public VisibilityModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibilityModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityModifierContext visibilityModifier() {
		VisibilityModifierContext _localctx = new VisibilityModifierContext(Context, State);
		EnterRule(_localctx, 314, RULE_visibilityModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3409;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarianceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(KotlinParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(KotlinParser.OUT, 0); }
		public VarianceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varianceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarianceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarianceModifierContext varianceModifier() {
		VarianceModifierContext _localctx = new VarianceModifierContext(Context, State);
		EnterRule(_localctx, 316, RULE_varianceModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3411;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		public TypeParameterModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifiersContext typeParameterModifiers() {
		TypeParameterModifiersContext _localctx = new TypeParameterModifiersContext(Context, State);
		EnterRule(_localctx, 318, RULE_typeParameterModifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3414;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3413;
					typeParameterModifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,527,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReificationModifierContext reificationModifier() {
			return GetRuleContext<ReificationModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarianceModifierContext varianceModifier() {
			return GetRuleContext<VarianceModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(Context, State);
		EnterRule(_localctx, 320, RULE_typeParameterModifier);
		try {
			int _alt;
			State = 3433;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REIFIED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3418;
				reificationModifier();
				State = 3422;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,528,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3419;
						Match(NL);
						}
						} 
					}
					State = 3424;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,528,Context);
				}
				}
				break;
			case IN:
			case OUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3425;
				varianceModifier();
				State = 3429;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,529,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3426;
						Match(NL);
						}
						} 
					}
					State = 3431;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,529,Context);
				}
				}
				break;
			case AT_NO_WS:
			case AT_PRE_WS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3432;
				annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAILREC() { return GetToken(KotlinParser.TAILREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(KotlinParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFIX() { return GetToken(KotlinParser.INFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE() { return GetToken(KotlinParser.INLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(KotlinParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(KotlinParser.SUSPEND, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 322, RULE_functionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3435;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(KotlinParser.CONST, 0); }
		public PropertyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyModifierContext propertyModifier() {
		PropertyModifierContext _localctx = new PropertyModifierContext(Context, State);
		EnterRule(_localctx, 324, RULE_propertyModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3437;
			Match(CONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(KotlinParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(KotlinParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(KotlinParser.OPEN, 0); }
		public InheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceModifierContext inheritanceModifier() {
		InheritanceModifierContext _localctx = new InheritanceModifierContext(Context, State);
		EnterRule(_localctx, 326, RULE_inheritanceModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3439;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARARG() { return GetToken(KotlinParser.VARARG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOINLINE() { return GetToken(KotlinParser.NOINLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSINLINE() { return GetToken(KotlinParser.CROSSINLINE, 0); }
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 328, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3441;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReificationModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REIFIED() { return GetToken(KotlinParser.REIFIED, 0); }
		public ReificationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reificationModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReificationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReificationModifierContext reificationModifier() {
		ReificationModifierContext _localctx = new ReificationModifierContext(Context, State);
		EnterRule(_localctx, 330, RULE_reificationModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3443;
			Match(REIFIED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlatformModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT() { return GetToken(KotlinParser.EXPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTUAL() { return GetToken(KotlinParser.ACTUAL, 0); }
		public PlatformModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_platformModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlatformModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlatformModifierContext platformModifier() {
		PlatformModifierContext _localctx = new PlatformModifierContext(Context, State);
		EnterRule(_localctx, 332, RULE_platformModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3445;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPECT || _la==ACTUAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleAnnotationContext singleAnnotation() {
			return GetRuleContext<SingleAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiAnnotationContext multiAnnotation() {
			return GetRuleContext<MultiAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 334, RULE_annotation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				{
				State = 3447;
				singleAnnotation();
				}
				break;
			case 2:
				{
				State = 3448;
				multiAnnotation();
				}
				break;
			}
			State = 3454;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,532,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3451;
					Match(NL);
					}
					} 
				}
				State = 3456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,532,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext unescapedAnnotation() {
			return GetRuleContext<UnescapedAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationUseSiteTargetContext annotationUseSiteTarget() {
			return GetRuleContext<AnnotationUseSiteTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_NO_WS() { return GetToken(KotlinParser.AT_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_PRE_WS() { return GetToken(KotlinParser.AT_PRE_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public SingleAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleAnnotationContext singleAnnotation() {
		SingleAnnotationContext _localctx = new SingleAnnotationContext(Context, State);
		EnterRule(_localctx, 336, RULE_singleAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
			case 1:
				{
				State = 3457;
				annotationUseSiteTarget();
				State = 3461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3458;
					Match(NL);
					}
					}
					State = 3463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 3464;
				Match(AT_NO_WS);
				}
				break;
			case 3:
				{
				State = 3465;
				Match(AT_PRE_WS);
				}
				break;
			}
			State = 3468;
			unescapedAnnotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(KotlinParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(KotlinParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationUseSiteTargetContext annotationUseSiteTarget() {
			return GetRuleContext<AnnotationUseSiteTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_NO_WS() { return GetToken(KotlinParser.AT_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_PRE_WS() { return GetToken(KotlinParser.AT_PRE_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext[] unescapedAnnotation() {
			return GetRuleContexts<UnescapedAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext unescapedAnnotation(int i) {
			return GetRuleContext<UnescapedAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public MultiAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiAnnotationContext multiAnnotation() {
		MultiAnnotationContext _localctx = new MultiAnnotationContext(Context, State);
		EnterRule(_localctx, 338, RULE_multiAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
			case 1:
				{
				State = 3470;
				annotationUseSiteTarget();
				State = 3474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 3471;
					Match(NL);
					}
					}
					State = 3476;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 3477;
				Match(AT_NO_WS);
				}
				break;
			case 3:
				{
				State = 3478;
				Match(AT_PRE_WS);
				}
				break;
			}
			State = 3481;
			Match(LSQUARE);
			State = 3483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3482;
				unescapedAnnotation();
				}
				}
				State = 3485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & -17588927330817L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 2098175L) != 0) );
			State = 3487;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationUseSiteTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_NO_WS() { return GetToken(KotlinParser.AT_NO_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_PRE_WS() { return GetToken(KotlinParser.AT_PRE_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(KotlinParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(KotlinParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(KotlinParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(KotlinParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVER() { return GetToken(KotlinParser.RECEIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(KotlinParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETPARAM() { return GetToken(KotlinParser.SETPARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(KotlinParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnnotationUseSiteTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationUseSiteTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationUseSiteTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationUseSiteTargetContext annotationUseSiteTarget() {
		AnnotationUseSiteTargetContext _localctx = new AnnotationUseSiteTargetContext(Context, State);
		EnterRule(_localctx, 340, RULE_annotationUseSiteTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3489;
			_la = TokenStream.LA(1);
			if ( !(_la==AT_NO_WS || _la==AT_PRE_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3490;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 3491;
				Match(NL);
				}
				}
				State = 3496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3497;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnescapedAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorInvocationContext constructorInvocation() {
			return GetRuleContext<ConstructorInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		public UnescapedAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unescapedAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnescapedAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnescapedAnnotationContext unescapedAnnotation() {
		UnescapedAnnotationContext _localctx = new UnescapedAnnotationContext(Context, State);
		EnterRule(_localctx, 342, RULE_unescapedAnnotation);
		try {
			State = 3501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3499;
				constructorInvocation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3500;
				userType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(KotlinParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(KotlinParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION() { return GetToken(KotlinParser.ANNOTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(KotlinParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(KotlinParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPANION() { return GetToken(KotlinParser.COMPANION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR() { return GetToken(KotlinParser.CONSTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSINLINE() { return GetToken(KotlinParser.CROSSINLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(KotlinParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(KotlinParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(KotlinParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(KotlinParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(KotlinParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(KotlinParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(KotlinParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(KotlinParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFIX() { return GetToken(KotlinParser.INFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(KotlinParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE() { return GetToken(KotlinParser.INLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(KotlinParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(KotlinParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEINIT() { return GetToken(KotlinParser.LATEINIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOINLINE() { return GetToken(KotlinParser.NOINLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(KotlinParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(KotlinParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(KotlinParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(KotlinParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(KotlinParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(KotlinParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(KotlinParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REIFIED() { return GetToken(KotlinParser.REIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(KotlinParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAILREC() { return GetToken(KotlinParser.TAILREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(KotlinParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARARG() { return GetToken(KotlinParser.VARARG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(KotlinParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(KotlinParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(KotlinParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVER() { return GetToken(KotlinParser.RECEIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(KotlinParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETPARAM() { return GetToken(KotlinParser.SETPARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(KotlinParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(KotlinParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT() { return GetToken(KotlinParser.EXPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTUAL() { return GetToken(KotlinParser.ACTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(KotlinParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(KotlinParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(KotlinParser.VALUE, 0); }
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdentifierContext simpleIdentifier() {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 344, RULE_simpleIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3503;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & -17588927330817L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 2098175L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(KotlinParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(KotlinParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 346, RULE_identifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3505;
			simpleIdentifier();
			State = 3516;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,541,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3509;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 3506;
						Match(NL);
						}
						}
						State = 3511;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3512;
					Match(DOT);
					State = 3513;
					simpleIdentifier();
					}
					} 
				}
				State = 3518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,541,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,173,3520,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,1,0,3,0,350,8,0,1,0,5,0,353,8,0,10,
		0,12,0,356,9,0,1,0,5,0,359,8,0,10,0,12,0,362,9,0,1,0,1,0,1,0,5,0,367,8,
		0,10,0,12,0,370,9,0,1,0,1,0,1,1,3,1,375,8,1,1,1,5,1,378,8,1,10,1,12,1,
		381,9,1,1,1,5,1,384,8,1,10,1,12,1,387,9,1,1,1,1,1,1,1,1,1,1,1,5,1,394,
		8,1,10,1,12,1,397,9,1,1,1,1,1,1,2,1,2,4,2,403,8,2,11,2,12,2,404,1,3,1,
		3,1,3,5,3,410,8,3,10,3,12,3,413,9,3,1,3,1,3,5,3,417,8,3,10,3,12,3,420,
		9,3,1,3,1,3,4,3,424,8,3,11,3,12,3,425,1,3,1,3,1,3,3,3,431,8,3,1,3,5,3,
		434,8,3,10,3,12,3,437,9,3,1,4,1,4,1,4,3,4,442,8,4,3,4,444,8,4,1,5,5,5,
		447,8,5,10,5,12,5,450,9,5,1,6,1,6,1,6,1,6,1,6,3,6,457,8,6,1,6,3,6,460,
		8,6,1,7,1,7,1,7,1,8,1,8,3,8,467,8,8,1,9,3,9,470,8,9,1,9,1,9,5,9,474,8,
		9,10,9,12,9,477,9,9,1,9,1,9,5,9,481,8,9,10,9,12,9,484,9,9,1,9,3,9,487,
		8,9,1,9,5,9,490,8,9,10,9,12,9,493,9,9,1,9,1,9,5,9,497,8,9,10,9,12,9,500,
		9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,509,8,10,1,11,3,11,512,8,11,
		1,11,1,11,1,11,5,11,517,8,11,10,11,12,11,520,9,11,3,11,522,8,11,1,11,3,
		11,525,8,11,1,11,5,11,528,8,11,10,11,12,11,531,9,11,1,11,1,11,5,11,535,
		8,11,10,11,12,11,538,9,11,1,11,3,11,541,8,11,1,11,5,11,544,8,11,10,11,
		12,11,547,9,11,1,11,3,11,550,8,11,1,11,5,11,553,8,11,10,11,12,11,556,9,
		11,1,11,1,11,5,11,560,8,11,10,11,12,11,563,9,11,1,11,3,11,566,8,11,1,11,
		5,11,569,8,11,10,11,12,11,572,9,11,1,11,3,11,575,8,11,1,11,5,11,578,8,
		11,10,11,12,11,581,9,11,1,11,1,11,5,11,585,8,11,10,11,12,11,588,9,11,1,
		11,3,11,591,8,11,1,12,3,12,594,8,12,1,12,1,12,5,12,598,8,12,10,12,12,12,
		601,9,12,3,12,603,8,12,1,12,1,12,1,13,1,13,5,13,609,8,13,10,13,12,13,612,
		9,13,1,13,1,13,5,13,616,8,13,10,13,12,13,619,9,13,1,13,1,13,1,14,1,14,
		5,14,625,8,14,10,14,12,14,628,9,14,1,14,1,14,5,14,632,8,14,10,14,12,14,
		635,9,14,1,14,1,14,5,14,639,8,14,10,14,12,14,642,9,14,1,14,5,14,645,8,
		14,10,14,12,14,648,9,14,1,14,5,14,651,8,14,10,14,12,14,654,9,14,1,14,3,
		14,657,8,14,3,14,659,8,14,1,14,5,14,662,8,14,10,14,12,14,665,9,14,1,14,
		1,14,1,15,3,15,670,8,15,1,15,3,15,673,8,15,1,15,5,15,676,8,15,10,15,12,
		15,679,9,15,1,15,1,15,1,15,5,15,684,8,15,10,15,12,15,687,9,15,1,15,1,15,
		5,15,691,8,15,10,15,12,15,694,9,15,1,15,1,15,5,15,698,8,15,10,15,12,15,
		701,9,15,1,15,3,15,704,8,15,1,16,1,16,5,16,708,8,16,10,16,12,16,711,9,
		16,1,16,1,16,5,16,715,8,16,10,16,12,16,718,9,16,1,16,5,16,721,8,16,10,
		16,12,16,724,9,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,732,8,17,10,17,12,
		17,735,9,17,1,17,3,17,738,8,17,1,18,1,18,5,18,742,8,18,10,18,12,18,745,
		9,18,1,18,1,18,1,19,5,19,750,8,19,10,19,12,19,753,9,19,1,19,5,19,756,8,
		19,10,19,12,19,759,9,19,1,19,1,19,1,20,1,20,3,20,765,8,20,1,20,5,20,768,
		8,20,10,20,12,20,771,9,20,1,20,1,20,5,20,775,8,20,10,20,12,20,778,9,20,
		1,20,1,20,1,21,1,21,5,21,784,8,21,10,21,12,21,787,9,21,1,21,1,21,5,21,
		791,8,21,10,21,12,21,794,9,21,1,21,1,21,5,21,798,8,21,10,21,12,21,801,
		9,21,1,21,5,21,804,8,21,10,21,12,21,807,9,21,1,21,5,21,810,8,21,10,21,
		12,21,813,9,21,1,21,3,21,816,8,21,1,21,5,21,819,8,21,10,21,12,21,822,9,
		21,1,21,1,21,1,22,3,22,827,8,22,1,22,5,22,830,8,22,10,22,12,22,833,9,22,
		1,22,1,22,5,22,837,8,22,10,22,12,22,840,9,22,1,22,1,22,5,22,844,8,22,10,
		22,12,22,847,9,22,1,22,3,22,850,8,22,1,23,1,23,5,23,854,8,23,10,23,12,
		23,857,9,23,1,23,1,23,5,23,861,8,23,10,23,12,23,864,9,23,1,23,1,23,5,23,
		868,8,23,10,23,12,23,871,9,23,1,23,5,23,874,8,23,10,23,12,23,877,9,23,
		1,24,5,24,880,8,24,10,24,12,24,883,9,24,1,24,1,24,5,24,887,8,24,10,24,
		12,24,890,9,24,1,24,1,24,5,24,894,8,24,10,24,12,24,897,9,24,1,24,1,24,
		1,25,1,25,3,25,903,8,25,5,25,905,8,25,10,25,12,25,908,9,25,1,26,1,26,1,
		26,1,26,3,26,914,8,26,1,27,1,27,5,27,918,8,27,10,27,12,27,921,9,27,1,27,
		1,27,1,28,3,28,926,8,28,1,28,1,28,5,28,930,8,28,10,28,12,28,933,9,28,1,
		28,3,28,936,8,28,1,28,5,28,939,8,28,10,28,12,28,942,9,28,1,28,1,28,5,28,
		946,8,28,10,28,12,28,949,9,28,1,28,3,28,952,8,28,1,28,5,28,955,8,28,10,
		28,12,28,958,9,28,1,28,1,28,5,28,962,8,28,10,28,12,28,965,9,28,1,28,3,
		28,968,8,28,1,28,5,28,971,8,28,10,28,12,28,974,9,28,1,28,3,28,977,8,28,
		1,29,1,29,5,29,981,8,29,10,29,12,29,984,9,29,1,29,1,29,5,29,988,8,29,10,
		29,12,29,991,9,29,1,29,1,29,5,29,995,8,29,10,29,12,29,998,9,29,1,29,5,
		29,1001,8,29,10,29,12,29,1004,9,29,1,29,5,29,1007,8,29,10,29,12,29,1010,
		9,29,1,29,3,29,1013,8,29,3,29,1015,8,29,1,29,5,29,1018,8,29,10,29,12,29,
		1021,9,29,1,29,1,29,1,30,3,30,1026,8,30,1,30,1,30,5,30,1030,8,30,10,30,
		12,30,1033,9,30,1,30,1,30,5,30,1037,8,30,10,30,12,30,1040,9,30,1,30,3,
		30,1043,8,30,1,31,3,31,1046,8,31,1,31,1,31,5,31,1050,8,31,10,31,12,31,
		1053,9,31,1,31,3,31,1056,8,31,1,31,5,31,1059,8,31,10,31,12,31,1062,9,31,
		1,31,1,31,5,31,1066,8,31,10,31,12,31,1069,9,31,1,31,1,31,3,31,1073,8,31,
		1,31,5,31,1076,8,31,10,31,12,31,1079,9,31,1,31,1,31,5,31,1083,8,31,10,
		31,12,31,1086,9,31,1,31,1,31,5,31,1090,8,31,10,31,12,31,1093,9,31,1,31,
		1,31,5,31,1097,8,31,10,31,12,31,1100,9,31,1,31,3,31,1103,8,31,1,31,5,31,
		1106,8,31,10,31,12,31,1109,9,31,1,31,3,31,1112,8,31,1,31,5,31,1115,8,31,
		10,31,12,31,1118,9,31,1,31,3,31,1121,8,31,1,32,1,32,1,32,5,32,1126,8,32,
		10,32,12,32,1129,9,32,1,32,3,32,1132,8,32,1,33,5,33,1135,8,33,10,33,12,
		33,1138,9,33,1,33,5,33,1141,8,33,10,33,12,33,1144,9,33,1,33,1,33,5,33,
		1148,8,33,10,33,12,33,1151,9,33,1,33,1,33,5,33,1155,8,33,10,33,12,33,1158,
		9,33,1,33,3,33,1161,8,33,1,34,1,34,5,34,1165,8,34,10,34,12,34,1168,9,34,
		1,34,1,34,5,34,1172,8,34,10,34,12,34,1175,9,34,1,34,1,34,5,34,1179,8,34,
		10,34,12,34,1182,9,34,1,34,5,34,1185,8,34,10,34,12,34,1188,9,34,1,34,5,
		34,1191,8,34,10,34,12,34,1194,9,34,1,34,3,34,1197,8,34,1,34,5,34,1200,
		8,34,10,34,12,34,1203,9,34,1,34,1,34,1,35,3,35,1208,8,35,1,35,1,35,5,35,
		1212,8,35,10,35,12,35,1215,9,35,1,35,3,35,1218,8,35,1,35,5,35,1221,8,35,
		10,35,12,35,1224,9,35,1,35,1,35,5,35,1228,8,35,10,35,12,35,1231,9,35,1,
		35,1,35,3,35,1235,8,35,1,35,5,35,1238,8,35,10,35,12,35,1241,9,35,1,35,
		1,35,3,35,1245,8,35,1,35,5,35,1248,8,35,10,35,12,35,1251,9,35,1,35,3,35,
		1254,8,35,1,35,5,35,1257,8,35,10,35,12,35,1260,9,35,1,35,1,35,5,35,1264,
		8,35,10,35,12,35,1267,9,35,1,35,1,35,3,35,1271,8,35,3,35,1273,8,35,1,35,
		5,35,1276,8,35,10,35,12,35,1279,9,35,1,35,3,35,1282,8,35,1,35,5,35,1285,
		8,35,10,35,12,35,1288,9,35,1,35,3,35,1291,8,35,1,35,5,35,1294,8,35,10,
		35,12,35,1297,9,35,1,35,3,35,1300,8,35,1,35,3,35,1303,8,35,1,35,3,35,1306,
		8,35,1,35,5,35,1309,8,35,10,35,12,35,1312,9,35,1,35,3,35,1315,8,35,1,35,
		3,35,1318,8,35,3,35,1320,8,35,1,36,1,36,5,36,1324,8,36,10,36,12,36,1327,
		9,36,1,36,1,36,1,37,3,37,1332,8,37,1,37,1,37,5,37,1336,8,37,10,37,12,37,
		1339,9,37,1,37,1,37,5,37,1343,8,37,10,37,12,37,1346,9,37,1,37,1,37,5,37,
		1350,8,37,10,37,12,37,1353,9,37,1,37,1,37,5,37,1357,8,37,10,37,12,37,1360,
		9,37,1,37,3,37,1363,8,37,1,37,5,37,1366,8,37,10,37,12,37,1369,9,37,1,37,
		3,37,1372,8,37,1,38,3,38,1375,8,38,1,38,1,38,5,38,1379,8,38,10,38,12,38,
		1382,9,38,1,38,1,38,5,38,1386,8,38,10,38,12,38,1389,9,38,1,38,1,38,5,38,
		1393,8,38,10,38,12,38,1396,9,38,1,38,3,38,1399,8,38,1,38,5,38,1402,8,38,
		10,38,12,38,1405,9,38,1,38,1,38,5,38,1409,8,38,10,38,12,38,1412,9,38,1,
		38,1,38,5,38,1416,8,38,10,38,12,38,1419,9,38,1,38,3,38,1422,8,38,1,38,
		5,38,1425,8,38,10,38,12,38,1428,9,38,1,38,1,38,3,38,1432,8,38,1,39,1,39,
		5,39,1436,8,39,10,39,12,39,1439,9,39,1,39,1,39,5,39,1443,8,39,10,39,12,
		39,1446,9,39,1,39,1,39,5,39,1450,8,39,10,39,12,39,1453,9,39,1,39,5,39,
		1456,8,39,10,39,12,39,1459,9,39,1,39,5,39,1462,8,39,10,39,12,39,1465,9,
		39,1,39,3,39,1468,8,39,3,39,1470,8,39,1,39,5,39,1473,8,39,10,39,12,39,
		1476,9,39,1,39,1,39,1,40,3,40,1481,8,40,1,40,1,40,5,40,1485,8,40,10,40,
		12,40,1488,9,40,1,40,1,40,5,40,1492,8,40,10,40,12,40,1495,9,40,1,40,3,
		40,1498,8,40,1,41,1,41,5,41,1502,8,41,10,41,12,41,1505,9,41,1,41,1,41,
		5,41,1509,8,41,10,41,12,41,1512,9,41,1,41,3,41,1515,8,41,1,42,1,42,5,42,
		1519,8,42,10,42,12,42,1522,9,42,1,42,1,42,5,42,1526,8,42,10,42,12,42,1529,
		9,42,1,42,1,42,1,43,3,43,1534,8,43,1,43,1,43,5,43,1538,8,43,10,43,12,43,
		1541,9,43,1,43,1,43,5,43,1545,8,43,10,43,12,43,1548,9,43,1,43,1,43,5,43,
		1552,8,43,10,43,12,43,1555,9,43,1,43,3,43,1558,8,43,1,43,5,43,1561,8,43,
		10,43,12,43,1564,9,43,1,43,3,43,1567,8,43,1,44,3,44,1570,8,44,1,44,1,44,
		5,44,1574,8,44,10,44,12,44,1577,9,44,1,44,1,44,5,44,1581,8,44,10,44,12,
		44,1584,9,44,1,44,1,44,5,44,1588,8,44,10,44,12,44,1591,9,44,1,44,3,44,
		1594,8,44,1,44,5,44,1597,8,44,10,44,12,44,1600,9,44,1,44,3,44,1603,8,44,
		1,45,1,45,5,45,1607,8,45,10,45,12,45,1610,9,45,1,45,1,45,1,46,1,46,5,46,
		1616,8,46,10,46,12,46,1619,9,46,1,46,3,46,1622,8,46,1,46,5,46,1625,8,46,
		10,46,12,46,1628,9,46,1,46,1,46,5,46,1632,8,46,10,46,12,46,1635,9,46,1,
		46,3,46,1638,8,46,1,46,5,46,1641,8,46,10,46,12,46,1644,9,46,1,46,1,46,
		1,47,1,47,5,47,1650,8,47,10,47,12,47,1653,9,47,1,47,1,47,5,47,1657,8,47,
		10,47,12,47,1660,9,47,1,47,5,47,1663,8,47,10,47,12,47,1666,9,47,1,47,5,
		47,1669,8,47,10,47,12,47,1672,9,47,1,47,3,47,1675,8,47,1,48,1,48,5,48,
		1679,8,48,10,48,12,48,1682,9,48,3,48,1684,8,48,1,48,1,48,5,48,1688,8,48,
		10,48,12,48,1691,9,48,1,48,3,48,1694,8,48,1,48,5,48,1697,8,48,10,48,12,
		48,1700,9,48,1,48,3,48,1703,8,48,1,49,3,49,1706,8,49,1,49,1,49,1,49,1,
		49,1,49,3,49,1713,8,49,1,50,1,50,3,50,1717,8,50,1,51,1,51,3,51,1721,8,
		51,1,51,5,51,1724,8,51,10,51,12,51,1727,9,51,1,51,4,51,1730,8,51,11,51,
		12,51,1731,1,52,1,52,1,53,1,53,5,53,1738,8,53,10,53,12,53,1741,9,53,1,
		53,1,53,5,53,1745,8,53,10,53,12,53,1748,9,53,1,53,5,53,1751,8,53,10,53,
		12,53,1754,9,53,1,54,1,54,5,54,1758,8,54,10,54,12,54,1761,9,54,1,54,3,
		54,1764,8,54,1,55,3,55,1767,8,55,1,55,1,55,3,55,1771,8,55,1,56,4,56,1774,
		8,56,11,56,12,56,1775,1,57,1,57,5,57,1780,8,57,10,57,12,57,1783,9,57,1,
		57,3,57,1786,8,57,1,58,1,58,5,58,1790,8,58,10,58,12,58,1793,9,58,1,58,
		1,58,5,58,1797,8,58,10,58,12,58,1800,9,58,3,58,1802,8,58,1,58,1,58,5,58,
		1806,8,58,10,58,12,58,1809,9,58,1,58,1,58,5,58,1813,8,58,10,58,12,58,1816,
		9,58,1,58,1,58,1,59,1,59,5,59,1822,8,59,10,59,12,59,1825,9,59,1,59,1,59,
		3,59,1829,8,59,1,59,5,59,1832,8,59,10,59,12,59,1835,9,59,1,59,1,59,5,59,
		1839,8,59,10,59,12,59,1842,9,59,1,59,1,59,3,59,1846,8,59,5,59,1848,8,59,
		10,59,12,59,1851,9,59,1,59,5,59,1854,8,59,10,59,12,59,1857,9,59,1,59,3,
		59,1860,8,59,1,59,5,59,1863,8,59,10,59,12,59,1866,9,59,1,59,1,59,1,60,
		1,60,5,60,1872,8,60,10,60,12,60,1875,9,60,1,60,1,60,5,60,1879,8,60,10,
		60,12,60,1882,9,60,1,60,1,60,1,61,3,61,1887,8,61,1,61,1,61,1,61,3,61,1892,
		8,61,1,62,1,62,5,62,1896,8,62,10,62,12,62,1899,9,62,1,62,1,62,3,62,1903,
		8,62,1,62,5,62,1906,8,62,10,62,12,62,1909,9,62,1,62,1,62,1,63,3,63,1914,
		8,63,1,63,1,63,3,63,1918,8,63,1,63,5,63,1921,8,63,10,63,12,63,1924,9,63,
		1,63,1,63,5,63,1928,8,63,10,63,12,63,1931,9,63,1,63,3,63,1934,8,63,1,63,
		1,63,3,63,1938,8,63,1,64,1,64,1,64,1,64,5,64,1944,8,64,10,64,12,64,1947,
		9,64,3,64,1949,8,64,1,64,3,64,1952,8,64,1,65,1,65,5,65,1956,8,65,10,65,
		12,65,1959,9,65,1,65,1,65,1,65,1,65,3,65,1965,8,65,1,66,1,66,1,66,5,66,
		1970,8,66,10,66,12,66,1973,9,66,1,67,1,67,3,67,1977,8,67,1,68,1,68,5,68,
		1981,8,68,10,68,12,68,1984,9,68,1,68,1,68,5,68,1988,8,68,10,68,12,68,1991,
		9,68,1,68,1,68,1,69,1,69,1,69,3,69,1998,8,69,1,70,1,70,5,70,2002,8,70,
		10,70,12,70,2005,9,70,1,70,1,70,5,70,2009,8,70,10,70,12,70,2012,9,70,1,
		70,1,70,3,70,2016,8,70,1,70,1,70,1,70,1,70,5,70,2022,8,70,10,70,12,70,
		2025,9,70,1,70,3,70,2028,8,70,1,71,1,71,5,71,2032,8,71,10,71,12,71,2035,
		9,71,1,71,1,71,1,71,1,71,5,71,2041,8,71,10,71,12,71,2044,9,71,1,71,1,71,
		3,71,2048,8,71,1,72,1,72,5,72,2052,8,72,10,72,12,72,2055,9,72,1,72,3,72,
		2058,8,72,1,72,5,72,2061,8,72,10,72,12,72,2064,9,72,1,72,1,72,5,72,2068,
		8,72,10,72,12,72,2071,9,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,
		1,73,3,73,2083,8,73,1,73,5,73,2086,8,73,10,73,12,73,2089,9,73,1,73,1,73,
		1,74,1,74,5,74,2095,8,74,10,74,12,74,2098,9,74,1,75,4,75,2101,8,75,11,
		75,12,75,2102,1,76,1,76,1,77,1,77,5,77,2109,8,77,10,77,12,77,2112,9,77,
		1,77,1,77,5,77,2116,8,77,10,77,12,77,2119,9,77,1,77,5,77,2122,8,77,10,
		77,12,77,2125,9,77,1,78,1,78,5,78,2129,8,78,10,78,12,78,2132,9,78,1,78,
		1,78,5,78,2136,8,78,10,78,12,78,2139,9,78,1,78,5,78,2142,8,78,10,78,12,
		78,2145,9,78,1,79,1,79,1,79,5,79,2150,8,79,10,79,12,79,2153,9,79,1,79,
		1,79,5,79,2157,8,79,10,79,12,79,2160,9,79,1,80,1,80,1,80,5,80,2165,8,80,
		10,80,12,80,2168,9,80,1,80,1,80,5,80,2172,8,80,10,80,12,80,2175,9,80,1,
		81,1,81,5,81,2179,8,81,10,81,12,81,2182,9,81,1,82,1,82,1,82,5,82,2187,
		8,82,10,82,12,82,2190,9,82,1,82,1,82,1,82,1,82,5,82,2196,8,82,10,82,12,
		82,2199,9,82,1,82,1,82,5,82,2203,8,82,10,82,12,82,2206,9,82,1,83,1,83,
		5,83,2210,8,83,10,83,12,83,2213,9,83,1,83,1,83,5,83,2217,8,83,10,83,12,
		83,2220,9,83,1,83,1,83,5,83,2224,8,83,10,83,12,83,2227,9,83,1,84,1,84,
		1,84,1,85,1,85,1,85,5,85,2235,8,85,10,85,12,85,2238,9,85,1,85,1,85,5,85,
		2242,8,85,10,85,12,85,2245,9,85,1,86,1,86,1,86,5,86,2250,8,86,10,86,12,
		86,2253,9,86,1,86,5,86,2256,8,86,10,86,12,86,2259,9,86,1,87,1,87,1,87,
		5,87,2264,8,87,10,87,12,87,2267,9,87,1,87,1,87,5,87,2271,8,87,10,87,12,
		87,2274,9,87,1,88,1,88,1,88,5,88,2279,8,88,10,88,12,88,2282,9,88,1,88,
		1,88,5,88,2286,8,88,10,88,12,88,2289,9,88,1,89,1,89,5,89,2293,8,89,10,
		89,12,89,2296,9,89,1,89,1,89,5,89,2300,8,89,10,89,12,89,2303,9,89,1,89,
		1,89,5,89,2307,8,89,10,89,12,89,2310,9,89,1,90,5,90,2313,8,90,10,90,12,
		90,2316,9,90,1,90,1,90,1,91,1,91,1,91,1,91,5,91,2324,8,91,10,91,12,91,
		2327,9,91,3,91,2329,8,91,1,92,1,92,5,92,2333,8,92,10,92,12,92,2336,9,92,
		1,93,1,93,1,93,1,93,1,93,3,93,2343,8,93,1,94,1,94,1,94,1,94,1,94,3,94,
		2350,8,94,1,95,1,95,5,95,2354,8,95,10,95,12,95,2357,9,95,1,95,1,95,5,95,
		2361,8,95,10,95,12,95,2364,9,95,1,95,1,95,1,96,1,96,3,96,2370,8,96,1,97,
		1,97,5,97,2374,8,97,10,97,12,97,2377,9,97,1,97,1,97,5,97,2381,8,97,10,
		97,12,97,2384,9,97,1,97,1,97,1,98,1,98,1,98,3,98,2391,8,98,1,99,1,99,5,
		99,2395,8,99,10,99,12,99,2398,9,99,1,99,1,99,5,99,2402,8,99,10,99,12,99,
		2405,9,99,1,99,1,99,5,99,2409,8,99,10,99,12,99,2412,9,99,1,99,5,99,2415,
		8,99,10,99,12,99,2418,9,99,1,99,5,99,2421,8,99,10,99,12,99,2424,9,99,1,
		99,3,99,2427,8,99,1,99,5,99,2430,8,99,10,99,12,99,2433,9,99,1,99,1,99,
		1,100,1,100,5,100,2439,8,100,10,100,12,100,2442,9,100,1,100,1,100,1,100,
		3,100,2447,8,100,1,101,3,101,2450,8,101,1,101,3,101,2453,8,101,1,101,1,
		101,3,101,2457,8,101,1,102,5,102,2460,8,102,10,102,12,102,2463,9,102,1,
		102,3,102,2466,8,102,1,102,5,102,2469,8,102,10,102,12,102,2472,9,102,1,
		102,1,102,1,103,1,103,5,103,2478,8,103,10,103,12,103,2481,9,103,1,103,
		1,103,5,103,2485,8,103,10,103,12,103,2488,9,103,1,103,1,103,5,103,2492,
		8,103,10,103,12,103,2495,9,103,1,103,5,103,2498,8,103,10,103,12,103,2501,
		9,103,1,103,5,103,2504,8,103,10,103,12,103,2507,9,103,1,103,3,103,2510,
		8,103,1,103,5,103,2513,8,103,10,103,12,103,2516,9,103,1,103,1,103,1,104,
		1,104,5,104,2522,8,104,10,104,12,104,2525,9,104,1,104,1,104,5,104,2529,
		8,104,10,104,12,104,2532,9,104,1,104,1,104,5,104,2536,8,104,10,104,12,
		104,2539,9,104,1,104,5,104,2542,8,104,10,104,12,104,2545,9,104,1,104,5,
		104,2548,8,104,10,104,12,104,2551,9,104,1,104,3,104,2554,8,104,1,104,5,
		104,2557,8,104,10,104,12,104,2560,9,104,3,104,2562,8,104,1,104,1,104,1,
		105,3,105,2567,8,105,1,105,5,105,2570,8,105,10,105,12,105,2573,9,105,1,
		105,1,105,5,105,2577,8,105,10,105,12,105,2580,9,105,1,105,1,105,5,105,
		2584,8,105,10,105,12,105,2587,9,105,3,105,2589,8,105,1,105,3,105,2592,
		8,105,1,105,5,105,2595,8,105,10,105,12,105,2598,9,105,1,105,1,105,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		1,106,3,106,2616,8,106,1,107,1,107,5,107,2620,8,107,10,107,12,107,2623,
		9,107,1,107,1,107,5,107,2627,8,107,10,107,12,107,2630,9,107,1,107,1,107,
		1,108,1,108,5,108,2636,8,108,10,108,12,108,2639,9,108,1,108,1,108,5,108,
		2643,8,108,10,108,12,108,2646,9,108,1,108,1,108,5,108,2650,8,108,10,108,
		12,108,2653,9,108,1,108,5,108,2656,8,108,10,108,12,108,2659,9,108,1,108,
		5,108,2662,8,108,10,108,12,108,2665,9,108,1,108,3,108,2668,8,108,1,108,
		5,108,2671,8,108,10,108,12,108,2674,9,108,3,108,2676,8,108,1,108,1,108,
		1,109,1,109,1,110,1,110,3,110,2684,8,110,1,111,1,111,1,111,5,111,2689,
		8,111,10,111,12,111,2692,9,111,1,111,1,111,1,112,1,112,1,112,1,112,5,112,
		2700,8,112,10,112,12,112,2703,9,112,1,112,1,112,1,113,1,113,1,114,1,114,
		5,114,2711,8,114,10,114,12,114,2714,9,114,1,114,1,114,5,114,2718,8,114,
		10,114,12,114,2721,9,114,1,114,1,114,1,115,1,115,1,116,1,116,5,116,2729,
		8,116,10,116,12,116,2732,9,116,1,116,1,116,5,116,2736,8,116,10,116,12,
		116,2739,9,116,1,116,1,116,1,117,1,117,5,117,2745,8,117,10,117,12,117,
		2748,9,117,1,117,3,117,2751,8,117,1,117,5,117,2754,8,117,10,117,12,117,
		2757,9,117,1,117,1,117,5,117,2761,8,117,10,117,12,117,2764,9,117,3,117,
		2766,8,117,1,117,1,117,5,117,2770,8,117,10,117,12,117,2773,9,117,1,117,
		1,117,1,118,1,118,5,118,2779,8,118,10,118,12,118,2782,9,118,1,118,1,118,
		5,118,2786,8,118,10,118,12,118,2789,9,118,1,118,5,118,2792,8,118,10,118,
		12,118,2795,9,118,1,118,5,118,2798,8,118,10,118,12,118,2801,9,118,1,118,
		3,118,2804,8,118,1,119,1,119,1,119,5,119,2809,8,119,10,119,12,119,2812,
		9,119,1,119,1,119,5,119,2816,8,119,10,119,12,119,2819,9,119,1,119,3,119,
		2822,8,119,3,119,2824,8,119,1,120,3,120,2827,8,120,1,120,5,120,2830,8,
		120,10,120,12,120,2833,9,120,1,120,1,120,5,120,2837,8,120,10,120,12,120,
		2840,9,120,1,120,1,120,5,120,2844,8,120,10,120,12,120,2847,9,120,1,120,
		1,120,3,120,2851,8,120,1,120,5,120,2854,8,120,10,120,12,120,2857,9,120,
		1,120,1,120,5,120,2861,8,120,10,120,12,120,2864,9,120,1,120,1,120,5,120,
		2868,8,120,10,120,12,120,2871,9,120,1,120,3,120,2874,8,120,1,120,5,120,
		2877,8,120,10,120,12,120,2880,9,120,1,120,3,120,2883,8,120,1,120,5,120,
		2886,8,120,10,120,12,120,2889,9,120,1,120,3,120,2892,8,120,1,121,1,121,
		3,121,2896,8,121,1,122,3,122,2899,8,122,1,122,5,122,2902,8,122,10,122,
		12,122,2905,9,122,1,122,1,122,5,122,2909,8,122,10,122,12,122,2912,9,122,
		1,122,1,122,5,122,2916,8,122,10,122,12,122,2919,9,122,1,122,1,122,5,122,
		2923,8,122,10,122,12,122,2926,9,122,3,122,2928,8,122,1,122,5,122,2931,
		8,122,10,122,12,122,2934,9,122,1,122,3,122,2937,8,122,1,123,1,123,1,124,
		1,124,1,124,5,124,2944,8,124,10,124,12,124,2947,9,124,1,124,1,124,5,124,
		2951,8,124,10,124,12,124,2954,9,124,1,124,1,124,3,124,2958,8,124,1,124,
		1,124,3,124,2962,8,124,1,124,3,124,2965,8,124,1,125,1,125,5,125,2969,8,
		125,10,125,12,125,2972,9,125,1,125,1,125,5,125,2976,8,125,10,125,12,125,
		2979,9,125,1,125,1,125,5,125,2983,8,125,10,125,12,125,2986,9,125,1,125,
		1,125,5,125,2990,8,125,10,125,12,125,2993,9,125,1,125,1,125,3,125,2997,
		8,125,1,125,5,125,3000,8,125,10,125,12,125,3003,9,125,1,125,3,125,3006,
		8,125,1,125,5,125,3009,8,125,10,125,12,125,3012,9,125,1,125,1,125,5,125,
		3016,8,125,10,125,12,125,3019,9,125,1,125,1,125,3,125,3023,8,125,1,125,
		3,125,3026,8,125,1,126,1,126,5,126,3030,8,126,10,126,12,126,3033,9,126,
		1,126,5,126,3036,8,126,10,126,12,126,3039,9,126,1,126,1,126,5,126,3043,
		8,126,10,126,12,126,3046,9,126,1,126,1,126,5,126,3050,8,126,10,126,12,
		126,3053,9,126,1,126,1,126,5,126,3057,8,126,10,126,12,126,3060,9,126,3,
		126,3062,8,126,1,126,1,126,1,126,1,127,1,127,5,127,3069,8,127,10,127,12,
		127,3072,9,127,1,127,3,127,3075,8,127,1,127,5,127,3078,8,127,10,127,12,
		127,3081,9,127,1,127,1,127,5,127,3085,8,127,10,127,12,127,3088,9,127,1,
		127,1,127,5,127,3092,8,127,10,127,12,127,3095,9,127,5,127,3097,8,127,10,
		127,12,127,3100,9,127,1,127,5,127,3103,8,127,10,127,12,127,3106,9,127,
		1,127,1,127,1,128,1,128,5,128,3112,8,128,10,128,12,128,3115,9,128,1,128,
		1,128,5,128,3119,8,128,10,128,12,128,3122,9,128,1,128,5,128,3125,8,128,
		10,128,12,128,3128,9,128,1,128,5,128,3131,8,128,10,128,12,128,3134,9,128,
		1,128,3,128,3137,8,128,1,128,5,128,3140,8,128,10,128,12,128,3143,9,128,
		1,128,1,128,5,128,3147,8,128,10,128,12,128,3150,9,128,1,128,1,128,3,128,
		3154,8,128,1,128,1,128,5,128,3158,8,128,10,128,12,128,3161,9,128,1,128,
		1,128,5,128,3165,8,128,10,128,12,128,3168,9,128,1,128,1,128,3,128,3172,
		8,128,3,128,3174,8,128,1,129,1,129,1,129,3,129,3179,8,129,1,130,1,130,
		5,130,3183,8,130,10,130,12,130,3186,9,130,1,130,1,130,1,131,1,131,5,131,
		3192,8,131,10,131,12,131,3195,9,131,1,131,1,131,1,132,1,132,5,132,3201,
		8,132,10,132,12,132,3204,9,132,1,132,1,132,5,132,3208,8,132,10,132,12,
		132,3211,9,132,1,132,4,132,3214,8,132,11,132,12,132,3215,1,132,5,132,3219,
		8,132,10,132,12,132,3222,9,132,1,132,3,132,3225,8,132,1,132,5,132,3228,
		8,132,10,132,12,132,3231,9,132,1,132,3,132,3234,8,132,1,133,1,133,5,133,
		3238,8,133,10,133,12,133,3241,9,133,1,133,1,133,5,133,3245,8,133,10,133,
		12,133,3248,9,133,1,133,1,133,1,133,1,133,5,133,3254,8,133,10,133,12,133,
		3257,9,133,1,133,3,133,3260,8,133,1,133,1,133,5,133,3264,8,133,10,133,
		12,133,3267,9,133,1,133,1,133,1,134,1,134,5,134,3273,8,134,10,134,12,134,
		3276,9,134,1,134,1,134,1,135,1,135,5,135,3282,8,135,10,135,12,135,3285,
		9,135,1,135,1,135,1,135,3,135,3290,8,135,1,135,1,135,1,135,1,135,3,135,
		3296,8,135,1,136,3,136,3299,8,136,1,136,1,136,5,136,3303,8,136,10,136,
		12,136,3306,9,136,1,136,1,136,3,136,3310,8,136,1,137,1,137,1,138,1,138,
		1,139,1,139,1,140,1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,144,1,144,
		1,145,1,145,1,145,1,145,1,145,3,145,3333,8,145,1,146,1,146,1,146,1,146,
		3,146,3339,8,146,1,147,1,147,1,148,5,148,3344,8,148,10,148,12,148,3347,
		9,148,1,148,1,148,5,148,3351,8,148,10,148,12,148,3354,9,148,1,148,1,148,
		3,148,3358,8,148,1,149,1,149,1,149,1,150,1,150,4,150,3365,8,150,11,150,
		12,150,3366,1,151,1,151,4,151,3371,8,151,11,151,12,151,3372,1,152,1,152,
		1,152,1,152,1,152,1,152,1,152,1,152,3,152,3383,8,152,1,152,5,152,3386,
		8,152,10,152,12,152,3389,9,152,1,153,4,153,3392,8,153,11,153,12,153,3393,
		1,154,1,154,1,154,5,154,3399,8,154,10,154,12,154,3402,9,154,3,154,3404,
		8,154,1,155,1,155,1,156,1,156,1,157,1,157,1,158,1,158,1,159,4,159,3415,
		8,159,11,159,12,159,3416,1,160,1,160,5,160,3421,8,160,10,160,12,160,3424,
		9,160,1,160,1,160,5,160,3428,8,160,10,160,12,160,3431,9,160,1,160,3,160,
		3434,8,160,1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,
		1,166,1,166,1,167,1,167,3,167,3450,8,167,1,167,5,167,3453,8,167,10,167,
		12,167,3456,9,167,1,168,1,168,5,168,3460,8,168,10,168,12,168,3463,9,168,
		1,168,1,168,3,168,3467,8,168,1,168,1,168,1,169,1,169,5,169,3473,8,169,
		10,169,12,169,3476,9,169,1,169,1,169,3,169,3480,8,169,1,169,1,169,4,169,
		3484,8,169,11,169,12,169,3485,1,169,1,169,1,170,1,170,1,170,5,170,3493,
		8,170,10,170,12,170,3496,9,170,1,170,1,170,1,171,1,171,3,171,3502,8,171,
		1,172,1,172,1,173,1,173,5,173,3508,8,173,10,173,12,173,3511,9,173,1,173,
		1,173,5,173,3515,8,173,10,173,12,173,3518,9,173,1,173,0,0,174,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
		246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
		282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
		318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,0,31,2,0,41,
		41,43,43,1,0,78,79,1,0,85,86,1,0,45,46,1,0,41,42,2,0,5,5,27,27,1,0,36,
		37,2,0,137,137,140,147,1,0,161,163,1,0,166,168,2,0,61,61,85,85,2,0,58,
		58,99,99,1,0,29,33,2,0,51,52,54,55,1,0,47,50,2,0,104,104,106,106,2,0,103,
		103,105,105,1,0,18,19,1,0,15,17,2,0,53,53,102,102,1,0,24,25,1,0,113,118,
		2,0,125,125,130,130,1,0,109,112,2,0,104,104,107,107,1,0,119,124,1,0,126,
		128,1,0,131,133,1,0,135,136,1,0,64,71,7,0,63,71,73,73,81,84,88,88,93,94,
		107,136,148,148,3945,0,349,1,0,0,0,2,374,1,0,0,0,4,400,1,0,0,0,6,406,1,
		0,0,0,8,443,1,0,0,0,10,448,1,0,0,0,12,451,1,0,0,0,14,461,1,0,0,0,16,464,
		1,0,0,0,18,469,1,0,0,0,20,508,1,0,0,0,22,511,1,0,0,0,24,602,1,0,0,0,26,
		606,1,0,0,0,28,622,1,0,0,0,30,669,1,0,0,0,32,705,1,0,0,0,34,737,1,0,0,
		0,36,739,1,0,0,0,38,751,1,0,0,0,40,764,1,0,0,0,42,781,1,0,0,0,44,826,1,
		0,0,0,46,851,1,0,0,0,48,881,1,0,0,0,50,906,1,0,0,0,52,913,1,0,0,0,54,915,
		1,0,0,0,56,925,1,0,0,0,58,978,1,0,0,0,60,1025,1,0,0,0,62,1045,1,0,0,0,
		64,1131,1,0,0,0,66,1136,1,0,0,0,68,1162,1,0,0,0,70,1207,1,0,0,0,72,1321,
		1,0,0,0,74,1331,1,0,0,0,76,1374,1,0,0,0,78,1433,1,0,0,0,80,1480,1,0,0,
		0,82,1499,1,0,0,0,84,1516,1,0,0,0,86,1533,1,0,0,0,88,1569,1,0,0,0,90,1604,
		1,0,0,0,92,1613,1,0,0,0,94,1647,1,0,0,0,96,1683,1,0,0,0,98,1705,1,0,0,
		0,100,1716,1,0,0,0,102,1720,1,0,0,0,104,1733,1,0,0,0,106,1735,1,0,0,0,
		108,1755,1,0,0,0,110,1770,1,0,0,0,112,1773,1,0,0,0,114,1785,1,0,0,0,116,
		1801,1,0,0,0,118,1819,1,0,0,0,120,1869,1,0,0,0,122,1886,1,0,0,0,124,1893,
		1,0,0,0,126,1913,1,0,0,0,128,1948,1,0,0,0,130,1957,1,0,0,0,132,1966,1,
		0,0,0,134,1976,1,0,0,0,136,1978,1,0,0,0,138,1997,1,0,0,0,140,1999,1,0,
		0,0,142,2029,1,0,0,0,144,2049,1,0,0,0,146,2082,1,0,0,0,148,2092,1,0,0,
		0,150,2100,1,0,0,0,152,2104,1,0,0,0,154,2106,1,0,0,0,156,2126,1,0,0,0,
		158,2146,1,0,0,0,160,2161,1,0,0,0,162,2176,1,0,0,0,164,2183,1,0,0,0,166,
		2207,1,0,0,0,168,2228,1,0,0,0,170,2231,1,0,0,0,172,2246,1,0,0,0,174,2260,
		1,0,0,0,176,2275,1,0,0,0,178,2290,1,0,0,0,180,2314,1,0,0,0,182,2328,1,
		0,0,0,184,2330,1,0,0,0,186,2342,1,0,0,0,188,2349,1,0,0,0,190,2351,1,0,
		0,0,192,2369,1,0,0,0,194,2371,1,0,0,0,196,2390,1,0,0,0,198,2392,1,0,0,
		0,200,2436,1,0,0,0,202,2449,1,0,0,0,204,2461,1,0,0,0,206,2475,1,0,0,0,
		208,2519,1,0,0,0,210,2566,1,0,0,0,212,2615,1,0,0,0,214,2617,1,0,0,0,216,
		2633,1,0,0,0,218,2679,1,0,0,0,220,2683,1,0,0,0,222,2685,1,0,0,0,224,2695,
		1,0,0,0,226,2706,1,0,0,0,228,2708,1,0,0,0,230,2724,1,0,0,0,232,2726,1,
		0,0,0,234,2742,1,0,0,0,236,2776,1,0,0,0,238,2823,1,0,0,0,240,2826,1,0,
		0,0,242,2895,1,0,0,0,244,2898,1,0,0,0,246,2938,1,0,0,0,248,2964,1,0,0,
		0,250,2966,1,0,0,0,252,3027,1,0,0,0,254,3066,1,0,0,0,256,3173,1,0,0,0,
		258,3178,1,0,0,0,260,3180,1,0,0,0,262,3189,1,0,0,0,264,3198,1,0,0,0,266,
		3235,1,0,0,0,268,3270,1,0,0,0,270,3295,1,0,0,0,272,3298,1,0,0,0,274,3311,
		1,0,0,0,276,3313,1,0,0,0,278,3315,1,0,0,0,280,3317,1,0,0,0,282,3319,1,
		0,0,0,284,3321,1,0,0,0,286,3323,1,0,0,0,288,3325,1,0,0,0,290,3332,1,0,
		0,0,292,3338,1,0,0,0,294,3340,1,0,0,0,296,3357,1,0,0,0,298,3359,1,0,0,
		0,300,3364,1,0,0,0,302,3370,1,0,0,0,304,3382,1,0,0,0,306,3391,1,0,0,0,
		308,3403,1,0,0,0,310,3405,1,0,0,0,312,3407,1,0,0,0,314,3409,1,0,0,0,316,
		3411,1,0,0,0,318,3414,1,0,0,0,320,3433,1,0,0,0,322,3435,1,0,0,0,324,3437,
		1,0,0,0,326,3439,1,0,0,0,328,3441,1,0,0,0,330,3443,1,0,0,0,332,3445,1,
		0,0,0,334,3449,1,0,0,0,336,3466,1,0,0,0,338,3479,1,0,0,0,340,3489,1,0,
		0,0,342,3501,1,0,0,0,344,3503,1,0,0,0,346,3505,1,0,0,0,348,350,3,4,2,0,
		349,348,1,0,0,0,349,350,1,0,0,0,350,354,1,0,0,0,351,353,5,5,0,0,352,351,
		1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,360,1,0,0,
		0,356,354,1,0,0,0,357,359,3,6,3,0,358,357,1,0,0,0,359,362,1,0,0,0,360,
		358,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,364,3,
		8,4,0,364,368,3,10,5,0,365,367,3,16,8,0,366,365,1,0,0,0,367,370,1,0,0,
		0,368,366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,
		372,5,0,0,1,372,1,1,0,0,0,373,375,3,4,2,0,374,373,1,0,0,0,374,375,1,0,
		0,0,375,379,1,0,0,0,376,378,5,5,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,
		377,1,0,0,0,379,380,1,0,0,0,380,385,1,0,0,0,381,379,1,0,0,0,382,384,3,
		6,3,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,
		386,388,1,0,0,0,387,385,1,0,0,0,388,389,3,8,4,0,389,395,3,10,5,0,390,391,
		3,130,65,0,391,392,3,148,74,0,392,394,1,0,0,0,393,390,1,0,0,0,394,397,
		1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,
		0,398,399,5,0,0,1,399,3,1,0,0,0,400,402,5,1,0,0,401,403,5,5,0,0,402,401,
		1,0,0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,5,1,0,0,0,
		406,407,7,0,0,0,407,411,5,63,0,0,408,410,5,5,0,0,409,408,1,0,0,0,410,413,
		1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,
		0,414,418,5,26,0,0,415,417,5,5,0,0,416,415,1,0,0,0,417,420,1,0,0,0,418,
		416,1,0,0,0,418,419,1,0,0,0,419,430,1,0,0,0,420,418,1,0,0,0,421,423,5,
		11,0,0,422,424,3,342,171,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,
		0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,428,5,12,0,0,428,431,1,0,0,0,429,
		431,3,342,171,0,430,421,1,0,0,0,430,429,1,0,0,0,431,435,1,0,0,0,432,434,
		5,5,0,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,
		0,436,7,1,0,0,0,437,435,1,0,0,0,438,439,5,72,0,0,439,441,3,346,173,0,440,
		442,3,148,74,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,438,
		1,0,0,0,443,444,1,0,0,0,444,9,1,0,0,0,445,447,3,12,6,0,446,445,1,0,0,0,
		447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,11,1,0,0,0,450,448,
		1,0,0,0,451,452,5,73,0,0,452,456,3,346,173,0,453,454,5,7,0,0,454,457,5,
		15,0,0,455,457,3,14,7,0,456,453,1,0,0,0,456,455,1,0,0,0,456,457,1,0,0,
		0,457,459,1,0,0,0,458,460,3,148,74,0,459,458,1,0,0,0,459,460,1,0,0,0,460,
		13,1,0,0,0,461,462,5,102,0,0,462,463,3,344,172,0,463,15,1,0,0,0,464,466,
		3,20,10,0,465,467,3,150,75,0,466,465,1,0,0,0,466,467,1,0,0,0,467,17,1,
		0,0,0,468,470,3,300,150,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,
		0,0,471,475,5,80,0,0,472,474,5,5,0,0,473,472,1,0,0,0,474,477,1,0,0,0,475,
		473,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,486,3,
		344,172,0,479,481,5,5,0,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,
		0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,487,3,42,21,0,
		486,482,1,0,0,0,486,487,1,0,0,0,487,491,1,0,0,0,488,490,5,5,0,0,489,488,
		1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,494,1,0,0,
		0,493,491,1,0,0,0,494,498,5,28,0,0,495,497,5,5,0,0,496,495,1,0,0,0,497,
		500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,498,1,
		0,0,0,501,502,3,98,49,0,502,19,1,0,0,0,503,509,3,22,11,0,504,509,3,86,
		43,0,505,509,3,62,31,0,506,509,3,70,35,0,507,509,3,18,9,0,508,503,1,0,
		0,0,508,504,1,0,0,0,508,505,1,0,0,0,508,506,1,0,0,0,508,507,1,0,0,0,509,
		21,1,0,0,0,510,512,3,300,150,0,511,510,1,0,0,0,511,512,1,0,0,0,512,524,
		1,0,0,0,513,525,5,74,0,0,514,518,5,76,0,0,515,517,5,5,0,0,516,515,1,0,
		0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,522,1,0,0,0,520,
		518,1,0,0,0,521,514,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,525,5,
		75,0,0,524,513,1,0,0,0,524,521,1,0,0,0,525,529,1,0,0,0,526,528,5,5,0,0,
		527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,532,
		1,0,0,0,531,529,1,0,0,0,532,540,3,344,172,0,533,535,5,5,0,0,534,533,1,
		0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,
		538,536,1,0,0,0,539,541,3,42,21,0,540,536,1,0,0,0,540,541,1,0,0,0,541,
		549,1,0,0,0,542,544,5,5,0,0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,1,
		0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,545,1,0,0,0,548,550,3,24,12,
		0,549,545,1,0,0,0,549,550,1,0,0,0,550,565,1,0,0,0,551,553,5,5,0,0,552,
		551,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,557,1,
		0,0,0,556,554,1,0,0,0,557,561,5,26,0,0,558,560,5,5,0,0,559,558,1,0,0,0,
		560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,561,
		1,0,0,0,564,566,3,32,16,0,565,554,1,0,0,0,565,566,1,0,0,0,566,574,1,0,
		0,0,567,569,5,5,0,0,568,567,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,
		571,1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,575,3,46,23,0,574,570,
		1,0,0,0,574,575,1,0,0,0,575,590,1,0,0,0,576,578,5,5,0,0,577,576,1,0,0,
		0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,
		579,1,0,0,0,582,591,3,26,13,0,583,585,5,5,0,0,584,583,1,0,0,0,585,588,
		1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,
		0,589,591,3,92,46,0,590,579,1,0,0,0,590,586,1,0,0,0,590,591,1,0,0,0,591,
		23,1,0,0,0,592,594,3,300,150,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,
		1,0,0,0,595,599,5,81,0,0,596,598,5,5,0,0,597,596,1,0,0,0,598,601,1,0,0,
		0,599,597,1,0,0,0,599,600,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,602,
		593,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,3,28,14,0,605,25,1,
		0,0,0,606,610,5,13,0,0,607,609,5,5,0,0,608,607,1,0,0,0,609,612,1,0,0,0,
		610,608,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,610,1,0,0,0,613,617,
		3,50,25,0,614,616,5,5,0,0,615,614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,
		0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,617,1,0,0,0,620,621,5,14,0,0,621,
		27,1,0,0,0,622,626,5,9,0,0,623,625,5,5,0,0,624,623,1,0,0,0,625,628,1,0,
		0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,658,1,0,0,0,628,626,1,0,0,0,629,
		646,3,30,15,0,630,632,5,5,0,0,631,630,1,0,0,0,632,635,1,0,0,0,633,631,
		1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,633,1,0,0,0,636,640,5,8,0,
		0,637,639,5,5,0,0,638,637,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,
		641,1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,645,3,30,15,0,644,633,
		1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,656,1,0,0,
		0,648,646,1,0,0,0,649,651,5,5,0,0,650,649,1,0,0,0,651,654,1,0,0,0,652,
		650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,652,1,0,0,0,655,657,5,
		8,0,0,656,652,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,629,1,0,0,0,
		658,659,1,0,0,0,659,663,1,0,0,0,660,662,5,5,0,0,661,660,1,0,0,0,662,665,
		1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,
		0,666,667,5,10,0,0,667,29,1,0,0,0,668,670,3,300,150,0,669,668,1,0,0,0,
		669,670,1,0,0,0,670,672,1,0,0,0,671,673,7,1,0,0,672,671,1,0,0,0,672,673,
		1,0,0,0,673,677,1,0,0,0,674,676,5,5,0,0,675,674,1,0,0,0,676,679,1,0,0,
		0,677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,0,680,
		681,3,344,172,0,681,685,5,26,0,0,682,684,5,5,0,0,683,682,1,0,0,0,684,687,
		1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,685,1,0,0,
		0,688,703,3,98,49,0,689,691,5,5,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,
		690,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,692,1,0,0,0,695,699,5,
		28,0,0,696,698,5,5,0,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,
		699,700,1,0,0,0,700,702,1,0,0,0,701,699,1,0,0,0,702,704,3,152,76,0,703,
		692,1,0,0,0,703,704,1,0,0,0,704,31,1,0,0,0,705,722,3,38,19,0,706,708,5,
		5,0,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,
		710,712,1,0,0,0,711,709,1,0,0,0,712,716,5,8,0,0,713,715,5,5,0,0,714,713,
		1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,717,719,1,0,0,
		0,718,716,1,0,0,0,719,721,3,38,19,0,720,709,1,0,0,0,721,724,1,0,0,0,722,
		720,1,0,0,0,722,723,1,0,0,0,723,33,1,0,0,0,724,722,1,0,0,0,725,738,3,36,
		18,0,726,738,3,40,20,0,727,738,3,106,53,0,728,738,3,116,58,0,729,733,5,
		124,0,0,730,732,5,5,0,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,
		0,733,734,1,0,0,0,734,736,1,0,0,0,735,733,1,0,0,0,736,738,3,116,58,0,737,
		725,1,0,0,0,737,726,1,0,0,0,737,727,1,0,0,0,737,728,1,0,0,0,737,729,1,
		0,0,0,738,35,1,0,0,0,739,743,3,106,53,0,740,742,5,5,0,0,741,740,1,0,0,
		0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,
		743,1,0,0,0,746,747,3,208,104,0,747,37,1,0,0,0,748,750,3,334,167,0,749,
		748,1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,757,1,
		0,0,0,753,751,1,0,0,0,754,756,5,5,0,0,755,754,1,0,0,0,756,759,1,0,0,0,
		757,755,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,757,1,0,0,0,760,761,
		3,34,17,0,761,39,1,0,0,0,762,765,3,106,53,0,763,765,3,116,58,0,764,762,
		1,0,0,0,764,763,1,0,0,0,765,769,1,0,0,0,766,768,5,5,0,0,767,766,1,0,0,
		0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,772,1,0,0,0,771,
		769,1,0,0,0,772,776,5,82,0,0,773,775,5,5,0,0,774,773,1,0,0,0,775,778,1,
		0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,
		779,780,3,152,76,0,780,41,1,0,0,0,781,785,5,47,0,0,782,784,5,5,0,0,783,
		782,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,788,1,
		0,0,0,787,785,1,0,0,0,788,805,3,44,22,0,789,791,5,5,0,0,790,789,1,0,0,
		0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,
		792,1,0,0,0,795,799,5,8,0,0,796,798,5,5,0,0,797,796,1,0,0,0,798,801,1,
		0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,802,1,0,0,0,801,799,1,0,0,0,
		802,804,3,44,22,0,803,792,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,
		806,1,0,0,0,806,815,1,0,0,0,807,805,1,0,0,0,808,810,5,5,0,0,809,808,1,
		0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,
		813,811,1,0,0,0,814,816,5,8,0,0,815,811,1,0,0,0,815,816,1,0,0,0,816,820,
		1,0,0,0,817,819,5,5,0,0,818,817,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,
		0,820,821,1,0,0,0,821,823,1,0,0,0,822,820,1,0,0,0,823,824,5,48,0,0,824,
		43,1,0,0,0,825,827,3,318,159,0,826,825,1,0,0,0,826,827,1,0,0,0,827,831,
		1,0,0,0,828,830,5,5,0,0,829,828,1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,
		0,831,832,1,0,0,0,832,834,1,0,0,0,833,831,1,0,0,0,834,849,3,344,172,0,
		835,837,5,5,0,0,836,835,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,839,
		1,0,0,0,839,841,1,0,0,0,840,838,1,0,0,0,841,845,5,26,0,0,842,844,5,5,0,
		0,843,842,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,845,846,1,0,0,0,846,
		848,1,0,0,0,847,845,1,0,0,0,848,850,3,98,49,0,849,838,1,0,0,0,849,850,
		1,0,0,0,850,45,1,0,0,0,851,855,5,88,0,0,852,854,5,5,0,0,853,852,1,0,0,
		0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,
		855,1,0,0,0,858,875,3,48,24,0,859,861,5,5,0,0,860,859,1,0,0,0,861,864,
		1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,862,1,0,0,
		0,865,869,5,8,0,0,866,868,5,5,0,0,867,866,1,0,0,0,868,871,1,0,0,0,869,
		867,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,869,1,0,0,0,872,874,3,
		48,24,0,873,862,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,
		0,876,47,1,0,0,0,877,875,1,0,0,0,878,880,3,334,167,0,879,878,1,0,0,0,880,
		883,1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,884,1,0,0,0,883,881,1,
		0,0,0,884,888,3,344,172,0,885,887,5,5,0,0,886,885,1,0,0,0,887,890,1,0,
		0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,891,1,0,0,0,890,888,1,0,0,0,891,
		895,5,26,0,0,892,894,5,5,0,0,893,892,1,0,0,0,894,897,1,0,0,0,895,893,1,
		0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,895,1,0,0,0,898,899,3,98,49,
		0,899,49,1,0,0,0,900,902,3,52,26,0,901,903,3,150,75,0,902,901,1,0,0,0,
		902,903,1,0,0,0,903,905,1,0,0,0,904,900,1,0,0,0,905,908,1,0,0,0,906,904,
		1,0,0,0,906,907,1,0,0,0,907,51,1,0,0,0,908,906,1,0,0,0,909,914,3,20,10,
		0,910,914,3,56,28,0,911,914,3,54,27,0,912,914,3,88,44,0,913,909,1,0,0,
		0,913,910,1,0,0,0,913,911,1,0,0,0,913,912,1,0,0,0,914,53,1,0,0,0,915,919,
		5,84,0,0,916,918,5,5,0,0,917,916,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,
		0,919,920,1,0,0,0,920,922,1,0,0,0,921,919,1,0,0,0,922,923,3,136,68,0,923,
		55,1,0,0,0,924,926,3,300,150,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,
		1,0,0,0,927,931,5,83,0,0,928,930,5,5,0,0,929,928,1,0,0,0,930,933,1,0,0,
		0,931,929,1,0,0,0,931,932,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,0,934,
		936,5,116,0,0,935,934,1,0,0,0,935,936,1,0,0,0,936,940,1,0,0,0,937,939,
		5,5,0,0,938,937,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,
		0,941,943,1,0,0,0,942,940,1,0,0,0,943,951,5,77,0,0,944,946,5,5,0,0,945,
		944,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,950,1,
		0,0,0,949,947,1,0,0,0,950,952,3,344,172,0,951,947,1,0,0,0,951,952,1,0,
		0,0,952,967,1,0,0,0,953,955,5,5,0,0,954,953,1,0,0,0,955,958,1,0,0,0,956,
		954,1,0,0,0,956,957,1,0,0,0,957,959,1,0,0,0,958,956,1,0,0,0,959,963,5,
		26,0,0,960,962,5,5,0,0,961,960,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,
		963,964,1,0,0,0,964,966,1,0,0,0,965,963,1,0,0,0,966,968,3,32,16,0,967,
		956,1,0,0,0,967,968,1,0,0,0,968,976,1,0,0,0,969,971,5,5,0,0,970,969,1,
		0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,
		974,972,1,0,0,0,975,977,3,26,13,0,976,972,1,0,0,0,976,977,1,0,0,0,977,
		57,1,0,0,0,978,982,5,9,0,0,979,981,5,5,0,0,980,979,1,0,0,0,981,984,1,0,
		0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,1014,1,0,0,0,984,982,1,0,0,0,985,
		1002,3,60,30,0,986,988,5,5,0,0,987,986,1,0,0,0,988,991,1,0,0,0,989,987,
		1,0,0,0,989,990,1,0,0,0,990,992,1,0,0,0,991,989,1,0,0,0,992,996,5,8,0,
		0,993,995,5,5,0,0,994,993,1,0,0,0,995,998,1,0,0,0,996,994,1,0,0,0,996,
		997,1,0,0,0,997,999,1,0,0,0,998,996,1,0,0,0,999,1001,3,60,30,0,1000,989,
		1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1012,
		1,0,0,0,1004,1002,1,0,0,0,1005,1007,5,5,0,0,1006,1005,1,0,0,0,1007,1010,
		1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,0,0,1010,1008,
		1,0,0,0,1011,1013,5,8,0,0,1012,1008,1,0,0,0,1012,1013,1,0,0,0,1013,1015,
		1,0,0,0,1014,985,1,0,0,0,1014,1015,1,0,0,0,1015,1019,1,0,0,0,1016,1018,
		5,5,0,0,1017,1016,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,0,0,1019,1020,
		1,0,0,0,1020,1022,1,0,0,0,1021,1019,1,0,0,0,1022,1023,5,10,0,0,1023,59,
		1,0,0,0,1024,1026,3,302,151,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,
		1027,1,0,0,0,1027,1042,3,84,42,0,1028,1030,5,5,0,0,1029,1028,1,0,0,0,1030,
		1033,1,0,0,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1034,1,0,0,0,1033,
		1031,1,0,0,0,1034,1038,5,28,0,0,1035,1037,5,5,0,0,1036,1035,1,0,0,0,1037,
		1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,1041,1,0,0,0,1040,
		1038,1,0,0,0,1041,1043,3,152,76,0,1042,1031,1,0,0,0,1042,1043,1,0,0,0,
		1043,61,1,0,0,0,1044,1046,3,300,150,0,1045,1044,1,0,0,0,1045,1046,1,0,
		0,0,1046,1047,1,0,0,0,1047,1055,5,76,0,0,1048,1050,5,5,0,0,1049,1048,1,
		0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,1054,
		1,0,0,0,1053,1051,1,0,0,0,1054,1056,3,42,21,0,1055,1051,1,0,0,0,1055,1056,
		1,0,0,0,1056,1072,1,0,0,0,1057,1059,5,5,0,0,1058,1057,1,0,0,0,1059,1062,
		1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,1060,
		1,0,0,0,1063,1067,3,122,61,0,1064,1066,5,5,0,0,1065,1064,1,0,0,0,1066,
		1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1070,1,0,0,0,1069,
		1067,1,0,0,0,1070,1071,5,7,0,0,1071,1073,1,0,0,0,1072,1060,1,0,0,0,1072,
		1073,1,0,0,0,1073,1077,1,0,0,0,1074,1076,5,5,0,0,1075,1074,1,0,0,0,1076,
		1079,1,0,0,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,1080,1,0,0,0,1079,
		1077,1,0,0,0,1080,1084,3,344,172,0,1081,1083,5,5,0,0,1082,1081,1,0,0,0,
		1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,1087,1,0,0,
		0,1086,1084,1,0,0,0,1087,1102,3,58,29,0,1088,1090,5,5,0,0,1089,1088,1,
		0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,
		1,0,0,0,1093,1091,1,0,0,0,1094,1098,5,26,0,0,1095,1097,5,5,0,0,1096,1095,
		1,0,0,0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,1101,
		1,0,0,0,1100,1098,1,0,0,0,1101,1103,3,98,49,0,1102,1091,1,0,0,0,1102,1103,
		1,0,0,0,1103,1111,1,0,0,0,1104,1106,5,5,0,0,1105,1104,1,0,0,0,1106,1109,
		1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1110,1,0,0,0,1109,1107,
		1,0,0,0,1110,1112,3,46,23,0,1111,1107,1,0,0,0,1111,1112,1,0,0,0,1112,1120,
		1,0,0,0,1113,1115,5,5,0,0,1114,1113,1,0,0,0,1115,1118,1,0,0,0,1116,1114,
		1,0,0,0,1116,1117,1,0,0,0,1117,1119,1,0,0,0,1118,1116,1,0,0,0,1119,1121,
		3,64,32,0,1120,1116,1,0,0,0,1120,1121,1,0,0,0,1121,63,1,0,0,0,1122,1132,
		3,136,68,0,1123,1127,5,28,0,0,1124,1126,5,5,0,0,1125,1124,1,0,0,0,1126,
		1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,0,0,0,1129,
		1127,1,0,0,0,1130,1132,3,152,76,0,1131,1122,1,0,0,0,1131,1123,1,0,0,0,
		1132,65,1,0,0,0,1133,1135,3,334,167,0,1134,1133,1,0,0,0,1135,1138,1,0,
		0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1142,1,0,0,0,1138,1136,1,
		0,0,0,1139,1141,5,5,0,0,1140,1139,1,0,0,0,1141,1144,1,0,0,0,1142,1140,
		1,0,0,0,1142,1143,1,0,0,0,1143,1145,1,0,0,0,1144,1142,1,0,0,0,1145,1160,
		3,344,172,0,1146,1148,5,5,0,0,1147,1146,1,0,0,0,1148,1151,1,0,0,0,1149,
		1147,1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,0,1151,1149,1,0,0,0,1152,
		1156,5,26,0,0,1153,1155,5,5,0,0,1154,1153,1,0,0,0,1155,1158,1,0,0,0,1156,
		1154,1,0,0,0,1156,1157,1,0,0,0,1157,1159,1,0,0,0,1158,1156,1,0,0,0,1159,
		1161,3,98,49,0,1160,1149,1,0,0,0,1160,1161,1,0,0,0,1161,67,1,0,0,0,1162,
		1166,5,9,0,0,1163,1165,5,5,0,0,1164,1163,1,0,0,0,1165,1168,1,0,0,0,1166,
		1164,1,0,0,0,1166,1167,1,0,0,0,1167,1169,1,0,0,0,1168,1166,1,0,0,0,1169,
		1186,3,66,33,0,1170,1172,5,5,0,0,1171,1170,1,0,0,0,1172,1175,1,0,0,0,1173,
		1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,1173,1,0,0,0,1176,
		1180,5,8,0,0,1177,1179,5,5,0,0,1178,1177,1,0,0,0,1179,1182,1,0,0,0,1180,
		1178,1,0,0,0,1180,1181,1,0,0,0,1181,1183,1,0,0,0,1182,1180,1,0,0,0,1183,
		1185,3,66,33,0,1184,1173,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,
		1187,1,0,0,0,1187,1196,1,0,0,0,1188,1186,1,0,0,0,1189,1191,5,5,0,0,1190,
		1189,1,0,0,0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,
		1195,1,0,0,0,1194,1192,1,0,0,0,1195,1197,5,8,0,0,1196,1192,1,0,0,0,1196,
		1197,1,0,0,0,1197,1201,1,0,0,0,1198,1200,5,5,0,0,1199,1198,1,0,0,0,1200,
		1203,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1204,1,0,0,0,1203,
		1201,1,0,0,0,1204,1205,5,10,0,0,1205,69,1,0,0,0,1206,1208,3,300,150,0,
		1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1217,7,1,0,
		0,1210,1212,5,5,0,0,1211,1210,1,0,0,0,1212,1215,1,0,0,0,1213,1211,1,0,
		0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,1215,1213,1,0,0,0,1216,1218,3,
		42,21,0,1217,1213,1,0,0,0,1217,1218,1,0,0,0,1218,1234,1,0,0,0,1219,1221,
		5,5,0,0,1220,1219,1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,
		1,0,0,0,1223,1225,1,0,0,0,1224,1222,1,0,0,0,1225,1229,3,122,61,0,1226,
		1228,5,5,0,0,1227,1226,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,
		1230,1,0,0,0,1230,1232,1,0,0,0,1231,1229,1,0,0,0,1232,1233,5,7,0,0,1233,
		1235,1,0,0,0,1234,1222,1,0,0,0,1234,1235,1,0,0,0,1235,1239,1,0,0,0,1236,
		1238,5,5,0,0,1237,1236,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,1239,
		1240,1,0,0,0,1240,1244,1,0,0,0,1241,1239,1,0,0,0,1242,1245,3,68,34,0,1243,
		1245,3,66,33,0,1244,1242,1,0,0,0,1244,1243,1,0,0,0,1245,1253,1,0,0,0,1246,
		1248,5,5,0,0,1247,1246,1,0,0,0,1248,1251,1,0,0,0,1249,1247,1,0,0,0,1249,
		1250,1,0,0,0,1250,1252,1,0,0,0,1251,1249,1,0,0,0,1252,1254,3,46,23,0,1253,
		1249,1,0,0,0,1253,1254,1,0,0,0,1254,1272,1,0,0,0,1255,1257,5,5,0,0,1256,
		1255,1,0,0,0,1257,1260,1,0,0,0,1258,1256,1,0,0,0,1258,1259,1,0,0,0,1259,
		1270,1,0,0,0,1260,1258,1,0,0,0,1261,1265,5,28,0,0,1262,1264,5,5,0,0,1263,
		1262,1,0,0,0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,
		1268,1,0,0,0,1267,1265,1,0,0,0,1268,1271,3,152,76,0,1269,1271,3,72,36,
		0,1270,1261,1,0,0,0,1270,1269,1,0,0,0,1271,1273,1,0,0,0,1272,1258,1,0,
		0,0,1272,1273,1,0,0,0,1273,1281,1,0,0,0,1274,1276,5,5,0,0,1275,1274,1,
		0,0,0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,1280,
		1,0,0,0,1279,1277,1,0,0,0,1280,1282,5,27,0,0,1281,1277,1,0,0,0,1281,1282,
		1,0,0,0,1282,1286,1,0,0,0,1283,1285,5,5,0,0,1284,1283,1,0,0,0,1285,1288,
		1,0,0,0,1286,1284,1,0,0,0,1286,1287,1,0,0,0,1287,1319,1,0,0,0,1288,1286,
		1,0,0,0,1289,1291,3,74,37,0,1290,1289,1,0,0,0,1290,1291,1,0,0,0,1291,1302,
		1,0,0,0,1292,1294,5,5,0,0,1293,1292,1,0,0,0,1294,1297,1,0,0,0,1295,1293,
		1,0,0,0,1295,1296,1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,0,1298,1300,
		3,148,74,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,
		1303,3,76,38,0,1302,1295,1,0,0,0,1302,1303,1,0,0,0,1303,1320,1,0,0,0,1304,
		1306,3,76,38,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1317,1,0,0,0,1307,
		1309,5,5,0,0,1308,1307,1,0,0,0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1310,
		1311,1,0,0,0,1311,1314,1,0,0,0,1312,1310,1,0,0,0,1313,1315,3,148,74,0,
		1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1318,3,74,37,
		0,1317,1310,1,0,0,0,1317,1318,1,0,0,0,1318,1320,1,0,0,0,1319,1290,1,0,
		0,0,1319,1305,1,0,0,0,1320,71,1,0,0,0,1321,1325,5,82,0,0,1322,1324,5,5,
		0,0,1323,1322,1,0,0,0,1324,1327,1,0,0,0,1325,1323,1,0,0,0,1325,1326,1,
		0,0,0,1326,1328,1,0,0,0,1327,1325,1,0,0,0,1328,1329,3,152,76,0,1329,73,
		1,0,0,0,1330,1332,3,300,150,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,
		1333,1,0,0,0,1333,1371,5,66,0,0,1334,1336,5,5,0,0,1335,1334,1,0,0,0,1336,
		1339,1,0,0,0,1337,1335,1,0,0,0,1337,1338,1,0,0,0,1338,1340,1,0,0,0,1339,
		1337,1,0,0,0,1340,1344,5,9,0,0,1341,1343,5,5,0,0,1342,1341,1,0,0,0,1343,
		1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,
		1344,1,0,0,0,1347,1362,5,10,0,0,1348,1350,5,5,0,0,1349,1348,1,0,0,0,1350,
		1353,1,0,0,0,1351,1349,1,0,0,0,1351,1352,1,0,0,0,1352,1354,1,0,0,0,1353,
		1351,1,0,0,0,1354,1358,5,26,0,0,1355,1357,5,5,0,0,1356,1355,1,0,0,0,1357,
		1360,1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,0,0,0,1360,
		1358,1,0,0,0,1361,1363,3,98,49,0,1362,1351,1,0,0,0,1362,1363,1,0,0,0,1363,
		1367,1,0,0,0,1364,1366,5,5,0,0,1365,1364,1,0,0,0,1366,1369,1,0,0,0,1367,
		1365,1,0,0,0,1367,1368,1,0,0,0,1368,1370,1,0,0,0,1369,1367,1,0,0,0,1370,
		1372,3,64,32,0,1371,1337,1,0,0,0,1371,1372,1,0,0,0,1372,75,1,0,0,0,1373,
		1375,3,300,150,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,
		1376,1431,5,67,0,0,1377,1379,5,5,0,0,1378,1377,1,0,0,0,1379,1382,1,0,0,
		0,1380,1378,1,0,0,0,1380,1381,1,0,0,0,1381,1383,1,0,0,0,1382,1380,1,0,
		0,0,1383,1387,5,9,0,0,1384,1386,5,5,0,0,1385,1384,1,0,0,0,1386,1389,1,
		0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1387,
		1,0,0,0,1390,1398,3,80,40,0,1391,1393,5,5,0,0,1392,1391,1,0,0,0,1393,1396,
		1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,1397,1,0,0,0,1396,1394,
		1,0,0,0,1397,1399,5,8,0,0,1398,1394,1,0,0,0,1398,1399,1,0,0,0,1399,1403,
		1,0,0,0,1400,1402,5,5,0,0,1401,1400,1,0,0,0,1402,1405,1,0,0,0,1403,1401,
		1,0,0,0,1403,1404,1,0,0,0,1404,1406,1,0,0,0,1405,1403,1,0,0,0,1406,1421,
		5,10,0,0,1407,1409,5,5,0,0,1408,1407,1,0,0,0,1409,1412,1,0,0,0,1410,1408,
		1,0,0,0,1410,1411,1,0,0,0,1411,1413,1,0,0,0,1412,1410,1,0,0,0,1413,1417,
		5,26,0,0,1414,1416,5,5,0,0,1415,1414,1,0,0,0,1416,1419,1,0,0,0,1417,1415,
		1,0,0,0,1417,1418,1,0,0,0,1418,1420,1,0,0,0,1419,1417,1,0,0,0,1420,1422,
		3,98,49,0,1421,1410,1,0,0,0,1421,1422,1,0,0,0,1422,1426,1,0,0,0,1423,1425,
		5,5,0,0,1424,1423,1,0,0,0,1425,1428,1,0,0,0,1426,1424,1,0,0,0,1426,1427,
		1,0,0,0,1427,1429,1,0,0,0,1428,1426,1,0,0,0,1429,1430,3,64,32,0,1430,1432,
		1,0,0,0,1431,1380,1,0,0,0,1431,1432,1,0,0,0,1432,77,1,0,0,0,1433,1437,
		5,9,0,0,1434,1436,5,5,0,0,1435,1434,1,0,0,0,1436,1439,1,0,0,0,1437,1435,
		1,0,0,0,1437,1438,1,0,0,0,1438,1469,1,0,0,0,1439,1437,1,0,0,0,1440,1457,
		3,80,40,0,1441,1443,5,5,0,0,1442,1441,1,0,0,0,1443,1446,1,0,0,0,1444,1442,
		1,0,0,0,1444,1445,1,0,0,0,1445,1447,1,0,0,0,1446,1444,1,0,0,0,1447,1451,
		5,8,0,0,1448,1450,5,5,0,0,1449,1448,1,0,0,0,1450,1453,1,0,0,0,1451,1449,
		1,0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,1451,1,0,0,0,1454,1456,
		3,80,40,0,1455,1444,1,0,0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,0,1457,1458,
		1,0,0,0,1458,1467,1,0,0,0,1459,1457,1,0,0,0,1460,1462,5,5,0,0,1461,1460,
		1,0,0,0,1462,1465,1,0,0,0,1463,1461,1,0,0,0,1463,1464,1,0,0,0,1464,1466,
		1,0,0,0,1465,1463,1,0,0,0,1466,1468,5,8,0,0,1467,1463,1,0,0,0,1467,1468,
		1,0,0,0,1468,1470,1,0,0,0,1469,1440,1,0,0,0,1469,1470,1,0,0,0,1470,1474,
		1,0,0,0,1471,1473,5,5,0,0,1472,1471,1,0,0,0,1473,1476,1,0,0,0,1474,1472,
		1,0,0,0,1474,1475,1,0,0,0,1475,1477,1,0,0,0,1476,1474,1,0,0,0,1477,1478,
		5,10,0,0,1478,79,1,0,0,0,1479,1481,3,302,151,0,1480,1479,1,0,0,0,1480,
		1481,1,0,0,0,1481,1482,1,0,0,0,1482,1497,3,82,41,0,1483,1485,5,5,0,0,1484,
		1483,1,0,0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,
		1489,1,0,0,0,1488,1486,1,0,0,0,1489,1493,5,28,0,0,1490,1492,5,5,0,0,1491,
		1490,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,0,1494,
		1496,1,0,0,0,1495,1493,1,0,0,0,1496,1498,3,152,76,0,1497,1486,1,0,0,0,
		1497,1498,1,0,0,0,1498,81,1,0,0,0,1499,1503,3,344,172,0,1500,1502,5,5,
		0,0,1501,1500,1,0,0,0,1502,1505,1,0,0,0,1503,1501,1,0,0,0,1503,1504,1,
		0,0,0,1504,1514,1,0,0,0,1505,1503,1,0,0,0,1506,1510,5,26,0,0,1507,1509,
		5,5,0,0,1508,1507,1,0,0,0,1509,1512,1,0,0,0,1510,1508,1,0,0,0,1510,1511,
		1,0,0,0,1511,1513,1,0,0,0,1512,1510,1,0,0,0,1513,1515,3,98,49,0,1514,1506,
		1,0,0,0,1514,1515,1,0,0,0,1515,83,1,0,0,0,1516,1520,3,344,172,0,1517,1519,
		5,5,0,0,1518,1517,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,1521,
		1,0,0,0,1521,1523,1,0,0,0,1522,1520,1,0,0,0,1523,1527,5,26,0,0,1524,1526,
		5,5,0,0,1525,1524,1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1527,1528,
		1,0,0,0,1528,1530,1,0,0,0,1529,1527,1,0,0,0,1530,1531,3,98,49,0,1531,85,
		1,0,0,0,1532,1534,3,300,150,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,
		1535,1,0,0,0,1535,1539,5,77,0,0,1536,1538,5,5,0,0,1537,1536,1,0,0,0,1538,
		1541,1,0,0,0,1539,1537,1,0,0,0,1539,1540,1,0,0,0,1540,1542,1,0,0,0,1541,
		1539,1,0,0,0,1542,1557,3,344,172,0,1543,1545,5,5,0,0,1544,1543,1,0,0,0,
		1545,1548,1,0,0,0,1546,1544,1,0,0,0,1546,1547,1,0,0,0,1547,1549,1,0,0,
		0,1548,1546,1,0,0,0,1549,1553,5,26,0,0,1550,1552,5,5,0,0,1551,1550,1,0,
		0,0,1552,1555,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,
		0,0,0,1555,1553,1,0,0,0,1556,1558,3,32,16,0,1557,1546,1,0,0,0,1557,1558,
		1,0,0,0,1558,1566,1,0,0,0,1559,1561,5,5,0,0,1560,1559,1,0,0,0,1561,1564,
		1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,1565,1,0,0,0,1564,1562,
		1,0,0,0,1565,1567,3,26,13,0,1566,1562,1,0,0,0,1566,1567,1,0,0,0,1567,87,
		1,0,0,0,1568,1570,3,300,150,0,1569,1568,1,0,0,0,1569,1570,1,0,0,0,1570,
		1571,1,0,0,0,1571,1575,5,81,0,0,1572,1574,5,5,0,0,1573,1572,1,0,0,0,1574,
		1577,1,0,0,0,1575,1573,1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,0,0,0,1577,
		1575,1,0,0,0,1578,1593,3,58,29,0,1579,1581,5,5,0,0,1580,1579,1,0,0,0,1581,
		1584,1,0,0,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,1584,
		1582,1,0,0,0,1585,1589,5,26,0,0,1586,1588,5,5,0,0,1587,1586,1,0,0,0,1588,
		1591,1,0,0,0,1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,1592,1,0,0,0,1591,
		1589,1,0,0,0,1592,1594,3,90,45,0,1593,1582,1,0,0,0,1593,1594,1,0,0,0,1594,
		1598,1,0,0,0,1595,1597,5,5,0,0,1596,1595,1,0,0,0,1597,1600,1,0,0,0,1598,
		1596,1,0,0,0,1598,1599,1,0,0,0,1599,1602,1,0,0,0,1600,1598,1,0,0,0,1601,
		1603,3,136,68,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,89,1,0,0,0,1604,
		1608,7,2,0,0,1605,1607,5,5,0,0,1606,1605,1,0,0,0,1607,1610,1,0,0,0,1608,
		1606,1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,1608,1,0,0,0,1611,
		1612,3,208,104,0,1612,91,1,0,0,0,1613,1617,5,13,0,0,1614,1616,5,5,0,0,
		1615,1614,1,0,0,0,1616,1619,1,0,0,0,1617,1615,1,0,0,0,1617,1618,1,0,0,
		0,1618,1621,1,0,0,0,1619,1617,1,0,0,0,1620,1622,3,94,47,0,1621,1620,1,
		0,0,0,1621,1622,1,0,0,0,1622,1637,1,0,0,0,1623,1625,5,5,0,0,1624,1623,
		1,0,0,0,1625,1628,1,0,0,0,1626,1624,1,0,0,0,1626,1627,1,0,0,0,1627,1629,
		1,0,0,0,1628,1626,1,0,0,0,1629,1633,5,27,0,0,1630,1632,5,5,0,0,1631,1630,
		1,0,0,0,1632,1635,1,0,0,0,1633,1631,1,0,0,0,1633,1634,1,0,0,0,1634,1636,
		1,0,0,0,1635,1633,1,0,0,0,1636,1638,3,50,25,0,1637,1626,1,0,0,0,1637,1638,
		1,0,0,0,1638,1642,1,0,0,0,1639,1641,5,5,0,0,1640,1639,1,0,0,0,1641,1644,
		1,0,0,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,1645,1,0,0,0,1644,1642,
		1,0,0,0,1645,1646,5,14,0,0,1646,93,1,0,0,0,1647,1664,3,96,48,0,1648,1650,
		5,5,0,0,1649,1648,1,0,0,0,1650,1653,1,0,0,0,1651,1649,1,0,0,0,1651,1652,
		1,0,0,0,1652,1654,1,0,0,0,1653,1651,1,0,0,0,1654,1658,5,8,0,0,1655,1657,
		5,5,0,0,1656,1655,1,0,0,0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1658,1659,
		1,0,0,0,1659,1661,1,0,0,0,1660,1658,1,0,0,0,1661,1663,3,96,48,0,1662,1651,
		1,0,0,0,1663,1666,1,0,0,0,1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,1670,
		1,0,0,0,1666,1664,1,0,0,0,1667,1669,5,5,0,0,1668,1667,1,0,0,0,1669,1672,
		1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,1674,1,0,0,0,1672,1670,
		1,0,0,0,1673,1675,5,8,0,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,95,
		1,0,0,0,1676,1680,3,300,150,0,1677,1679,5,5,0,0,1678,1677,1,0,0,0,1679,
		1682,1,0,0,0,1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1684,1,0,0,0,1682,
		1680,1,0,0,0,1683,1676,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,
		1693,3,344,172,0,1686,1688,5,5,0,0,1687,1686,1,0,0,0,1688,1691,1,0,0,0,
		1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1692,1,0,0,0,1691,1689,1,0,0,
		0,1692,1694,3,208,104,0,1693,1689,1,0,0,0,1693,1694,1,0,0,0,1694,1702,
		1,0,0,0,1695,1697,5,5,0,0,1696,1695,1,0,0,0,1697,1700,1,0,0,0,1698,1696,
		1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,1698,1,0,0,0,1701,1703,
		3,26,13,0,1702,1698,1,0,0,0,1702,1703,1,0,0,0,1703,97,1,0,0,0,1704,1706,
		3,306,153,0,1705,1704,1,0,0,0,1705,1706,1,0,0,0,1706,1712,1,0,0,0,1707,
		1713,3,116,58,0,1708,1713,3,120,60,0,1709,1713,3,102,51,0,1710,1713,3,
		100,50,0,1711,1713,3,126,63,0,1712,1707,1,0,0,0,1712,1708,1,0,0,0,1712,
		1709,1,0,0,0,1712,1710,1,0,0,0,1712,1711,1,0,0,0,1713,99,1,0,0,0,1714,
		1717,3,106,53,0,1715,1717,5,108,0,0,1716,1714,1,0,0,0,1716,1715,1,0,0,
		0,1717,101,1,0,0,0,1718,1721,3,100,50,0,1719,1721,3,120,60,0,1720,1718,
		1,0,0,0,1720,1719,1,0,0,0,1721,1725,1,0,0,0,1722,1724,5,5,0,0,1723,1722,
		1,0,0,0,1724,1727,1,0,0,0,1725,1723,1,0,0,0,1725,1726,1,0,0,0,1726,1729,
		1,0,0,0,1727,1725,1,0,0,0,1728,1730,3,104,52,0,1729,1728,1,0,0,0,1730,
		1731,1,0,0,0,1731,1729,1,0,0,0,1731,1732,1,0,0,0,1732,103,1,0,0,0,1733,
		1734,7,3,0,0,1734,105,1,0,0,0,1735,1752,3,108,54,0,1736,1738,5,5,0,0,1737,
		1736,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,
		1742,1,0,0,0,1741,1739,1,0,0,0,1742,1746,5,7,0,0,1743,1745,5,5,0,0,1744,
		1743,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,0,1746,1747,1,0,0,0,1747,
		1749,1,0,0,0,1748,1746,1,0,0,0,1749,1751,3,108,54,0,1750,1739,1,0,0,0,
		1751,1754,1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,107,1,0,0,0,
		1754,1752,1,0,0,0,1755,1763,3,344,172,0,1756,1758,5,5,0,0,1757,1756,1,
		0,0,0,1758,1761,1,0,0,0,1759,1757,1,0,0,0,1759,1760,1,0,0,0,1760,1762,
		1,0,0,0,1761,1759,1,0,0,0,1762,1764,3,206,103,0,1763,1759,1,0,0,0,1763,
		1764,1,0,0,0,1764,109,1,0,0,0,1765,1767,3,112,56,0,1766,1765,1,0,0,0,1766,
		1767,1,0,0,0,1767,1768,1,0,0,0,1768,1771,3,98,49,0,1769,1771,5,15,0,0,
		1770,1766,1,0,0,0,1770,1769,1,0,0,0,1771,111,1,0,0,0,1772,1774,3,114,57,
		0,1773,1772,1,0,0,0,1774,1775,1,0,0,0,1775,1773,1,0,0,0,1775,1776,1,0,
		0,0,1776,113,1,0,0,0,1777,1781,3,316,158,0,1778,1780,5,5,0,0,1779,1778,
		1,0,0,0,1780,1783,1,0,0,0,1781,1779,1,0,0,0,1781,1782,1,0,0,0,1782,1786,
		1,0,0,0,1783,1781,1,0,0,0,1784,1786,3,334,167,0,1785,1777,1,0,0,0,1785,
		1784,1,0,0,0,1786,115,1,0,0,0,1787,1791,3,122,61,0,1788,1790,5,5,0,0,1789,
		1788,1,0,0,0,1790,1793,1,0,0,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,
		1794,1,0,0,0,1793,1791,1,0,0,0,1794,1798,5,7,0,0,1795,1797,5,5,0,0,1796,
		1795,1,0,0,0,1797,1800,1,0,0,0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,
		1802,1,0,0,0,1800,1798,1,0,0,0,1801,1787,1,0,0,0,1801,1802,1,0,0,0,1802,
		1803,1,0,0,0,1803,1807,3,118,59,0,1804,1806,5,5,0,0,1805,1804,1,0,0,0,
		1806,1809,1,0,0,0,1807,1805,1,0,0,0,1807,1808,1,0,0,0,1808,1810,1,0,0,
		0,1809,1807,1,0,0,0,1810,1814,5,34,0,0,1811,1813,5,5,0,0,1812,1811,1,0,
		0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,1,0,0,0,1815,1817,1,
		0,0,0,1816,1814,1,0,0,0,1817,1818,3,98,49,0,1818,117,1,0,0,0,1819,1823,
		5,9,0,0,1820,1822,5,5,0,0,1821,1820,1,0,0,0,1822,1825,1,0,0,0,1823,1821,
		1,0,0,0,1823,1824,1,0,0,0,1824,1828,1,0,0,0,1825,1823,1,0,0,0,1826,1829,
		3,84,42,0,1827,1829,3,98,49,0,1828,1826,1,0,0,0,1828,1827,1,0,0,0,1828,
		1829,1,0,0,0,1829,1849,1,0,0,0,1830,1832,5,5,0,0,1831,1830,1,0,0,0,1832,
		1835,1,0,0,0,1833,1831,1,0,0,0,1833,1834,1,0,0,0,1834,1836,1,0,0,0,1835,
		1833,1,0,0,0,1836,1840,5,8,0,0,1837,1839,5,5,0,0,1838,1837,1,0,0,0,1839,
		1842,1,0,0,0,1840,1838,1,0,0,0,1840,1841,1,0,0,0,1841,1845,1,0,0,0,1842,
		1840,1,0,0,0,1843,1846,3,84,42,0,1844,1846,3,98,49,0,1845,1843,1,0,0,0,
		1845,1844,1,0,0,0,1846,1848,1,0,0,0,1847,1833,1,0,0,0,1848,1851,1,0,0,
		0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,1859,1,0,0,0,1851,1849,1,0,
		0,0,1852,1854,5,5,0,0,1853,1852,1,0,0,0,1854,1857,1,0,0,0,1855,1853,1,
		0,0,0,1855,1856,1,0,0,0,1856,1858,1,0,0,0,1857,1855,1,0,0,0,1858,1860,
		5,8,0,0,1859,1855,1,0,0,0,1859,1860,1,0,0,0,1860,1864,1,0,0,0,1861,1863,
		5,5,0,0,1862,1861,1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1864,1865,
		1,0,0,0,1865,1867,1,0,0,0,1866,1864,1,0,0,0,1867,1868,5,10,0,0,1868,119,
		1,0,0,0,1869,1873,5,9,0,0,1870,1872,5,5,0,0,1871,1870,1,0,0,0,1872,1875,
		1,0,0,0,1873,1871,1,0,0,0,1873,1874,1,0,0,0,1874,1876,1,0,0,0,1875,1873,
		1,0,0,0,1876,1880,3,98,49,0,1877,1879,5,5,0,0,1878,1877,1,0,0,0,1879,1882,
		1,0,0,0,1880,1878,1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,0,0,0,1882,1880,
		1,0,0,0,1883,1884,5,10,0,0,1884,121,1,0,0,0,1885,1887,3,306,153,0,1886,
		1885,1,0,0,0,1886,1887,1,0,0,0,1887,1891,1,0,0,0,1888,1892,3,120,60,0,
		1889,1892,3,102,51,0,1890,1892,3,100,50,0,1891,1888,1,0,0,0,1891,1889,
		1,0,0,0,1891,1890,1,0,0,0,1892,123,1,0,0,0,1893,1897,5,9,0,0,1894,1896,
		5,5,0,0,1895,1894,1,0,0,0,1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,1898,
		1,0,0,0,1898,1902,1,0,0,0,1899,1897,1,0,0,0,1900,1903,3,106,53,0,1901,
		1903,3,124,62,0,1902,1900,1,0,0,0,1902,1901,1,0,0,0,1903,1907,1,0,0,0,
		1904,1906,5,5,0,0,1905,1904,1,0,0,0,1906,1909,1,0,0,0,1907,1905,1,0,0,
		0,1907,1908,1,0,0,0,1908,1910,1,0,0,0,1909,1907,1,0,0,0,1910,1911,5,10,
		0,0,1911,125,1,0,0,0,1912,1914,3,306,153,0,1913,1912,1,0,0,0,1913,1914,
		1,0,0,0,1914,1917,1,0,0,0,1915,1918,3,106,53,0,1916,1918,3,124,62,0,1917,
		1915,1,0,0,0,1917,1916,1,0,0,0,1918,1922,1,0,0,0,1919,1921,5,5,0,0,1920,
		1919,1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,1922,1923,1,0,0,0,1923,
		1925,1,0,0,0,1924,1922,1,0,0,0,1925,1929,5,57,0,0,1926,1928,5,5,0,0,1927,
		1926,1,0,0,0,1928,1931,1,0,0,0,1929,1927,1,0,0,0,1929,1930,1,0,0,0,1930,
		1933,1,0,0,0,1931,1929,1,0,0,0,1932,1934,3,306,153,0,1933,1932,1,0,0,0,
		1933,1934,1,0,0,0,1934,1937,1,0,0,0,1935,1938,3,106,53,0,1936,1938,3,124,
		62,0,1937,1935,1,0,0,0,1937,1936,1,0,0,0,1938,127,1,0,0,0,1939,1945,3,
		130,65,0,1940,1941,3,150,75,0,1941,1942,3,130,65,0,1942,1944,1,0,0,0,1943,
		1940,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,
		1949,1,0,0,0,1947,1945,1,0,0,0,1948,1939,1,0,0,0,1948,1949,1,0,0,0,1949,
		1951,1,0,0,0,1950,1952,3,150,75,0,1951,1950,1,0,0,0,1951,1952,1,0,0,0,
		1952,129,1,0,0,0,1953,1956,3,132,66,0,1954,1956,3,334,167,0,1955,1953,
		1,0,0,0,1955,1954,1,0,0,0,1956,1959,1,0,0,0,1957,1955,1,0,0,0,1957,1958,
		1,0,0,0,1958,1964,1,0,0,0,1959,1957,1,0,0,0,1960,1965,3,20,10,0,1961,1965,
		3,146,73,0,1962,1965,3,138,69,0,1963,1965,3,152,76,0,1964,1960,1,0,0,0,
		1964,1961,1,0,0,0,1964,1962,1,0,0,0,1964,1963,1,0,0,0,1965,131,1,0,0,0,
		1966,1967,3,344,172,0,1967,1971,7,4,0,0,1968,1970,5,5,0,0,1969,1968,1,
		0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1971,1972,1,0,0,0,1972,133,1,
		0,0,0,1973,1971,1,0,0,0,1974,1977,3,136,68,0,1975,1977,3,130,65,0,1976,
		1974,1,0,0,0,1976,1975,1,0,0,0,1977,135,1,0,0,0,1978,1982,5,13,0,0,1979,
		1981,5,5,0,0,1980,1979,1,0,0,0,1981,1984,1,0,0,0,1982,1980,1,0,0,0,1982,
		1983,1,0,0,0,1983,1985,1,0,0,0,1984,1982,1,0,0,0,1985,1989,3,128,64,0,
		1986,1988,5,5,0,0,1987,1986,1,0,0,0,1988,1991,1,0,0,0,1989,1987,1,0,0,
		0,1989,1990,1,0,0,0,1990,1992,1,0,0,0,1991,1989,1,0,0,0,1992,1993,5,14,
		0,0,1993,137,1,0,0,0,1994,1998,3,140,70,0,1995,1998,3,142,71,0,1996,1998,
		3,144,72,0,1997,1994,1,0,0,0,1997,1995,1,0,0,0,1997,1996,1,0,0,0,1998,
		139,1,0,0,0,1999,2003,5,95,0,0,2000,2002,5,5,0,0,2001,2000,1,0,0,0,2002,
		2005,1,0,0,0,2003,2001,1,0,0,0,2003,2004,1,0,0,0,2004,2006,1,0,0,0,2005,
		2003,1,0,0,0,2006,2010,5,9,0,0,2007,2009,3,334,167,0,2008,2007,1,0,0,0,
		2009,2012,1,0,0,0,2010,2008,1,0,0,0,2010,2011,1,0,0,0,2011,2015,1,0,0,
		0,2012,2010,1,0,0,0,2013,2016,3,66,33,0,2014,2016,3,68,34,0,2015,2013,
		1,0,0,0,2015,2014,1,0,0,0,2016,2017,1,0,0,0,2017,2018,5,104,0,0,2018,2019,
		3,152,76,0,2019,2023,5,10,0,0,2020,2022,5,5,0,0,2021,2020,1,0,0,0,2022,
		2025,1,0,0,0,2023,2021,1,0,0,0,2023,2024,1,0,0,0,2024,2027,1,0,0,0,2025,
		2023,1,0,0,0,2026,2028,3,134,67,0,2027,2026,1,0,0,0,2027,2028,1,0,0,0,
		2028,141,1,0,0,0,2029,2033,5,97,0,0,2030,2032,5,5,0,0,2031,2030,1,0,0,
		0,2032,2035,1,0,0,0,2033,2031,1,0,0,0,2033,2034,1,0,0,0,2034,2036,1,0,
		0,0,2035,2033,1,0,0,0,2036,2037,5,9,0,0,2037,2038,3,152,76,0,2038,2042,
		5,10,0,0,2039,2041,5,5,0,0,2040,2039,1,0,0,0,2041,2044,1,0,0,0,2042,2040,
		1,0,0,0,2042,2043,1,0,0,0,2043,2047,1,0,0,0,2044,2042,1,0,0,0,2045,2048,
		3,134,67,0,2046,2048,5,27,0,0,2047,2045,1,0,0,0,2047,2046,1,0,0,0,2048,
		143,1,0,0,0,2049,2053,5,96,0,0,2050,2052,5,5,0,0,2051,2050,1,0,0,0,2052,
		2055,1,0,0,0,2053,2051,1,0,0,0,2053,2054,1,0,0,0,2054,2057,1,0,0,0,2055,
		2053,1,0,0,0,2056,2058,3,134,67,0,2057,2056,1,0,0,0,2057,2058,1,0,0,0,
		2058,2062,1,0,0,0,2059,2061,5,5,0,0,2060,2059,1,0,0,0,2061,2064,1,0,0,
		0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,2065,1,0,0,0,2064,2062,1,0,
		0,0,2065,2069,5,97,0,0,2066,2068,5,5,0,0,2067,2066,1,0,0,0,2068,2071,1,
		0,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,0,2070,2072,1,0,0,0,2071,2069,
		1,0,0,0,2072,2073,5,9,0,0,2073,2074,3,152,76,0,2074,2075,5,10,0,0,2075,
		145,1,0,0,0,2076,2077,3,188,94,0,2077,2078,5,28,0,0,2078,2083,1,0,0,0,
		2079,2080,3,192,96,0,2080,2081,3,274,137,0,2081,2083,1,0,0,0,2082,2076,
		1,0,0,0,2082,2079,1,0,0,0,2083,2087,1,0,0,0,2084,2086,5,5,0,0,2085,2084,
		1,0,0,0,2086,2089,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,2090,
		1,0,0,0,2089,2087,1,0,0,0,2090,2091,3,152,76,0,2091,147,1,0,0,0,2092,2096,
		7,5,0,0,2093,2095,5,5,0,0,2094,2093,1,0,0,0,2095,2098,1,0,0,0,2096,2094,
		1,0,0,0,2096,2097,1,0,0,0,2097,149,1,0,0,0,2098,2096,1,0,0,0,2099,2101,
		7,5,0,0,2100,2099,1,0,0,0,2101,2102,1,0,0,0,2102,2100,1,0,0,0,2102,2103,
		1,0,0,0,2103,151,1,0,0,0,2104,2105,3,154,77,0,2105,153,1,0,0,0,2106,2123,
		3,156,78,0,2107,2109,5,5,0,0,2108,2107,1,0,0,0,2109,2112,1,0,0,0,2110,
		2108,1,0,0,0,2110,2111,1,0,0,0,2111,2113,1,0,0,0,2112,2110,1,0,0,0,2113,
		2117,5,23,0,0,2114,2116,5,5,0,0,2115,2114,1,0,0,0,2116,2119,1,0,0,0,2117,
		2115,1,0,0,0,2117,2118,1,0,0,0,2118,2120,1,0,0,0,2119,2117,1,0,0,0,2120,
		2122,3,156,78,0,2121,2110,1,0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,0,
		2123,2124,1,0,0,0,2124,155,1,0,0,0,2125,2123,1,0,0,0,2126,2143,3,158,79,
		0,2127,2129,5,5,0,0,2128,2127,1,0,0,0,2129,2132,1,0,0,0,2130,2128,1,0,
		0,0,2130,2131,1,0,0,0,2131,2133,1,0,0,0,2132,2130,1,0,0,0,2133,2137,5,
		22,0,0,2134,2136,5,5,0,0,2135,2134,1,0,0,0,2136,2139,1,0,0,0,2137,2135,
		1,0,0,0,2137,2138,1,0,0,0,2138,2140,1,0,0,0,2139,2137,1,0,0,0,2140,2142,
		3,158,79,0,2141,2130,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,0,0,0,2143,
		2144,1,0,0,0,2144,157,1,0,0,0,2145,2143,1,0,0,0,2146,2158,3,160,80,0,2147,
		2151,3,276,138,0,2148,2150,5,5,0,0,2149,2148,1,0,0,0,2150,2153,1,0,0,0,
		2151,2149,1,0,0,0,2151,2152,1,0,0,0,2152,2154,1,0,0,0,2153,2151,1,0,0,
		0,2154,2155,3,160,80,0,2155,2157,1,0,0,0,2156,2147,1,0,0,0,2157,2160,1,
		0,0,0,2158,2156,1,0,0,0,2158,2159,1,0,0,0,2159,159,1,0,0,0,2160,2158,1,
		0,0,0,2161,2173,3,162,81,0,2162,2166,3,278,139,0,2163,2165,5,5,0,0,2164,
		2163,1,0,0,0,2165,2168,1,0,0,0,2166,2164,1,0,0,0,2166,2167,1,0,0,0,2167,
		2169,1,0,0,0,2168,2166,1,0,0,0,2169,2170,3,162,81,0,2170,2172,1,0,0,0,
		2171,2162,1,0,0,0,2172,2175,1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,
		0,2174,161,1,0,0,0,2175,2173,1,0,0,0,2176,2180,3,164,82,0,2177,2179,3,
		202,101,0,2178,2177,1,0,0,0,2179,2182,1,0,0,0,2180,2178,1,0,0,0,2180,2181,
		1,0,0,0,2181,163,1,0,0,0,2182,2180,1,0,0,0,2183,2204,3,166,83,0,2184,2188,
		3,280,140,0,2185,2187,5,5,0,0,2186,2185,1,0,0,0,2187,2190,1,0,0,0,2188,
		2186,1,0,0,0,2188,2189,1,0,0,0,2189,2191,1,0,0,0,2190,2188,1,0,0,0,2191,
		2192,3,166,83,0,2192,2203,1,0,0,0,2193,2197,3,282,141,0,2194,2196,5,5,
		0,0,2195,2194,1,0,0,0,2196,2199,1,0,0,0,2197,2195,1,0,0,0,2197,2198,1,
		0,0,0,2198,2200,1,0,0,0,2199,2197,1,0,0,0,2200,2201,3,98,49,0,2201,2203,
		1,0,0,0,2202,2184,1,0,0,0,2202,2193,1,0,0,0,2203,2206,1,0,0,0,2204,2202,
		1,0,0,0,2204,2205,1,0,0,0,2205,165,1,0,0,0,2206,2204,1,0,0,0,2207,2225,
		3,170,85,0,2208,2210,5,5,0,0,2209,2208,1,0,0,0,2210,2213,1,0,0,0,2211,
		2209,1,0,0,0,2211,2212,1,0,0,0,2212,2214,1,0,0,0,2213,2211,1,0,0,0,2214,
		2218,3,168,84,0,2215,2217,5,5,0,0,2216,2215,1,0,0,0,2217,2220,1,0,0,0,
		2218,2216,1,0,0,0,2218,2219,1,0,0,0,2219,2221,1,0,0,0,2220,2218,1,0,0,
		0,2221,2222,3,170,85,0,2222,2224,1,0,0,0,2223,2211,1,0,0,0,2224,2227,1,
		0,0,0,2225,2223,1,0,0,0,2225,2226,1,0,0,0,2226,167,1,0,0,0,2227,2225,1,
		0,0,0,2228,2229,5,46,0,0,2229,2230,5,26,0,0,2230,169,1,0,0,0,2231,2243,
		3,172,86,0,2232,2236,3,344,172,0,2233,2235,5,5,0,0,2234,2233,1,0,0,0,2235,
		2238,1,0,0,0,2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,2239,1,0,0,0,2238,
		2236,1,0,0,0,2239,2240,3,172,86,0,2240,2242,1,0,0,0,2241,2232,1,0,0,0,
		2242,2245,1,0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,171,1,0,0,0,
		2245,2243,1,0,0,0,2246,2257,3,174,87,0,2247,2251,7,6,0,0,2248,2250,5,5,
		0,0,2249,2248,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,2251,2252,1,
		0,0,0,2252,2254,1,0,0,0,2253,2251,1,0,0,0,2254,2256,3,174,87,0,2255,2247,
		1,0,0,0,2256,2259,1,0,0,0,2257,2255,1,0,0,0,2257,2258,1,0,0,0,2258,173,
		1,0,0,0,2259,2257,1,0,0,0,2260,2272,3,176,88,0,2261,2265,3,284,142,0,2262,
		2264,5,5,0,0,2263,2262,1,0,0,0,2264,2267,1,0,0,0,2265,2263,1,0,0,0,2265,
		2266,1,0,0,0,2266,2268,1,0,0,0,2267,2265,1,0,0,0,2268,2269,3,176,88,0,
		2269,2271,1,0,0,0,2270,2261,1,0,0,0,2271,2274,1,0,0,0,2272,2270,1,0,0,
		0,2272,2273,1,0,0,0,2273,175,1,0,0,0,2274,2272,1,0,0,0,2275,2287,3,178,
		89,0,2276,2280,3,286,143,0,2277,2279,5,5,0,0,2278,2277,1,0,0,0,2279,2282,
		1,0,0,0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,2283,1,0,0,0,2282,2280,
		1,0,0,0,2283,2284,3,178,89,0,2284,2286,1,0,0,0,2285,2276,1,0,0,0,2286,
		2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,1,0,0,0,2288,177,1,0,0,0,2289,
		2287,1,0,0,0,2290,2308,3,180,90,0,2291,2293,5,5,0,0,2292,2291,1,0,0,0,
		2293,2296,1,0,0,0,2294,2292,1,0,0,0,2294,2295,1,0,0,0,2295,2297,1,0,0,
		0,2296,2294,1,0,0,0,2297,2301,3,288,144,0,2298,2300,5,5,0,0,2299,2298,
		1,0,0,0,2300,2303,1,0,0,0,2301,2299,1,0,0,0,2301,2302,1,0,0,0,2302,2304,
		1,0,0,0,2303,2301,1,0,0,0,2304,2305,3,98,49,0,2305,2307,1,0,0,0,2306,2294,
		1,0,0,0,2307,2310,1,0,0,0,2308,2306,1,0,0,0,2308,2309,1,0,0,0,2309,179,
		1,0,0,0,2310,2308,1,0,0,0,2311,2313,3,182,91,0,2312,2311,1,0,0,0,2313,
		2316,1,0,0,0,2314,2312,1,0,0,0,2314,2315,1,0,0,0,2315,2317,1,0,0,0,2316,
		2314,1,0,0,0,2317,2318,3,184,92,0,2318,181,1,0,0,0,2319,2329,3,334,167,
		0,2320,2329,3,132,66,0,2321,2325,3,290,145,0,2322,2324,5,5,0,0,2323,2322,
		1,0,0,0,2324,2327,1,0,0,0,2325,2323,1,0,0,0,2325,2326,1,0,0,0,2326,2329,
		1,0,0,0,2327,2325,1,0,0,0,2328,2319,1,0,0,0,2328,2320,1,0,0,0,2328,2321,
		1,0,0,0,2329,183,1,0,0,0,2330,2334,3,212,106,0,2331,2333,3,186,93,0,2332,
		2331,1,0,0,0,2333,2336,1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,
		185,1,0,0,0,2336,2334,1,0,0,0,2337,2343,3,292,146,0,2338,2343,3,206,103,
		0,2339,2343,3,202,101,0,2340,2343,3,198,99,0,2341,2343,3,200,100,0,2342,
		2337,1,0,0,0,2342,2338,1,0,0,0,2342,2339,1,0,0,0,2342,2340,1,0,0,0,2342,
		2341,1,0,0,0,2343,187,1,0,0,0,2344,2345,3,184,92,0,2345,2346,3,196,98,
		0,2346,2350,1,0,0,0,2347,2350,3,344,172,0,2348,2350,3,190,95,0,2349,2344,
		1,0,0,0,2349,2347,1,0,0,0,2349,2348,1,0,0,0,2350,189,1,0,0,0,2351,2355,
		5,9,0,0,2352,2354,5,5,0,0,2353,2352,1,0,0,0,2354,2357,1,0,0,0,2355,2353,
		1,0,0,0,2355,2356,1,0,0,0,2356,2358,1,0,0,0,2357,2355,1,0,0,0,2358,2362,
		3,188,94,0,2359,2361,5,5,0,0,2360,2359,1,0,0,0,2361,2364,1,0,0,0,2362,
		2360,1,0,0,0,2362,2363,1,0,0,0,2363,2365,1,0,0,0,2364,2362,1,0,0,0,2365,
		2366,5,10,0,0,2366,191,1,0,0,0,2367,2370,3,180,90,0,2368,2370,3,194,97,
		0,2369,2367,1,0,0,0,2369,2368,1,0,0,0,2370,193,1,0,0,0,2371,2375,5,9,0,
		0,2372,2374,5,5,0,0,2373,2372,1,0,0,0,2374,2377,1,0,0,0,2375,2373,1,0,
		0,0,2375,2376,1,0,0,0,2376,2378,1,0,0,0,2377,2375,1,0,0,0,2378,2382,3,
		192,96,0,2379,2381,5,5,0,0,2380,2379,1,0,0,0,2381,2384,1,0,0,0,2382,2380,
		1,0,0,0,2382,2383,1,0,0,0,2383,2385,1,0,0,0,2384,2382,1,0,0,0,2385,2386,
		5,10,0,0,2386,195,1,0,0,0,2387,2391,3,206,103,0,2388,2391,3,198,99,0,2389,
		2391,3,200,100,0,2390,2387,1,0,0,0,2390,2388,1,0,0,0,2390,2389,1,0,0,0,
		2391,197,1,0,0,0,2392,2396,5,11,0,0,2393,2395,5,5,0,0,2394,2393,1,0,0,
		0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2396,2397,1,0,0,0,2397,2399,1,0,
		0,0,2398,2396,1,0,0,0,2399,2416,3,152,76,0,2400,2402,5,5,0,0,2401,2400,
		1,0,0,0,2402,2405,1,0,0,0,2403,2401,1,0,0,0,2403,2404,1,0,0,0,2404,2406,
		1,0,0,0,2405,2403,1,0,0,0,2406,2410,5,8,0,0,2407,2409,5,5,0,0,2408,2407,
		1,0,0,0,2409,2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,2413,
		1,0,0,0,2412,2410,1,0,0,0,2413,2415,3,152,76,0,2414,2403,1,0,0,0,2415,
		2418,1,0,0,0,2416,2414,1,0,0,0,2416,2417,1,0,0,0,2417,2426,1,0,0,0,2418,
		2416,1,0,0,0,2419,2421,5,5,0,0,2420,2419,1,0,0,0,2421,2424,1,0,0,0,2422,
		2420,1,0,0,0,2422,2423,1,0,0,0,2423,2425,1,0,0,0,2424,2422,1,0,0,0,2425,
		2427,5,8,0,0,2426,2422,1,0,0,0,2426,2427,1,0,0,0,2427,2431,1,0,0,0,2428,
		2430,5,5,0,0,2429,2428,1,0,0,0,2430,2433,1,0,0,0,2431,2429,1,0,0,0,2431,
		2432,1,0,0,0,2432,2434,1,0,0,0,2433,2431,1,0,0,0,2434,2435,5,12,0,0,2435,
		199,1,0,0,0,2436,2440,3,296,148,0,2437,2439,5,5,0,0,2438,2437,1,0,0,0,
		2439,2442,1,0,0,0,2440,2438,1,0,0,0,2440,2441,1,0,0,0,2441,2446,1,0,0,
		0,2442,2440,1,0,0,0,2443,2447,3,344,172,0,2444,2447,3,214,107,0,2445,2447,
		5,74,0,0,2446,2443,1,0,0,0,2446,2444,1,0,0,0,2446,2445,1,0,0,0,2447,201,
		1,0,0,0,2448,2450,3,206,103,0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,
		2456,1,0,0,0,2451,2453,3,208,104,0,2452,2451,1,0,0,0,2452,2453,1,0,0,0,
		2453,2454,1,0,0,0,2454,2457,3,204,102,0,2455,2457,3,208,104,0,2456,2452,
		1,0,0,0,2456,2455,1,0,0,0,2457,203,1,0,0,0,2458,2460,3,334,167,0,2459,
		2458,1,0,0,0,2460,2463,1,0,0,0,2461,2459,1,0,0,0,2461,2462,1,0,0,0,2462,
		2465,1,0,0,0,2463,2461,1,0,0,0,2464,2466,3,132,66,0,2465,2464,1,0,0,0,
		2465,2466,1,0,0,0,2466,2470,1,0,0,0,2467,2469,5,5,0,0,2468,2467,1,0,0,
		0,2469,2472,1,0,0,0,2470,2468,1,0,0,0,2470,2471,1,0,0,0,2471,2473,1,0,
		0,0,2472,2470,1,0,0,0,2473,2474,3,234,117,0,2474,205,1,0,0,0,2475,2479,
		5,47,0,0,2476,2478,5,5,0,0,2477,2476,1,0,0,0,2478,2481,1,0,0,0,2479,2477,
		1,0,0,0,2479,2480,1,0,0,0,2480,2482,1,0,0,0,2481,2479,1,0,0,0,2482,2499,
		3,110,55,0,2483,2485,5,5,0,0,2484,2483,1,0,0,0,2485,2488,1,0,0,0,2486,
		2484,1,0,0,0,2486,2487,1,0,0,0,2487,2489,1,0,0,0,2488,2486,1,0,0,0,2489,
		2493,5,8,0,0,2490,2492,5,5,0,0,2491,2490,1,0,0,0,2492,2495,1,0,0,0,2493,
		2491,1,0,0,0,2493,2494,1,0,0,0,2494,2496,1,0,0,0,2495,2493,1,0,0,0,2496,
		2498,3,110,55,0,2497,2486,1,0,0,0,2498,2501,1,0,0,0,2499,2497,1,0,0,0,
		2499,2500,1,0,0,0,2500,2509,1,0,0,0,2501,2499,1,0,0,0,2502,2504,5,5,0,
		0,2503,2502,1,0,0,0,2504,2507,1,0,0,0,2505,2503,1,0,0,0,2505,2506,1,0,
		0,0,2506,2508,1,0,0,0,2507,2505,1,0,0,0,2508,2510,5,8,0,0,2509,2505,1,
		0,0,0,2509,2510,1,0,0,0,2510,2514,1,0,0,0,2511,2513,5,5,0,0,2512,2511,
		1,0,0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,2517,
		1,0,0,0,2516,2514,1,0,0,0,2517,2518,5,48,0,0,2518,207,1,0,0,0,2519,2523,
		5,9,0,0,2520,2522,5,5,0,0,2521,2520,1,0,0,0,2522,2525,1,0,0,0,2523,2521,
		1,0,0,0,2523,2524,1,0,0,0,2524,2561,1,0,0,0,2525,2523,1,0,0,0,2526,2543,
		3,210,105,0,2527,2529,5,5,0,0,2528,2527,1,0,0,0,2529,2532,1,0,0,0,2530,
		2528,1,0,0,0,2530,2531,1,0,0,0,2531,2533,1,0,0,0,2532,2530,1,0,0,0,2533,
		2537,5,8,0,0,2534,2536,5,5,0,0,2535,2534,1,0,0,0,2536,2539,1,0,0,0,2537,
		2535,1,0,0,0,2537,2538,1,0,0,0,2538,2540,1,0,0,0,2539,2537,1,0,0,0,2540,
		2542,3,210,105,0,2541,2530,1,0,0,0,2542,2545,1,0,0,0,2543,2541,1,0,0,0,
		2543,2544,1,0,0,0,2544,2553,1,0,0,0,2545,2543,1,0,0,0,2546,2548,5,5,0,
		0,2547,2546,1,0,0,0,2548,2551,1,0,0,0,2549,2547,1,0,0,0,2549,2550,1,0,
		0,0,2550,2552,1,0,0,0,2551,2549,1,0,0,0,2552,2554,5,8,0,0,2553,2549,1,
		0,0,0,2553,2554,1,0,0,0,2554,2558,1,0,0,0,2555,2557,5,5,0,0,2556,2555,
		1,0,0,0,2557,2560,1,0,0,0,2558,2556,1,0,0,0,2558,2559,1,0,0,0,2559,2562,
		1,0,0,0,2560,2558,1,0,0,0,2561,2526,1,0,0,0,2561,2562,1,0,0,0,2562,2563,
		1,0,0,0,2563,2564,5,10,0,0,2564,209,1,0,0,0,2565,2567,3,334,167,0,2566,
		2565,1,0,0,0,2566,2567,1,0,0,0,2567,2571,1,0,0,0,2568,2570,5,5,0,0,2569,
		2568,1,0,0,0,2570,2573,1,0,0,0,2571,2569,1,0,0,0,2571,2572,1,0,0,0,2572,
		2588,1,0,0,0,2573,2571,1,0,0,0,2574,2578,3,344,172,0,2575,2577,5,5,0,0,
		2576,2575,1,0,0,0,2577,2580,1,0,0,0,2578,2576,1,0,0,0,2578,2579,1,0,0,
		0,2579,2581,1,0,0,0,2580,2578,1,0,0,0,2581,2585,5,28,0,0,2582,2584,5,5,
		0,0,2583,2582,1,0,0,0,2584,2587,1,0,0,0,2585,2583,1,0,0,0,2585,2586,1,
		0,0,0,2586,2589,1,0,0,0,2587,2585,1,0,0,0,2588,2574,1,0,0,0,2588,2589,
		1,0,0,0,2589,2591,1,0,0,0,2590,2592,5,15,0,0,2591,2590,1,0,0,0,2591,2592,
		1,0,0,0,2592,2596,1,0,0,0,2593,2595,5,5,0,0,2594,2593,1,0,0,0,2595,2598,
		1,0,0,0,2596,2594,1,0,0,0,2596,2597,1,0,0,0,2597,2599,1,0,0,0,2598,2596,
		1,0,0,0,2599,2600,3,152,76,0,2600,211,1,0,0,0,2601,2616,3,214,107,0,2602,
		2616,3,344,172,0,2603,2616,3,218,109,0,2604,2616,3,220,110,0,2605,2616,
		3,272,136,0,2606,2616,3,242,121,0,2607,2616,3,244,122,0,2608,2616,3,216,
		108,0,2609,2616,3,246,123,0,2610,2616,3,248,124,0,2611,2616,3,250,125,
		0,2612,2616,3,254,127,0,2613,2616,3,264,132,0,2614,2616,3,270,135,0,2615,
		2601,1,0,0,0,2615,2602,1,0,0,0,2615,2603,1,0,0,0,2615,2604,1,0,0,0,2615,
		2605,1,0,0,0,2615,2606,1,0,0,0,2615,2607,1,0,0,0,2615,2608,1,0,0,0,2615,
		2609,1,0,0,0,2615,2610,1,0,0,0,2615,2611,1,0,0,0,2615,2612,1,0,0,0,2615,
		2613,1,0,0,0,2615,2614,1,0,0,0,2616,213,1,0,0,0,2617,2621,5,9,0,0,2618,
		2620,5,5,0,0,2619,2618,1,0,0,0,2620,2623,1,0,0,0,2621,2619,1,0,0,0,2621,
		2622,1,0,0,0,2622,2624,1,0,0,0,2623,2621,1,0,0,0,2624,2628,3,152,76,0,
		2625,2627,5,5,0,0,2626,2625,1,0,0,0,2627,2630,1,0,0,0,2628,2626,1,0,0,
		0,2628,2629,1,0,0,0,2629,2631,1,0,0,0,2630,2628,1,0,0,0,2631,2632,5,10,
		0,0,2632,215,1,0,0,0,2633,2637,5,11,0,0,2634,2636,5,5,0,0,2635,2634,1,
		0,0,0,2636,2639,1,0,0,0,2637,2635,1,0,0,0,2637,2638,1,0,0,0,2638,2675,
		1,0,0,0,2639,2637,1,0,0,0,2640,2657,3,152,76,0,2641,2643,5,5,0,0,2642,
		2641,1,0,0,0,2643,2646,1,0,0,0,2644,2642,1,0,0,0,2644,2645,1,0,0,0,2645,
		2647,1,0,0,0,2646,2644,1,0,0,0,2647,2651,5,8,0,0,2648,2650,5,5,0,0,2649,
		2648,1,0,0,0,2650,2653,1,0,0,0,2651,2649,1,0,0,0,2651,2652,1,0,0,0,2652,
		2654,1,0,0,0,2653,2651,1,0,0,0,2654,2656,3,152,76,0,2655,2644,1,0,0,0,
		2656,2659,1,0,0,0,2657,2655,1,0,0,0,2657,2658,1,0,0,0,2658,2667,1,0,0,
		0,2659,2657,1,0,0,0,2660,2662,5,5,0,0,2661,2660,1,0,0,0,2662,2665,1,0,
		0,0,2663,2661,1,0,0,0,2663,2664,1,0,0,0,2664,2666,1,0,0,0,2665,2663,1,
		0,0,0,2666,2668,5,8,0,0,2667,2663,1,0,0,0,2667,2668,1,0,0,0,2668,2672,
		1,0,0,0,2669,2671,5,5,0,0,2670,2669,1,0,0,0,2671,2674,1,0,0,0,2672,2670,
		1,0,0,0,2672,2673,1,0,0,0,2673,2676,1,0,0,0,2674,2672,1,0,0,0,2675,2640,
		1,0,0,0,2675,2676,1,0,0,0,2676,2677,1,0,0,0,2677,2678,5,12,0,0,2678,217,
		1,0,0,0,2679,2680,7,7,0,0,2680,219,1,0,0,0,2681,2684,3,222,111,0,2682,
		2684,3,224,112,0,2683,2681,1,0,0,0,2683,2682,1,0,0,0,2684,221,1,0,0,0,
		2685,2690,5,151,0,0,2686,2689,3,226,113,0,2687,2689,3,228,114,0,2688,2686,
		1,0,0,0,2688,2687,1,0,0,0,2689,2692,1,0,0,0,2690,2688,1,0,0,0,2690,2691,
		1,0,0,0,2691,2693,1,0,0,0,2692,2690,1,0,0,0,2693,2694,5,160,0,0,2694,223,
		1,0,0,0,2695,2701,5,152,0,0,2696,2700,3,230,115,0,2697,2700,3,232,116,
		0,2698,2700,5,166,0,0,2699,2696,1,0,0,0,2699,2697,1,0,0,0,2699,2698,1,
		0,0,0,2700,2703,1,0,0,0,2701,2699,1,0,0,0,2701,2702,1,0,0,0,2702,2704,
		1,0,0,0,2703,2701,1,0,0,0,2704,2705,5,165,0,0,2705,225,1,0,0,0,2706,2707,
		7,8,0,0,2707,227,1,0,0,0,2708,2712,5,164,0,0,2709,2711,5,5,0,0,2710,2709,
		1,0,0,0,2711,2714,1,0,0,0,2712,2710,1,0,0,0,2712,2713,1,0,0,0,2713,2715,
		1,0,0,0,2714,2712,1,0,0,0,2715,2719,3,152,76,0,2716,2718,5,5,0,0,2717,
		2716,1,0,0,0,2718,2721,1,0,0,0,2719,2717,1,0,0,0,2719,2720,1,0,0,0,2720,
		2722,1,0,0,0,2721,2719,1,0,0,0,2722,2723,5,14,0,0,2723,229,1,0,0,0,2724,
		2725,7,9,0,0,2725,231,1,0,0,0,2726,2730,5,169,0,0,2727,2729,5,5,0,0,2728,
		2727,1,0,0,0,2729,2732,1,0,0,0,2730,2728,1,0,0,0,2730,2731,1,0,0,0,2731,
		2733,1,0,0,0,2732,2730,1,0,0,0,2733,2737,3,152,76,0,2734,2736,5,5,0,0,
		2735,2734,1,0,0,0,2736,2739,1,0,0,0,2737,2735,1,0,0,0,2737,2738,1,0,0,
		0,2738,2740,1,0,0,0,2739,2737,1,0,0,0,2740,2741,5,14,0,0,2741,233,1,0,
		0,0,2742,2746,5,13,0,0,2743,2745,5,5,0,0,2744,2743,1,0,0,0,2745,2748,1,
		0,0,0,2746,2744,1,0,0,0,2746,2747,1,0,0,0,2747,2765,1,0,0,0,2748,2746,
		1,0,0,0,2749,2751,3,236,118,0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,
		2755,1,0,0,0,2752,2754,5,5,0,0,2753,2752,1,0,0,0,2754,2757,1,0,0,0,2755,
		2753,1,0,0,0,2755,2756,1,0,0,0,2756,2758,1,0,0,0,2757,2755,1,0,0,0,2758,
		2762,5,34,0,0,2759,2761,5,5,0,0,2760,2759,1,0,0,0,2761,2764,1,0,0,0,2762,
		2760,1,0,0,0,2762,2763,1,0,0,0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2765,
		2750,1,0,0,0,2765,2766,1,0,0,0,2766,2767,1,0,0,0,2767,2771,3,128,64,0,
		2768,2770,5,5,0,0,2769,2768,1,0,0,0,2770,2773,1,0,0,0,2771,2769,1,0,0,
		0,2771,2772,1,0,0,0,2772,2774,1,0,0,0,2773,2771,1,0,0,0,2774,2775,5,14,
		0,0,2775,235,1,0,0,0,2776,2793,3,238,119,0,2777,2779,5,5,0,0,2778,2777,
		1,0,0,0,2779,2782,1,0,0,0,2780,2778,1,0,0,0,2780,2781,1,0,0,0,2781,2783,
		1,0,0,0,2782,2780,1,0,0,0,2783,2787,5,8,0,0,2784,2786,5,5,0,0,2785,2784,
		1,0,0,0,2786,2789,1,0,0,0,2787,2785,1,0,0,0,2787,2788,1,0,0,0,2788,2790,
		1,0,0,0,2789,2787,1,0,0,0,2790,2792,3,238,119,0,2791,2780,1,0,0,0,2792,
		2795,1,0,0,0,2793,2791,1,0,0,0,2793,2794,1,0,0,0,2794,2803,1,0,0,0,2795,
		2793,1,0,0,0,2796,2798,5,5,0,0,2797,2796,1,0,0,0,2798,2801,1,0,0,0,2799,
		2797,1,0,0,0,2799,2800,1,0,0,0,2800,2802,1,0,0,0,2801,2799,1,0,0,0,2802,
		2804,5,8,0,0,2803,2799,1,0,0,0,2803,2804,1,0,0,0,2804,237,1,0,0,0,2805,
		2824,3,66,33,0,2806,2821,3,68,34,0,2807,2809,5,5,0,0,2808,2807,1,0,0,0,
		2809,2812,1,0,0,0,2810,2808,1,0,0,0,2810,2811,1,0,0,0,2811,2813,1,0,0,
		0,2812,2810,1,0,0,0,2813,2817,5,26,0,0,2814,2816,5,5,0,0,2815,2814,1,0,
		0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,2817,2818,1,0,0,0,2818,2820,1,
		0,0,0,2819,2817,1,0,0,0,2820,2822,3,98,49,0,2821,2810,1,0,0,0,2821,2822,
		1,0,0,0,2822,2824,1,0,0,0,2823,2805,1,0,0,0,2823,2806,1,0,0,0,2824,239,
		1,0,0,0,2825,2827,5,124,0,0,2826,2825,1,0,0,0,2826,2827,1,0,0,0,2827,2831,
		1,0,0,0,2828,2830,5,5,0,0,2829,2828,1,0,0,0,2830,2833,1,0,0,0,2831,2829,
		1,0,0,0,2831,2832,1,0,0,0,2832,2834,1,0,0,0,2833,2831,1,0,0,0,2834,2850,
		5,76,0,0,2835,2837,5,5,0,0,2836,2835,1,0,0,0,2837,2840,1,0,0,0,2838,2836,
		1,0,0,0,2838,2839,1,0,0,0,2839,2841,1,0,0,0,2840,2838,1,0,0,0,2841,2845,
		3,98,49,0,2842,2844,5,5,0,0,2843,2842,1,0,0,0,2844,2847,1,0,0,0,2845,2843,
		1,0,0,0,2845,2846,1,0,0,0,2846,2848,1,0,0,0,2847,2845,1,0,0,0,2848,2849,
		5,7,0,0,2849,2851,1,0,0,0,2850,2838,1,0,0,0,2850,2851,1,0,0,0,2851,2855,
		1,0,0,0,2852,2854,5,5,0,0,2853,2852,1,0,0,0,2854,2857,1,0,0,0,2855,2853,
		1,0,0,0,2855,2856,1,0,0,0,2856,2858,1,0,0,0,2857,2855,1,0,0,0,2858,2873,
		3,78,39,0,2859,2861,5,5,0,0,2860,2859,1,0,0,0,2861,2864,1,0,0,0,2862,2860,
		1,0,0,0,2862,2863,1,0,0,0,2863,2865,1,0,0,0,2864,2862,1,0,0,0,2865,2869,
		5,26,0,0,2866,2868,5,5,0,0,2867,2866,1,0,0,0,2868,2871,1,0,0,0,2869,2867,
		1,0,0,0,2869,2870,1,0,0,0,2870,2872,1,0,0,0,2871,2869,1,0,0,0,2872,2874,
		3,98,49,0,2873,2862,1,0,0,0,2873,2874,1,0,0,0,2874,2882,1,0,0,0,2875,2877,
		5,5,0,0,2876,2875,1,0,0,0,2877,2880,1,0,0,0,2878,2876,1,0,0,0,2878,2879,
		1,0,0,0,2879,2881,1,0,0,0,2880,2878,1,0,0,0,2881,2883,3,46,23,0,2882,2878,
		1,0,0,0,2882,2883,1,0,0,0,2883,2891,1,0,0,0,2884,2886,5,5,0,0,2885,2884,
		1,0,0,0,2886,2889,1,0,0,0,2887,2885,1,0,0,0,2887,2888,1,0,0,0,2888,2890,
		1,0,0,0,2889,2887,1,0,0,0,2890,2892,3,64,32,0,2891,2887,1,0,0,0,2891,2892,
		1,0,0,0,2892,241,1,0,0,0,2893,2896,3,234,117,0,2894,2896,3,240,120,0,2895,
		2893,1,0,0,0,2895,2894,1,0,0,0,2896,243,1,0,0,0,2897,2899,5,116,0,0,2898,
		2897,1,0,0,0,2898,2899,1,0,0,0,2899,2903,1,0,0,0,2900,2902,5,5,0,0,2901,
		2900,1,0,0,0,2902,2905,1,0,0,0,2903,2901,1,0,0,0,2903,2904,1,0,0,0,2904,
		2906,1,0,0,0,2905,2903,1,0,0,0,2906,2927,5,77,0,0,2907,2909,5,5,0,0,2908,
		2907,1,0,0,0,2909,2912,1,0,0,0,2910,2908,1,0,0,0,2910,2911,1,0,0,0,2911,
		2913,1,0,0,0,2912,2910,1,0,0,0,2913,2917,5,26,0,0,2914,2916,5,5,0,0,2915,
		2914,1,0,0,0,2916,2919,1,0,0,0,2917,2915,1,0,0,0,2917,2918,1,0,0,0,2918,
		2920,1,0,0,0,2919,2917,1,0,0,0,2920,2924,3,32,16,0,2921,2923,5,5,0,0,2922,
		2921,1,0,0,0,2923,2926,1,0,0,0,2924,2922,1,0,0,0,2924,2925,1,0,0,0,2925,
		2928,1,0,0,0,2926,2924,1,0,0,0,2927,2910,1,0,0,0,2927,2928,1,0,0,0,2928,
		2936,1,0,0,0,2929,2931,5,5,0,0,2930,2929,1,0,0,0,2931,2934,1,0,0,0,2932,
		2930,1,0,0,0,2932,2933,1,0,0,0,2933,2935,1,0,0,0,2934,2932,1,0,0,0,2935,
		2937,3,26,13,0,2936,2932,1,0,0,0,2936,2937,1,0,0,0,2937,245,1,0,0,0,2938,
		2939,7,10,0,0,2939,247,1,0,0,0,2940,2957,5,86,0,0,2941,2945,5,47,0,0,2942,
		2944,5,5,0,0,2943,2942,1,0,0,0,2944,2947,1,0,0,0,2945,2943,1,0,0,0,2945,
		2946,1,0,0,0,2946,2948,1,0,0,0,2947,2945,1,0,0,0,2948,2952,3,98,49,0,2949,
		2951,5,5,0,0,2950,2949,1,0,0,0,2951,2954,1,0,0,0,2952,2950,1,0,0,0,2952,
		2953,1,0,0,0,2953,2955,1,0,0,0,2954,2952,1,0,0,0,2955,2956,5,48,0,0,2956,
		2958,1,0,0,0,2957,2941,1,0,0,0,2957,2958,1,0,0,0,2958,2961,1,0,0,0,2959,
		2960,5,41,0,0,2960,2962,3,344,172,0,2961,2959,1,0,0,0,2961,2962,1,0,0,
		0,2962,2965,1,0,0,0,2963,2965,5,62,0,0,2964,2940,1,0,0,0,2964,2963,1,0,
		0,0,2965,249,1,0,0,0,2966,2970,5,89,0,0,2967,2969,5,5,0,0,2968,2967,1,
		0,0,0,2969,2972,1,0,0,0,2970,2968,1,0,0,0,2970,2971,1,0,0,0,2971,2973,
		1,0,0,0,2972,2970,1,0,0,0,2973,2977,5,9,0,0,2974,2976,5,5,0,0,2975,2974,
		1,0,0,0,2976,2979,1,0,0,0,2977,2975,1,0,0,0,2977,2978,1,0,0,0,2978,2980,
		1,0,0,0,2979,2977,1,0,0,0,2980,2984,3,152,76,0,2981,2983,5,5,0,0,2982,
		2981,1,0,0,0,2983,2986,1,0,0,0,2984,2982,1,0,0,0,2984,2985,1,0,0,0,2985,
		2987,1,0,0,0,2986,2984,1,0,0,0,2987,2991,5,10,0,0,2988,2990,5,5,0,0,2989,
		2988,1,0,0,0,2990,2993,1,0,0,0,2991,2989,1,0,0,0,2991,2992,1,0,0,0,2992,
		3025,1,0,0,0,2993,2991,1,0,0,0,2994,3026,3,134,67,0,2995,2997,3,134,67,
		0,2996,2995,1,0,0,0,2996,2997,1,0,0,0,2997,3001,1,0,0,0,2998,3000,5,5,
		0,0,2999,2998,1,0,0,0,3000,3003,1,0,0,0,3001,2999,1,0,0,0,3001,3002,1,
		0,0,0,3002,3005,1,0,0,0,3003,3001,1,0,0,0,3004,3006,5,27,0,0,3005,3004,
		1,0,0,0,3005,3006,1,0,0,0,3006,3010,1,0,0,0,3007,3009,5,5,0,0,3008,3007,
		1,0,0,0,3009,3012,1,0,0,0,3010,3008,1,0,0,0,3010,3011,1,0,0,0,3011,3013,
		1,0,0,0,3012,3010,1,0,0,0,3013,3017,5,90,0,0,3014,3016,5,5,0,0,3015,3014,
		1,0,0,0,3016,3019,1,0,0,0,3017,3015,1,0,0,0,3017,3018,1,0,0,0,3018,3022,
		1,0,0,0,3019,3017,1,0,0,0,3020,3023,3,134,67,0,3021,3023,5,27,0,0,3022,
		3020,1,0,0,0,3022,3021,1,0,0,0,3023,3026,1,0,0,0,3024,3026,5,27,0,0,3025,
		2994,1,0,0,0,3025,2996,1,0,0,0,3025,3024,1,0,0,0,3026,251,1,0,0,0,3027,
		3061,5,9,0,0,3028,3030,3,334,167,0,3029,3028,1,0,0,0,3030,3033,1,0,0,0,
		3031,3029,1,0,0,0,3031,3032,1,0,0,0,3032,3037,1,0,0,0,3033,3031,1,0,0,
		0,3034,3036,5,5,0,0,3035,3034,1,0,0,0,3036,3039,1,0,0,0,3037,3035,1,0,
		0,0,3037,3038,1,0,0,0,3038,3040,1,0,0,0,3039,3037,1,0,0,0,3040,3044,5,
		78,0,0,3041,3043,5,5,0,0,3042,3041,1,0,0,0,3043,3046,1,0,0,0,3044,3042,
		1,0,0,0,3044,3045,1,0,0,0,3045,3047,1,0,0,0,3046,3044,1,0,0,0,3047,3051,
		3,66,33,0,3048,3050,5,5,0,0,3049,3048,1,0,0,0,3050,3053,1,0,0,0,3051,3049,
		1,0,0,0,3051,3052,1,0,0,0,3052,3054,1,0,0,0,3053,3051,1,0,0,0,3054,3058,
		5,28,0,0,3055,3057,5,5,0,0,3056,3055,1,0,0,0,3057,3060,1,0,0,0,3058,3056,
		1,0,0,0,3058,3059,1,0,0,0,3059,3062,1,0,0,0,3060,3058,1,0,0,0,3061,3031,
		1,0,0,0,3061,3062,1,0,0,0,3062,3063,1,0,0,0,3063,3064,3,152,76,0,3064,
		3065,5,10,0,0,3065,253,1,0,0,0,3066,3070,5,91,0,0,3067,3069,5,5,0,0,3068,
		3067,1,0,0,0,3069,3072,1,0,0,0,3070,3068,1,0,0,0,3070,3071,1,0,0,0,3071,
		3074,1,0,0,0,3072,3070,1,0,0,0,3073,3075,3,252,126,0,3074,3073,1,0,0,0,
		3074,3075,1,0,0,0,3075,3079,1,0,0,0,3076,3078,5,5,0,0,3077,3076,1,0,0,
		0,3078,3081,1,0,0,0,3079,3077,1,0,0,0,3079,3080,1,0,0,0,3080,3082,1,0,
		0,0,3081,3079,1,0,0,0,3082,3086,5,13,0,0,3083,3085,5,5,0,0,3084,3083,1,
		0,0,0,3085,3088,1,0,0,0,3086,3084,1,0,0,0,3086,3087,1,0,0,0,3087,3098,
		1,0,0,0,3088,3086,1,0,0,0,3089,3093,3,256,128,0,3090,3092,5,5,0,0,3091,
		3090,1,0,0,0,3092,3095,1,0,0,0,3093,3091,1,0,0,0,3093,3094,1,0,0,0,3094,
		3097,1,0,0,0,3095,3093,1,0,0,0,3096,3089,1,0,0,0,3097,3100,1,0,0,0,3098,
		3096,1,0,0,0,3098,3099,1,0,0,0,3099,3104,1,0,0,0,3100,3098,1,0,0,0,3101,
		3103,5,5,0,0,3102,3101,1,0,0,0,3103,3106,1,0,0,0,3104,3102,1,0,0,0,3104,
		3105,1,0,0,0,3105,3107,1,0,0,0,3106,3104,1,0,0,0,3107,3108,5,14,0,0,3108,
		255,1,0,0,0,3109,3126,3,258,129,0,3110,3112,5,5,0,0,3111,3110,1,0,0,0,
		3112,3115,1,0,0,0,3113,3111,1,0,0,0,3113,3114,1,0,0,0,3114,3116,1,0,0,
		0,3115,3113,1,0,0,0,3116,3120,5,8,0,0,3117,3119,5,5,0,0,3118,3117,1,0,
		0,0,3119,3122,1,0,0,0,3120,3118,1,0,0,0,3120,3121,1,0,0,0,3121,3123,1,
		0,0,0,3122,3120,1,0,0,0,3123,3125,3,258,129,0,3124,3113,1,0,0,0,3125,3128,
		1,0,0,0,3126,3124,1,0,0,0,3126,3127,1,0,0,0,3127,3136,1,0,0,0,3128,3126,
		1,0,0,0,3129,3131,5,5,0,0,3130,3129,1,0,0,0,3131,3134,1,0,0,0,3132,3130,
		1,0,0,0,3132,3133,1,0,0,0,3133,3135,1,0,0,0,3134,3132,1,0,0,0,3135,3137,
		5,8,0,0,3136,3132,1,0,0,0,3136,3137,1,0,0,0,3137,3141,1,0,0,0,3138,3140,
		5,5,0,0,3139,3138,1,0,0,0,3140,3143,1,0,0,0,3141,3139,1,0,0,0,3141,3142,
		1,0,0,0,3142,3144,1,0,0,0,3143,3141,1,0,0,0,3144,3148,5,34,0,0,3145,3147,
		5,5,0,0,3146,3145,1,0,0,0,3147,3150,1,0,0,0,3148,3146,1,0,0,0,3148,3149,
		1,0,0,0,3149,3151,1,0,0,0,3150,3148,1,0,0,0,3151,3153,3,134,67,0,3152,
		3154,3,148,74,0,3153,3152,1,0,0,0,3153,3154,1,0,0,0,3154,3174,1,0,0,0,
		3155,3159,5,90,0,0,3156,3158,5,5,0,0,3157,3156,1,0,0,0,3158,3161,1,0,0,
		0,3159,3157,1,0,0,0,3159,3160,1,0,0,0,3160,3162,1,0,0,0,3161,3159,1,0,
		0,0,3162,3166,5,34,0,0,3163,3165,5,5,0,0,3164,3163,1,0,0,0,3165,3168,1,
		0,0,0,3166,3164,1,0,0,0,3166,3167,1,0,0,0,3167,3169,1,0,0,0,3168,3166,
		1,0,0,0,3169,3171,3,134,67,0,3170,3172,3,148,74,0,3171,3170,1,0,0,0,3171,
		3172,1,0,0,0,3172,3174,1,0,0,0,3173,3109,1,0,0,0,3173,3155,1,0,0,0,3174,
		257,1,0,0,0,3175,3179,3,152,76,0,3176,3179,3,260,130,0,3177,3179,3,262,
		131,0,3178,3175,1,0,0,0,3178,3176,1,0,0,0,3178,3177,1,0,0,0,3179,259,1,
		0,0,0,3180,3184,3,280,140,0,3181,3183,5,5,0,0,3182,3181,1,0,0,0,3183,3186,
		1,0,0,0,3184,3182,1,0,0,0,3184,3185,1,0,0,0,3185,3187,1,0,0,0,3186,3184,
		1,0,0,0,3187,3188,3,152,76,0,3188,261,1,0,0,0,3189,3193,3,282,141,0,3190,
		3192,5,5,0,0,3191,3190,1,0,0,0,3192,3195,1,0,0,0,3193,3191,1,0,0,0,3193,
		3194,1,0,0,0,3194,3196,1,0,0,0,3195,3193,1,0,0,0,3196,3197,3,98,49,0,3197,
		263,1,0,0,0,3198,3202,5,92,0,0,3199,3201,5,5,0,0,3200,3199,1,0,0,0,3201,
		3204,1,0,0,0,3202,3200,1,0,0,0,3202,3203,1,0,0,0,3203,3205,1,0,0,0,3204,
		3202,1,0,0,0,3205,3233,3,136,68,0,3206,3208,5,5,0,0,3207,3206,1,0,0,0,
		3208,3211,1,0,0,0,3209,3207,1,0,0,0,3209,3210,1,0,0,0,3210,3212,1,0,0,
		0,3211,3209,1,0,0,0,3212,3214,3,266,133,0,3213,3209,1,0,0,0,3214,3215,
		1,0,0,0,3215,3213,1,0,0,0,3215,3216,1,0,0,0,3216,3224,1,0,0,0,3217,3219,
		5,5,0,0,3218,3217,1,0,0,0,3219,3222,1,0,0,0,3220,3218,1,0,0,0,3220,3221,
		1,0,0,0,3221,3223,1,0,0,0,3222,3220,1,0,0,0,3223,3225,3,268,134,0,3224,
		3220,1,0,0,0,3224,3225,1,0,0,0,3225,3234,1,0,0,0,3226,3228,5,5,0,0,3227,
		3226,1,0,0,0,3228,3231,1,0,0,0,3229,3227,1,0,0,0,3229,3230,1,0,0,0,3230,
		3232,1,0,0,0,3231,3229,1,0,0,0,3232,3234,3,268,134,0,3233,3213,1,0,0,0,
		3233,3229,1,0,0,0,3234,265,1,0,0,0,3235,3239,5,93,0,0,3236,3238,5,5,0,
		0,3237,3236,1,0,0,0,3238,3241,1,0,0,0,3239,3237,1,0,0,0,3239,3240,1,0,
		0,0,3240,3242,1,0,0,0,3241,3239,1,0,0,0,3242,3246,5,9,0,0,3243,3245,3,
		334,167,0,3244,3243,1,0,0,0,3245,3248,1,0,0,0,3246,3244,1,0,0,0,3246,3247,
		1,0,0,0,3247,3249,1,0,0,0,3248,3246,1,0,0,0,3249,3250,3,344,172,0,3250,
		3251,5,26,0,0,3251,3259,3,98,49,0,3252,3254,5,5,0,0,3253,3252,1,0,0,0,
		3254,3257,1,0,0,0,3255,3253,1,0,0,0,3255,3256,1,0,0,0,3256,3258,1,0,0,
		0,3257,3255,1,0,0,0,3258,3260,5,8,0,0,3259,3255,1,0,0,0,3259,3260,1,0,
		0,0,3260,3261,1,0,0,0,3261,3265,5,10,0,0,3262,3264,5,5,0,0,3263,3262,1,
		0,0,0,3264,3267,1,0,0,0,3265,3263,1,0,0,0,3265,3266,1,0,0,0,3266,3268,
		1,0,0,0,3267,3265,1,0,0,0,3268,3269,3,136,68,0,3269,267,1,0,0,0,3270,3274,
		5,94,0,0,3271,3273,5,5,0,0,3272,3271,1,0,0,0,3273,3276,1,0,0,0,3274,3272,
		1,0,0,0,3274,3275,1,0,0,0,3275,3277,1,0,0,0,3276,3274,1,0,0,0,3277,3278,
		3,136,68,0,3278,269,1,0,0,0,3279,3283,5,98,0,0,3280,3282,5,5,0,0,3281,
		3280,1,0,0,0,3282,3285,1,0,0,0,3283,3281,1,0,0,0,3283,3284,1,0,0,0,3284,
		3286,1,0,0,0,3285,3283,1,0,0,0,3286,3296,3,152,76,0,3287,3289,7,11,0,0,
		3288,3290,3,152,76,0,3289,3288,1,0,0,0,3289,3290,1,0,0,0,3290,3296,1,0,
		0,0,3291,3296,5,100,0,0,3292,3296,5,59,0,0,3293,3296,5,101,0,0,3294,3296,
		5,60,0,0,3295,3279,1,0,0,0,3295,3287,1,0,0,0,3295,3291,1,0,0,0,3295,3292,
		1,0,0,0,3295,3293,1,0,0,0,3295,3294,1,0,0,0,3296,271,1,0,0,0,3297,3299,
		3,122,61,0,3298,3297,1,0,0,0,3298,3299,1,0,0,0,3299,3300,1,0,0,0,3300,
		3304,5,38,0,0,3301,3303,5,5,0,0,3302,3301,1,0,0,0,3303,3306,1,0,0,0,3304,
		3302,1,0,0,0,3304,3305,1,0,0,0,3305,3309,1,0,0,0,3306,3304,1,0,0,0,3307,
		3310,3,344,172,0,3308,3310,5,74,0,0,3309,3307,1,0,0,0,3309,3308,1,0,0,
		0,3310,273,1,0,0,0,3311,3312,7,12,0,0,3312,275,1,0,0,0,3313,3314,7,13,
		0,0,3314,277,1,0,0,0,3315,3316,7,14,0,0,3316,279,1,0,0,0,3317,3318,7,15,
		0,0,3318,281,1,0,0,0,3319,3320,7,16,0,0,3320,283,1,0,0,0,3321,3322,7,17,
		0,0,3322,285,1,0,0,0,3323,3324,7,18,0,0,3324,287,1,0,0,0,3325,3326,7,19,
		0,0,3326,289,1,0,0,0,3327,3333,5,20,0,0,3328,3333,5,21,0,0,3329,3333,5,
		19,0,0,3330,3333,5,18,0,0,3331,3333,3,294,147,0,3332,3327,1,0,0,0,3332,
		3328,1,0,0,0,3332,3329,1,0,0,0,3332,3330,1,0,0,0,3332,3331,1,0,0,0,3333,
		291,1,0,0,0,3334,3339,5,20,0,0,3335,3339,5,21,0,0,3336,3337,5,25,0,0,3337,
		3339,3,294,147,0,3338,3334,1,0,0,0,3338,3335,1,0,0,0,3338,3336,1,0,0,0,
		3339,293,1,0,0,0,3340,3341,7,20,0,0,3341,295,1,0,0,0,3342,3344,5,5,0,0,
		3343,3342,1,0,0,0,3344,3347,1,0,0,0,3345,3343,1,0,0,0,3345,3346,1,0,0,
		0,3346,3348,1,0,0,0,3347,3345,1,0,0,0,3348,3358,5,7,0,0,3349,3351,5,5,
		0,0,3350,3349,1,0,0,0,3351,3354,1,0,0,0,3352,3350,1,0,0,0,3352,3353,1,
		0,0,0,3353,3355,1,0,0,0,3354,3352,1,0,0,0,3355,3358,3,298,149,0,3356,3358,
		5,38,0,0,3357,3345,1,0,0,0,3357,3352,1,0,0,0,3357,3356,1,0,0,0,3358,297,
		1,0,0,0,3359,3360,5,46,0,0,3360,3361,5,7,0,0,3361,299,1,0,0,0,3362,3365,
		3,334,167,0,3363,3365,3,304,152,0,3364,3362,1,0,0,0,3364,3363,1,0,0,0,
		3365,3366,1,0,0,0,3366,3364,1,0,0,0,3366,3367,1,0,0,0,3367,301,1,0,0,0,
		3368,3371,3,334,167,0,3369,3371,3,328,164,0,3370,3368,1,0,0,0,3370,3369,
		1,0,0,0,3371,3372,1,0,0,0,3372,3370,1,0,0,0,3372,3373,1,0,0,0,3373,303,
		1,0,0,0,3374,3383,3,310,155,0,3375,3383,3,312,156,0,3376,3383,3,314,157,
		0,3377,3383,3,322,161,0,3378,3383,3,324,162,0,3379,3383,3,326,163,0,3380,
		3383,3,328,164,0,3381,3383,3,332,166,0,3382,3374,1,0,0,0,3382,3375,1,0,
		0,0,3382,3376,1,0,0,0,3382,3377,1,0,0,0,3382,3378,1,0,0,0,3382,3379,1,
		0,0,0,3382,3380,1,0,0,0,3382,3381,1,0,0,0,3383,3387,1,0,0,0,3384,3386,
		5,5,0,0,3385,3384,1,0,0,0,3386,3389,1,0,0,0,3387,3385,1,0,0,0,3387,3388,
		1,0,0,0,3388,305,1,0,0,0,3389,3387,1,0,0,0,3390,3392,3,308,154,0,3391,
		3390,1,0,0,0,3392,3393,1,0,0,0,3393,3391,1,0,0,0,3393,3394,1,0,0,0,3394,
		307,1,0,0,0,3395,3404,3,334,167,0,3396,3400,5,124,0,0,3397,3399,5,5,0,
		0,3398,3397,1,0,0,0,3399,3402,1,0,0,0,3400,3398,1,0,0,0,3400,3401,1,0,
		0,0,3401,3404,1,0,0,0,3402,3400,1,0,0,0,3403,3395,1,0,0,0,3403,3396,1,
		0,0,0,3404,309,1,0,0,0,3405,3406,7,21,0,0,3406,311,1,0,0,0,3407,3408,7,
		22,0,0,3408,313,1,0,0,0,3409,3410,7,23,0,0,3410,315,1,0,0,0,3411,3412,
		7,24,0,0,3412,317,1,0,0,0,3413,3415,3,320,160,0,3414,3413,1,0,0,0,3415,
		3416,1,0,0,0,3416,3414,1,0,0,0,3416,3417,1,0,0,0,3417,319,1,0,0,0,3418,
		3422,3,330,165,0,3419,3421,5,5,0,0,3420,3419,1,0,0,0,3421,3424,1,0,0,0,
		3422,3420,1,0,0,0,3422,3423,1,0,0,0,3423,3434,1,0,0,0,3424,3422,1,0,0,
		0,3425,3429,3,316,158,0,3426,3428,5,5,0,0,3427,3426,1,0,0,0,3428,3431,
		1,0,0,0,3429,3427,1,0,0,0,3429,3430,1,0,0,0,3430,3434,1,0,0,0,3431,3429,
		1,0,0,0,3432,3434,3,334,167,0,3433,3418,1,0,0,0,3433,3425,1,0,0,0,3433,
		3432,1,0,0,0,3434,321,1,0,0,0,3435,3436,7,25,0,0,3436,323,1,0,0,0,3437,
		3438,5,129,0,0,3438,325,1,0,0,0,3439,3440,7,26,0,0,3440,327,1,0,0,0,3441,
		3442,7,27,0,0,3442,329,1,0,0,0,3443,3444,5,134,0,0,3444,331,1,0,0,0,3445,
		3446,7,28,0,0,3446,333,1,0,0,0,3447,3450,3,336,168,0,3448,3450,3,338,169,
		0,3449,3447,1,0,0,0,3449,3448,1,0,0,0,3450,3454,1,0,0,0,3451,3453,5,5,
		0,0,3452,3451,1,0,0,0,3453,3456,1,0,0,0,3454,3452,1,0,0,0,3454,3455,1,
		0,0,0,3455,335,1,0,0,0,3456,3454,1,0,0,0,3457,3461,3,340,170,0,3458,3460,
		5,5,0,0,3459,3458,1,0,0,0,3460,3463,1,0,0,0,3461,3459,1,0,0,0,3461,3462,
		1,0,0,0,3462,3467,1,0,0,0,3463,3461,1,0,0,0,3464,3467,5,41,0,0,3465,3467,
		5,43,0,0,3466,3457,1,0,0,0,3466,3464,1,0,0,0,3466,3465,1,0,0,0,3467,3468,
		1,0,0,0,3468,3469,3,342,171,0,3469,337,1,0,0,0,3470,3474,3,340,170,0,3471,
		3473,5,5,0,0,3472,3471,1,0,0,0,3473,3476,1,0,0,0,3474,3472,1,0,0,0,3474,
		3475,1,0,0,0,3475,3480,1,0,0,0,3476,3474,1,0,0,0,3477,3480,5,41,0,0,3478,
		3480,5,43,0,0,3479,3470,1,0,0,0,3479,3477,1,0,0,0,3479,3478,1,0,0,0,3480,
		3481,1,0,0,0,3481,3483,5,11,0,0,3482,3484,3,342,171,0,3483,3482,1,0,0,
		0,3484,3485,1,0,0,0,3485,3483,1,0,0,0,3485,3486,1,0,0,0,3486,3487,1,0,
		0,0,3487,3488,5,12,0,0,3488,339,1,0,0,0,3489,3490,7,0,0,0,3490,3494,7,
		29,0,0,3491,3493,5,5,0,0,3492,3491,1,0,0,0,3493,3496,1,0,0,0,3494,3492,
		1,0,0,0,3494,3495,1,0,0,0,3495,3497,1,0,0,0,3496,3494,1,0,0,0,3497,3498,
		5,26,0,0,3498,341,1,0,0,0,3499,3502,3,36,18,0,3500,3502,3,106,53,0,3501,
		3499,1,0,0,0,3501,3500,1,0,0,0,3502,343,1,0,0,0,3503,3504,7,30,0,0,3504,
		345,1,0,0,0,3505,3516,3,344,172,0,3506,3508,5,5,0,0,3507,3506,1,0,0,0,
		3508,3511,1,0,0,0,3509,3507,1,0,0,0,3509,3510,1,0,0,0,3510,3512,1,0,0,
		0,3511,3509,1,0,0,0,3512,3513,5,7,0,0,3513,3515,3,344,172,0,3514,3509,
		1,0,0,0,3515,3518,1,0,0,0,3516,3514,1,0,0,0,3516,3517,1,0,0,0,3517,347,
		1,0,0,0,3518,3516,1,0,0,0,542,349,354,360,368,374,379,385,395,404,411,
		418,425,430,435,441,443,448,456,459,466,469,475,482,486,491,498,508,511,
		518,521,524,529,536,540,545,549,554,561,565,570,574,579,586,590,593,599,
		602,610,617,626,633,640,646,652,656,658,663,669,672,677,685,692,699,703,
		709,716,722,733,737,743,751,757,764,769,776,785,792,799,805,811,815,820,
		826,831,838,845,849,855,862,869,875,881,888,895,902,906,913,919,925,931,
		935,940,947,951,956,963,967,972,976,982,989,996,1002,1008,1012,1014,1019,
		1025,1031,1038,1042,1045,1051,1055,1060,1067,1072,1077,1084,1091,1098,
		1102,1107,1111,1116,1120,1127,1131,1136,1142,1149,1156,1160,1166,1173,
		1180,1186,1192,1196,1201,1207,1213,1217,1222,1229,1234,1239,1244,1249,
		1253,1258,1265,1270,1272,1277,1281,1286,1290,1295,1299,1302,1305,1310,
		1314,1317,1319,1325,1331,1337,1344,1351,1358,1362,1367,1371,1374,1380,
		1387,1394,1398,1403,1410,1417,1421,1426,1431,1437,1444,1451,1457,1463,
		1467,1469,1474,1480,1486,1493,1497,1503,1510,1514,1520,1527,1533,1539,
		1546,1553,1557,1562,1566,1569,1575,1582,1589,1593,1598,1602,1608,1617,
		1621,1626,1633,1637,1642,1651,1658,1664,1670,1674,1680,1683,1689,1693,
		1698,1702,1705,1712,1716,1720,1725,1731,1739,1746,1752,1759,1763,1766,
		1770,1775,1781,1785,1791,1798,1801,1807,1814,1823,1828,1833,1840,1845,
		1849,1855,1859,1864,1873,1880,1886,1891,1897,1902,1907,1913,1917,1922,
		1929,1933,1937,1945,1948,1951,1955,1957,1964,1971,1976,1982,1989,1997,
		2003,2010,2015,2023,2027,2033,2042,2047,2053,2057,2062,2069,2082,2087,
		2096,2102,2110,2117,2123,2130,2137,2143,2151,2158,2166,2173,2180,2188,
		2197,2202,2204,2211,2218,2225,2236,2243,2251,2257,2265,2272,2280,2287,
		2294,2301,2308,2314,2325,2328,2334,2342,2349,2355,2362,2369,2375,2382,
		2390,2396,2403,2410,2416,2422,2426,2431,2440,2446,2449,2452,2456,2461,
		2465,2470,2479,2486,2493,2499,2505,2509,2514,2523,2530,2537,2543,2549,
		2553,2558,2561,2566,2571,2578,2585,2588,2591,2596,2615,2621,2628,2637,
		2644,2651,2657,2663,2667,2672,2675,2683,2688,2690,2699,2701,2712,2719,
		2730,2737,2746,2750,2755,2762,2765,2771,2780,2787,2793,2799,2803,2810,
		2817,2821,2823,2826,2831,2838,2845,2850,2855,2862,2869,2873,2878,2882,
		2887,2891,2895,2898,2903,2910,2917,2924,2927,2932,2936,2945,2952,2957,
		2961,2964,2970,2977,2984,2991,2996,3001,3005,3010,3017,3022,3025,3031,
		3037,3044,3051,3058,3061,3070,3074,3079,3086,3093,3098,3104,3113,3120,
		3126,3132,3136,3141,3148,3153,3159,3166,3171,3173,3178,3184,3193,3202,
		3209,3215,3220,3224,3229,3233,3239,3246,3255,3259,3265,3274,3283,3289,
		3295,3298,3304,3309,3332,3338,3345,3352,3357,3364,3366,3370,3372,3382,
		3387,3393,3400,3403,3416,3422,3429,3433,3449,3454,3461,3466,3474,3479,
		3485,3494,3501,3509,3516
	};

	public static readonly ATN _ATN = new ATNDeserializer().Deserialize(_serializedATN);
}